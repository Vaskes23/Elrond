import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import classNames from "classnames";
import { PureComponent } from "react";
import { DISPLAYNAME_PREFIX, InputGroup, Overlay2 } from "@blueprintjs/core";
import { Search } from "@blueprintjs/icons";
import { Classes } from "../../common";
import { QueryList } from "../query-list/queryList";
/**
 * Omnibar component.
 *
 * @see https://blueprintjs.com/docs/#select/omnibar
 */
export class Omnibar extends PureComponent {
    constructor() {
        super(...arguments);
        this.renderQueryList = (listProps) => {
            const { inputProps = {}, isOpen, overlayProps = {} } = this.props;
            const { handleKeyDown, handleKeyUp } = listProps;
            const handlers = isOpen ? { onKeyDown: handleKeyDown, onKeyUp: handleKeyUp } : {};
            return (_jsx(Overlay2, { hasBackdrop: true, ...overlayProps, isOpen: isOpen, className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className), onClose: this.handleOverlayClose, children: _jsxs("div", { className: classNames(Classes.OMNIBAR, listProps.className), ...handlers, children: [_jsx(InputGroup, { autoFocus: true, leftIcon: _jsx(Search, {}), placeholder: "Search...", size: "large", ...inputProps, onChange: listProps.handleQueryChange, value: listProps.query }), listProps.itemList] }) }));
        };
        this.handleOverlayClose = (event) => {
            var _a, _b, _c, _d;
            (_b = (_a = this.props.overlayProps) === null || _a === void 0 ? void 0 : _a.onClose) === null || _b === void 0 ? void 0 : _b.call(_a, event);
            (_d = (_c = this.props).onClose) === null || _d === void 0 ? void 0 : _d.call(_c, event);
        };
    }
    static ofType() {
        return Omnibar;
    }
    render() {
        // omit props specific to this component, spread the rest.
        const { isOpen, inputProps, overlayProps, ...restProps } = this.props;
        const initialContent = "initialContent" in this.props ? this.props.initialContent : null;
        return (_jsx(QueryList, { ...restProps, 
            // Omnibar typically does not keep track of and/or show its selection state like other
            // select components, so it's more of a menu than a listbox. This means that users should return
            // MenuItems with roleStructure="menuitem" (the default value) in `props.itemRenderer`.
            menuProps: { role: "menu" }, initialContent: initialContent, renderer: this.renderQueryList }));
    }
}
Omnibar.displayName = `${DISPLAYNAME_PREFIX}.Omnibar`;
//# sourceMappingURL=omnibar.js.map