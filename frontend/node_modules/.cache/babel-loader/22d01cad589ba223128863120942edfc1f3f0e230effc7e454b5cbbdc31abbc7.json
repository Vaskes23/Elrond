{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { AbstractPureComponent, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { AsyncControllableTextArea } from \"./asyncControllableTextArea\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Text area component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-area\n */\nexport class TextArea extends AbstractPureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n    // used to measure and set the height of the component on first mount\n    this.textareaElement = null;\n    this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n    this.maybeSyncHeightToScrollHeight = () => {\n      const {\n        autoResize\n      } = this.props;\n      if (this.textareaElement != null) {\n        const {\n          scrollHeight\n        } = this.textareaElement;\n        if (autoResize) {\n          // set height to 0 to force scrollHeight to be the minimum height to fit\n          // the content of the textarea\n          this.textareaElement.style.height = \"0px\";\n          this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n          this.setState({\n            height: scrollHeight\n          });\n        }\n      }\n      if (this.props.autoResize && this.textareaElement != null) {\n        // set height to 0 to force scrollHeight to be the minimum height to fit\n        // the content of the textarea\n        this.textareaElement.style.height = \"0px\";\n        const {\n          scrollHeight\n        } = this.textareaElement;\n        this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n        this.setState({\n          height: scrollHeight\n        });\n      }\n    };\n    this.handleChange = e => {\n      var _a, _b;\n      this.maybeSyncHeightToScrollHeight();\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n  }\n  componentDidMount() {\n    this.maybeSyncHeightToScrollHeight();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.textareaElement);\n    }\n    if (prevProps.value !== this.props.value || prevProps.style !== this.props.style) {\n      this.maybeSyncHeightToScrollHeight();\n    }\n  }\n  render() {\n    const {\n      asyncControl,\n      autoResize,\n      className,\n      fill,\n      inputRef,\n      intent,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      large,\n      size = \"medium\",\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      small,\n      ...htmlProps\n    } = this.props;\n    const rootClasses = classNames(Classes.INPUT, Classes.TEXT_AREA, Classes.intentClass(intent), Classes.sizeClass(size, {\n      large,\n      small\n    }), {\n      [Classes.FILL]: fill,\n      [Classes.TEXT_AREA_AUTO_RESIZE]: autoResize\n    }, className);\n    // add explicit height style while preserving user-supplied styles if they exist\n    let {\n      style = {}\n    } = htmlProps;\n    if (autoResize && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = {\n        ...style,\n        height: `${this.state.height}px`\n      };\n    }\n    const TextAreaComponent = asyncControl ? AsyncControllableTextArea : \"textarea\";\n    return _jsx(TextAreaComponent, {\n      ...htmlProps,\n      className: rootClasses,\n      onChange: this.handleChange,\n      style: style,\n      ref: this.handleRef\n    });\n  }\n}\nTextArea.defaultProps = {\n  autoResize: false,\n  fill: false,\n  large: false,\n  size: \"medium\",\n  small: false\n};\nTextArea.displayName = `${DISPLAYNAME_PREFIX}.TextArea`;","map":{"version":3,"names":["classNames","AbstractPureComponent","Classes","refHandler","setRef","DISPLAYNAME_PREFIX","AsyncControllableTextArea","TextArea","constructor","state","textareaElement","handleRef","props","inputRef","maybeSyncHeightToScrollHeight","autoResize","scrollHeight","style","height","toString","setState","handleChange","e","_b","_a","onChange","call","componentDidMount","componentDidUpdate","prevProps","value","render","asyncControl","className","fill","intent","large","size","small","htmlProps","rootClasses","INPUT","TEXT_AREA","intentClass","sizeClass","FILL","TEXT_AREA_AUTO_RESIZE","TextAreaComponent","_jsx","ref","defaultProps","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/forms/textArea.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\n\nimport { AbstractPureComponent, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type IntentProps, type Props } from \"../../common/props\";\nimport type { Size } from \"../../common/size\";\n\nimport { AsyncControllableTextArea } from \"./asyncControllableTextArea\";\n\nexport interface TextAreaProps extends IntentProps, Props, React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the component should automatically resize vertically as a user types in the text input.\n     * This will disable manual resizing in the vertical dimension.\n     *\n     * @default false\n     */\n    autoResize?: boolean;\n\n    /**\n     * Whether the text area should take up the full width of its container.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /**\n     * Ref handler that receives HTML `<textarea>` element backing this component.\n     */\n    inputRef?: React.Ref<HTMLTextAreaElement>;\n\n    /**\n     * Whether the text area should appear with large styling.\n     *\n     * @deprecated use `size=\"large\"` instead.\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Whether the text area should appear with small styling.\n     *\n     * @deprecated use `size=\"small\"` instead.\n     * @default false\n     */\n    small?: boolean;\n\n    /**\n     * The size styling of the text area.\n     *\n     * @default \"medium\"\n     */\n    size?: Size;\n}\n\nexport interface TextAreaState {\n    height?: number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Text area component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-area\n */\nexport class TextArea extends AbstractPureComponent<TextAreaProps, TextAreaState> {\n    public static defaultProps: TextAreaProps = {\n        autoResize: false,\n        fill: false,\n        large: false,\n        size: \"medium\",\n        small: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.TextArea`;\n\n    public state: TextAreaState = {};\n\n    // used to measure and set the height of the component on first mount\n    public textareaElement: HTMLTextAreaElement | null = null;\n\n    private handleRef: React.RefCallback<HTMLTextAreaElement> = refHandler(\n        this,\n        \"textareaElement\",\n        this.props.inputRef,\n    );\n\n    private maybeSyncHeightToScrollHeight = () => {\n        const { autoResize } = this.props;\n\n        if (this.textareaElement != null) {\n            const { scrollHeight } = this.textareaElement;\n\n            if (autoResize) {\n                // set height to 0 to force scrollHeight to be the minimum height to fit\n                // the content of the textarea\n                this.textareaElement.style.height = \"0px\";\n                this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n                this.setState({ height: scrollHeight });\n            }\n        }\n\n        if (this.props.autoResize && this.textareaElement != null) {\n            // set height to 0 to force scrollHeight to be the minimum height to fit\n            // the content of the textarea\n            this.textareaElement.style.height = \"0px\";\n\n            const { scrollHeight } = this.textareaElement;\n            this.textareaElement.style.height = scrollHeight.toString() + \"px\";\n            this.setState({ height: scrollHeight });\n        }\n    };\n\n    public componentDidMount() {\n        this.maybeSyncHeightToScrollHeight();\n    }\n\n    public componentDidUpdate(prevProps: TextAreaProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.textareaElement);\n        }\n\n        if (prevProps.value !== this.props.value || prevProps.style !== this.props.style) {\n            this.maybeSyncHeightToScrollHeight();\n        }\n    }\n\n    public render() {\n        const {\n            asyncControl,\n            autoResize,\n            className,\n            fill,\n            inputRef,\n            intent,\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            large,\n            size = \"medium\",\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            small,\n            ...htmlProps\n        } = this.props;\n\n        const rootClasses = classNames(\n            Classes.INPUT,\n            Classes.TEXT_AREA,\n            Classes.intentClass(intent),\n            Classes.sizeClass(size, { large, small }),\n            {\n                [Classes.FILL]: fill,\n                [Classes.TEXT_AREA_AUTO_RESIZE]: autoResize,\n            },\n            className,\n        );\n\n        // add explicit height style while preserving user-supplied styles if they exist\n        let { style = {} } = htmlProps;\n        if (autoResize && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = {\n                ...style,\n                height: `${this.state.height}px`,\n            };\n        }\n\n        const TextAreaComponent = asyncControl ? AsyncControllableTextArea : \"textarea\";\n\n        return (\n            <TextAreaComponent\n                {...htmlProps}\n                className={rootClasses}\n                onChange={this.handleChange}\n                style={style}\n                ref={this.handleRef}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this.maybeSyncHeightToScrollHeight();\n        this.props.onChange?.(e);\n    };\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AAEnC,SAASC,qBAAqB,EAAEC,OAAO,EAAEC,UAAU,EAAEC,MAAM,QAAQ,cAAc;AACjF,SAASC,kBAAkB,QAAsC,oBAAoB;AAGrF,SAASC,yBAAyB,QAAQ,6BAA6B;AA4DvE;AACA;AACA;;;;;AAKA,OAAM,MAAOC,QAAS,SAAQN,qBAAmD;EAAjFO,YAAA;;IAWW,KAAAC,KAAK,GAAkB,EAAE;IAEhC;IACO,KAAAC,eAAe,GAA+B,IAAI;IAEjD,KAAAC,SAAS,GAA2CR,UAAU,CAClE,IAAI,EACJ,iBAAiB,EACjB,IAAI,CAACS,KAAK,CAACC,QAAQ,CACtB;IAEO,KAAAC,6BAA6B,GAAG,MAAK;MACzC,MAAM;QAAEC;MAAU,CAAE,GAAG,IAAI,CAACH,KAAK;MAEjC,IAAI,IAAI,CAACF,eAAe,IAAI,IAAI,EAAE;QAC9B,MAAM;UAAEM;QAAY,CAAE,GAAG,IAAI,CAACN,eAAe;QAE7C,IAAIK,UAAU,EAAE;UACZ;UACA;UACA,IAAI,CAACL,eAAe,CAACO,KAAK,CAACC,MAAM,GAAG,KAAK;UACzC,IAAI,CAACR,eAAe,CAACO,KAAK,CAACC,MAAM,GAAGF,YAAY,CAACG,QAAQ,EAAE,GAAG,IAAI;UAClE,IAAI,CAACC,QAAQ,CAAC;YAAEF,MAAM,EAAEF;UAAY,CAAE,CAAC;QAC3C;MACJ;MAEA,IAAI,IAAI,CAACJ,KAAK,CAACG,UAAU,IAAI,IAAI,CAACL,eAAe,IAAI,IAAI,EAAE;QACvD;QACA;QACA,IAAI,CAACA,eAAe,CAACO,KAAK,CAACC,MAAM,GAAG,KAAK;QAEzC,MAAM;UAAEF;QAAY,CAAE,GAAG,IAAI,CAACN,eAAe;QAC7C,IAAI,CAACA,eAAe,CAACO,KAAK,CAACC,MAAM,GAAGF,YAAY,CAACG,QAAQ,EAAE,GAAG,IAAI;QAClE,IAAI,CAACC,QAAQ,CAAC;UAAEF,MAAM,EAAEF;QAAY,CAAE,CAAC;MAC3C;IACJ,CAAC;IAsEO,KAAAK,YAAY,GAAIC,CAAyC,IAAI;;MACjE,IAAI,CAACR,6BAA6B,EAAE;MACpC,CAAAS,EAAA,IAAAC,EAAA,OAAI,CAACZ,KAAK,EAACa,QAAQ,cAAAF,EAAA,uBAAAA,EAAA,CAAAG,IAAA,CAAAF,EAAA,EAAGF,CAAC,CAAC;IAC5B,CAAC;EACL;EAxEWK,iBAAiBA,CAAA;IACpB,IAAI,CAACb,6BAA6B,EAAE;EACxC;EAEOc,kBAAkBA,CAACC,SAAwB;IAC9C,IAAIA,SAAS,CAAChB,QAAQ,KAAK,IAAI,CAACD,KAAK,CAACC,QAAQ,EAAE;MAC5CT,MAAM,CAACyB,SAAS,CAAChB,QAAQ,EAAE,IAAI,CAAC;MAChC,IAAI,CAACF,SAAS,GAAGR,UAAU,CAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAACS,KAAK,CAACC,QAAQ,CAAC;MACzET,MAAM,CAAC,IAAI,CAACQ,KAAK,CAACC,QAAQ,EAAE,IAAI,CAACH,eAAe,CAAC;IACrD;IAEA,IAAImB,SAAS,CAACC,KAAK,KAAK,IAAI,CAAClB,KAAK,CAACkB,KAAK,IAAID,SAAS,CAACZ,KAAK,KAAK,IAAI,CAACL,KAAK,CAACK,KAAK,EAAE;MAC9E,IAAI,CAACH,6BAA6B,EAAE;IACxC;EACJ;EAEOiB,MAAMA,CAAA;IACT,MAAM;MACFC,YAAY;MACZjB,UAAU;MACVkB,SAAS;MACTC,IAAI;MACJrB,QAAQ;MACRsB,MAAM;MACN;MACAC,KAAK;MACLC,IAAI,GAAG,QAAQ;MACf;MACAC,KAAK;MACL,GAAGC;IAAS,CACf,GAAG,IAAI,CAAC3B,KAAK;IAEd,MAAM4B,WAAW,GAAGxC,UAAU,CAC1BE,OAAO,CAACuC,KAAK,EACbvC,OAAO,CAACwC,SAAS,EACjBxC,OAAO,CAACyC,WAAW,CAACR,MAAM,CAAC,EAC3BjC,OAAO,CAAC0C,SAAS,CAACP,IAAI,EAAE;MAAED,KAAK;MAAEE;IAAK,CAAE,CAAC,EACzC;MACI,CAACpC,OAAO,CAAC2C,IAAI,GAAGX,IAAI;MACpB,CAAChC,OAAO,CAAC4C,qBAAqB,GAAG/B;KACpC,EACDkB,SAAS,CACZ;IAED;IACA,IAAI;MAAEhB,KAAK,GAAG;IAAE,CAAE,GAAGsB,SAAS;IAC9B,IAAIxB,UAAU,IAAI,IAAI,CAACN,KAAK,CAACS,MAAM,IAAI,IAAI,EAAE;MACzC;MACA;MACAD,KAAK,GAAG;QACJ,GAAGA,KAAK;QACRC,MAAM,EAAE,GAAG,IAAI,CAACT,KAAK,CAACS,MAAM;OAC/B;IACL;IAEA,MAAM6B,iBAAiB,GAAGf,YAAY,GAAG1B,yBAAyB,GAAG,UAAU;IAE/E,OACI0C,IAAA,CAACD,iBAAiB;MAAA,GACVR,SAAS;MACbN,SAAS,EAAEO,WAAW;MACtBf,QAAQ,EAAE,IAAI,CAACJ,YAAY;MAC3BJ,KAAK,EAAEA,KAAK;MACZgC,GAAG,EAAE,IAAI,CAACtC;IAAS,EACrB;EAEV;;AAjHcJ,QAAA,CAAA2C,YAAY,GAAkB;EACxCnC,UAAU,EAAE,KAAK;EACjBmB,IAAI,EAAE,KAAK;EACXE,KAAK,EAAE,KAAK;EACZC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE;CACV;AAEa/B,QAAA,CAAA4C,WAAW,GAAG,GAAG9C,kBAAkB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}