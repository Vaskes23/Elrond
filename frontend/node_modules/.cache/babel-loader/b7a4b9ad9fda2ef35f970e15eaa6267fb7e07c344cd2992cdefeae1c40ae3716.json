{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\nimport { CaretDown, DoubleCaretVertical } from \"@blueprintjs/icons\";\nimport { DISABLED, FILL, HTML_SELECT, LARGE, MINIMAL } from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * HTML select component\n *\n * @see https://blueprintjs.com/docs/#core/components/html-select\n */\nexport const HTMLSelect = forwardRef((props, ref) => {\n  const {\n    className,\n    children,\n    disabled,\n    fill,\n    iconName = \"double-caret-vertical\",\n    iconProps,\n    large,\n    minimal,\n    options = [],\n    value,\n    ...htmlProps\n  } = props;\n  const classes = classNames(HTML_SELECT, {\n    [DISABLED]: disabled,\n    [FILL]: fill,\n    [LARGE]: large,\n    [MINIMAL]: minimal\n  }, className);\n  const iconTitle = \"Open dropdown\";\n  const endIcon = iconName === \"double-caret-vertical\" ? _jsx(DoubleCaretVertical, {\n    title: iconTitle,\n    ...iconProps\n  }) : _jsx(CaretDown, {\n    title: iconTitle,\n    ...iconProps\n  });\n  const optionChildren = options.map(option => {\n    const optionProps = typeof option === \"object\" ? option : {\n      value: option\n    };\n    return _createElement(\"option\", {\n      ...optionProps,\n      key: optionProps.value,\n      children: optionProps.label || optionProps.value\n    });\n  });\n  return _jsxs(\"div\", {\n    className: classes,\n    children: [_jsxs(\"select\", {\n      disabled: disabled,\n      ref: ref,\n      value: value,\n      ...htmlProps,\n      multiple: false,\n      children: [optionChildren, children]\n    }), endIcon]\n  });\n});\nHTMLSelect.displayName = `${DISPLAYNAME_PREFIX}.HTMLSelect`;","map":{"version":3,"names":["classNames","forwardRef","CaretDown","DoubleCaretVertical","DISABLED","FILL","HTML_SELECT","LARGE","MINIMAL","DISPLAYNAME_PREFIX","HTMLSelect","props","ref","className","children","disabled","fill","iconName","iconProps","large","minimal","options","value","htmlProps","classes","iconTitle","endIcon","_jsx","title","optionChildren","map","option","optionProps","_createElement","key","label","_jsxs","multiple","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/html-select/htmlSelect.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\n\nimport { CaretDown, DoubleCaretVertical, type IconName, type SVGIconProps } from \"@blueprintjs/icons\";\n\nimport { DISABLED, FILL, HTML_SELECT, LARGE, MINIMAL } from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, type OptionProps } from \"../../common/props\";\nimport type { Extends } from \"../../common/utils\";\n\nexport type HTMLSelectIconName = Extends<IconName, \"double-caret-vertical\" | \"caret-down\">;\n\nexport interface HTMLSelectProps\n    extends React.RefAttributes<HTMLSelectElement>,\n        React.SelectHTMLAttributes<HTMLSelectElement> {\n    children?: React.ReactNode;\n\n    /** Whether this element is non-interactive. */\n    disabled?: boolean;\n\n    /** Whether this element should fill its container. */\n    fill?: boolean;\n\n    /**\n     * Name of one of the supported icons for this component to display on the right side of the element.\n     *\n     * @default \"double-caret-vertical\"\n     */\n    iconName?: HTMLSelectIconName;\n\n    /**\n     * Props to spread to the icon element displayed on the right side of the element.\n     */\n    iconProps?: Partial<SVGIconProps>;\n\n    /** Whether to use large styles. */\n    large?: boolean;\n\n    /** Whether to use minimal styles. */\n    minimal?: boolean;\n\n    /** Multiple select is not supported. */\n    multiple?: never;\n\n    /** Change event handler. Use `event.currentTarget.value` to access the new value. */\n    onChange?: React.ChangeEventHandler<HTMLSelectElement>;\n\n    /**\n     * Shorthand for supplying options: an array of basic types or\n     * `{ label?, value }` objects. If no `label` is supplied, `value`\n     * will be used as the label.\n     */\n    options?: ReadonlyArray<string | number | OptionProps>;\n\n    /** Controlled value of this component. */\n    value?: string | number;\n\n    /** Placeholder text to display when no option is selected. */\n    placeholder?: string;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * HTML select component\n *\n * @see https://blueprintjs.com/docs/#core/components/html-select\n */\nexport const HTMLSelect: React.FC<HTMLSelectProps> = forwardRef((props, ref) => {\n    const {\n        className,\n        children,\n        disabled,\n        fill,\n        iconName = \"double-caret-vertical\",\n        iconProps,\n        large,\n        minimal,\n        options = [],\n        value,\n        ...htmlProps\n    } = props;\n    const classes = classNames(\n        HTML_SELECT,\n        {\n            [DISABLED]: disabled,\n            [FILL]: fill,\n            [LARGE]: large,\n            [MINIMAL]: minimal,\n        },\n        className,\n    );\n\n    const iconTitle = \"Open dropdown\";\n    const endIcon =\n        iconName === \"double-caret-vertical\" ? (\n            <DoubleCaretVertical title={iconTitle} {...iconProps} />\n        ) : (\n            <CaretDown title={iconTitle} {...iconProps} />\n        );\n\n    const optionChildren = options.map(option => {\n        const optionProps: OptionProps = typeof option === \"object\" ? option : { value: option };\n        return <option {...optionProps} key={optionProps.value} children={optionProps.label || optionProps.value} />;\n    });\n\n    return (\n        <div className={classes}>\n            <select disabled={disabled} ref={ref} value={value} {...htmlProps} multiple={false}>\n                {optionChildren}\n                {children}\n            </select>\n            {endIcon}\n        </div>\n    );\n});\nHTMLSelect.displayName = `${DISPLAYNAME_PREFIX}.HTMLSelect`;\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,QAAQ,OAAO;AAElC,SAASC,SAAS,EAAEC,mBAAmB,QAA0C,oBAAoB;AAErG,SAASC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,QAAQ,sBAAsB;AAClF,SAASC,kBAAkB,QAA0B,oBAAoB;AAsDzE;AACA;AACA;;;;;AAKA,OAAO,MAAMC,UAAU,GAA8BT,UAAU,CAAC,CAACU,KAAK,EAAEC,GAAG,KAAI;EAC3E,MAAM;IACFC,SAAS;IACTC,QAAQ;IACRC,QAAQ;IACRC,IAAI;IACJC,QAAQ,GAAG,uBAAuB;IAClCC,SAAS;IACTC,KAAK;IACLC,OAAO;IACPC,OAAO,GAAG,EAAE;IACZC,KAAK;IACL,GAAGC;EAAS,CACf,GAAGZ,KAAK;EACT,MAAMa,OAAO,GAAGxB,UAAU,CACtBM,WAAW,EACX;IACI,CAACF,QAAQ,GAAGW,QAAQ;IACpB,CAACV,IAAI,GAAGW,IAAI;IACZ,CAACT,KAAK,GAAGY,KAAK;IACd,CAACX,OAAO,GAAGY;GACd,EACDP,SAAS,CACZ;EAED,MAAMY,SAAS,GAAG,eAAe;EACjC,MAAMC,OAAO,GACTT,QAAQ,KAAK,uBAAuB,GAChCU,IAAA,CAACxB,mBAAmB;IAACyB,KAAK,EAAEH,SAAS;IAAA,GAAMP;EAAS,EAAI,GAExDS,IAAA,CAACzB,SAAS;IAAC0B,KAAK,EAAEH,SAAS;IAAA,GAAMP;EAAS,EAC7C;EAEL,MAAMW,cAAc,GAAGR,OAAO,CAACS,GAAG,CAACC,MAAM,IAAG;IACxC,MAAMC,WAAW,GAAgB,OAAOD,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG;MAAET,KAAK,EAAES;IAAM,CAAE;IACxF,OAAOE,cAAA;MAAA,GAAYD,WAAW;MAAEE,GAAG,EAAEF,WAAW,CAACV,KAAK;MAAER,QAAQ,EAAEkB,WAAW,CAACG,KAAK,IAAIH,WAAW,CAACV;IAAK,EAAI;EAChH,CAAC,CAAC;EAEF,OACIc,KAAA;IAAKvB,SAAS,EAAEW,OAAO;IAAAV,QAAA,GACnBsB,KAAA;MAAQrB,QAAQ,EAAEA,QAAQ;MAAEH,GAAG,EAAEA,GAAG;MAAEU,KAAK,EAAEA,KAAK;MAAA,GAAMC,SAAS;MAAEc,QAAQ,EAAE,KAAK;MAAAvB,QAAA,GAC7Ee,cAAc,EACdf,QAAQ;IAAA,EACJ,EACRY,OAAO;EAAA,EACN;AAEd,CAAC,CAAC;AACFhB,UAAU,CAAC4B,WAAW,GAAG,GAAG7B,kBAAkB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}