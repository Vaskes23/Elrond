{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useEffect } from \"react\";\nimport * as Errors from \"../../common/errors\";\nimport { isFunction, isNodeEnv } from \"../../common/utils\";\nimport { useHotkeys } from \"../../hooks\";\n/**\n * Utility component which allows consumers to use the new `useHotkeys` hook inside\n * React component classes. The implementation simply passes through to the hook.\n */\nexport const HotkeysTarget = ({\n  children,\n  hotkeys,\n  options\n}) => {\n  const {\n    handleKeyDown,\n    handleKeyUp\n  } = useHotkeys(hotkeys, options);\n  // run props validation\n  useEffect(() => {\n    if (!isNodeEnv(\"production\")) {\n      if (typeof children !== \"function\" && hotkeys.some(h => !h.global)) {\n        console.error(Errors.HOTKEYS_TARGET_CHILDREN_LOCAL_HOTKEYS);\n      }\n    }\n  }, [hotkeys, children]);\n  if (isFunction(children)) {\n    return children({\n      handleKeyDown,\n      handleKeyUp\n    });\n  } else {\n    return children;\n  }\n};\n/** @deprecated Use `HotkeysTarget` instead */\nexport const HotkeysTarget2 = HotkeysTarget;","map":{"version":3,"names":["useEffect","Errors","isFunction","isNodeEnv","useHotkeys","HotkeysTarget","children","hotkeys","options","handleKeyDown","handleKeyUp","some","h","global","console","error","HOTKEYS_TARGET_CHILDREN_LOCAL_HOTKEYS","HotkeysTarget2"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/hotkeys/hotkeysTarget.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\";\n\nimport * as Errors from \"../../common/errors\";\nimport { isFunction, isNodeEnv } from \"../../common/utils\";\nimport { type HotkeyConfig, useHotkeys, type UseHotkeysOptions } from \"../../hooks\";\n\n/** Identical to the return type of `useHotkeys` hook. */\nexport interface HotkeysTargetRenderProps {\n    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;\n}\n\n/** @deprecated Use `HotkeysTargetRenderProps` instead */\nexport type HotkeysTarget2RenderProps = HotkeysTargetRenderProps;\n\nexport interface HotkeysTargetProps {\n    /**\n     * Render prop which receives the same callback handlers generated by the `useHotkeys` hook.\n     * If your hotkey definitions are all global, you may supply an element instead.\n     */\n    children: React.JSX.Element | ((props: HotkeysTargetRenderProps) => React.JSX.Element);\n\n    /** Hotkey definitions. */\n    hotkeys: readonly HotkeyConfig[];\n\n    /** Hook customization options. */\n    options?: UseHotkeysOptions;\n}\n\n/** @deprecated Use `HotkeysTargetProps` instead */\nexport type HotkeysTarget2Props = HotkeysTargetProps;\n\n/**\n * Utility component which allows consumers to use the new `useHotkeys` hook inside\n * React component classes. The implementation simply passes through to the hook.\n */\nexport const HotkeysTarget = ({ children, hotkeys, options }: HotkeysTargetProps): React.JSX.Element => {\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeys, options);\n\n    // run props validation\n    useEffect(() => {\n        if (!isNodeEnv(\"production\")) {\n            if (typeof children !== \"function\" && hotkeys.some(h => !h.global)) {\n                console.error(Errors.HOTKEYS_TARGET_CHILDREN_LOCAL_HOTKEYS);\n            }\n        }\n    }, [hotkeys, children]);\n\n    if (isFunction(children)) {\n        return children({ handleKeyDown, handleKeyUp });\n    } else {\n        return children;\n    }\n};\n\n/** @deprecated Use `HotkeysTarget` instead */\nexport const HotkeysTarget2 = HotkeysTarget;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAO,KAAKC,MAAM,MAAM,qBAAqB;AAC7C,SAASC,UAAU,EAAEC,SAAS,QAAQ,oBAAoB;AAC1D,SAA4BC,UAAU,QAAgC,aAAa;AA4BnF;;;;AAIA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,OAAO;EAAEC;AAAO,CAAsB,KAAuB;EACnG,MAAM;IAAEC,aAAa;IAAEC;EAAW,CAAE,GAAGN,UAAU,CAACG,OAAO,EAAEC,OAAO,CAAC;EAEnE;EACAR,SAAS,CAAC,MAAK;IACX,IAAI,CAACG,SAAS,CAAC,YAAY,CAAC,EAAE;MAC1B,IAAI,OAAOG,QAAQ,KAAK,UAAU,IAAIC,OAAO,CAACI,IAAI,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,MAAM,CAAC,EAAE;QAChEC,OAAO,CAACC,KAAK,CAACd,MAAM,CAACe,qCAAqC,CAAC;MAC/D;IACJ;EACJ,CAAC,EAAE,CAACT,OAAO,EAAED,QAAQ,CAAC,CAAC;EAEvB,IAAIJ,UAAU,CAACI,QAAQ,CAAC,EAAE;IACtB,OAAOA,QAAQ,CAAC;MAAEG,aAAa;MAAEC;IAAW,CAAE,CAAC;EACnD,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ,CAAC;AAED;AACA,OAAO,MAAMW,cAAc,GAAGZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}