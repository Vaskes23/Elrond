{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Returns whether bundler-injected variable `NODE_ENV` equals `env`. */\nfunction isNodeEnv(env) {\n  return typeof NODE_ENV !== \"undefined\" && NODE_ENV === env;\n}\n/**\n * Wraps an async task with a performance timer. Only logs to console in development.\n */\nexport async function wrapWithTimer(taskDescription, task) {\n  const shouldMeasure = isNodeEnv(\"development\") && typeof performance !== \"undefined\";\n  let start;\n  if (shouldMeasure) {\n    start = performance.now();\n    console.info(`Started '${taskDescription}'...`);\n  }\n  await task();\n  if (shouldMeasure) {\n    const time = Math.round(performance.now() - start);\n    console.info(`Finished '${taskDescription}' in ${time}ms`);\n  }\n  return;\n}","map":{"version":3,"names":["isNodeEnv","env","NODE_ENV","wrapWithTimer","taskDescription","task","shouldMeasure","performance","start","now","console","info","time","Math","round"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/icons/src/loaderUtils.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// injected by webpack.DefinePlugin\ndeclare let NODE_ENV: string;\n\n/** Returns whether bundler-injected variable `NODE_ENV` equals `env`. */\nfunction isNodeEnv(env: string) {\n    return typeof NODE_ENV !== \"undefined\" && NODE_ENV === env;\n}\n\n/**\n * Wraps an async task with a performance timer. Only logs to console in development.\n */\nexport async function wrapWithTimer(taskDescription: string, task: () => Promise<void>) {\n    const shouldMeasure = isNodeEnv(\"development\") && typeof performance !== \"undefined\";\n    let start: number;\n\n    if (shouldMeasure) {\n        start = performance.now();\n        console.info(`Started '${taskDescription}'...`);\n    }\n\n    await task();\n\n    if (shouldMeasure) {\n        const time = Math.round(performance.now() - start!);\n        console.info(`Finished '${taskDescription}' in ${time}ms`);\n    }\n    return;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA;AACA,SAASA,SAASA,CAACC,GAAW;EAC1B,OAAO,OAAOC,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAKD,GAAG;AAC9D;AAEA;;;AAGA,OAAO,eAAeE,aAAaA,CAACC,eAAuB,EAAEC,IAAyB;EAClF,MAAMC,aAAa,GAAGN,SAAS,CAAC,aAAa,CAAC,IAAI,OAAOO,WAAW,KAAK,WAAW;EACpF,IAAIC,KAAa;EAEjB,IAAIF,aAAa,EAAE;IACfE,KAAK,GAAGD,WAAW,CAACE,GAAG,EAAE;IACzBC,OAAO,CAACC,IAAI,CAAC,YAAYP,eAAe,MAAM,CAAC;EACnD;EAEA,MAAMC,IAAI,EAAE;EAEZ,IAAIC,aAAa,EAAE;IACf,MAAMM,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACP,WAAW,CAACE,GAAG,EAAE,GAAGD,KAAM,CAAC;IACnDE,OAAO,CAACC,IAAI,CAAC,aAAaP,eAAe,QAAQQ,IAAI,IAAI,CAAC;EAC9D;EACA;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}