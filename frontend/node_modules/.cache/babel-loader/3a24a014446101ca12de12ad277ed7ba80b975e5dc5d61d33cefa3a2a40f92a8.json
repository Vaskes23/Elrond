{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nconst NS = Classes.getClassNamespace();\n// this is a simple component, unit tests would be mostly tautological\n/* istanbul ignore next */\n/**\n * File input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/file-input\n */\nexport const FileInput = props => {\n  const {\n    buttonText,\n    className,\n    disabled,\n    fill,\n    hasSelection = false,\n    inputProps = {},\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    large = false,\n    onInputChange,\n    size = \"medium\",\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    small = false,\n    text = \"Choose file...\",\n    ...htmlProps\n  } = props;\n  const rootClasses = classNames(className, Classes.FILE_INPUT, {\n    [Classes.DISABLED]: disabled,\n    [Classes.FILL]: fill,\n    [Classes.FILE_INPUT_HAS_SELECTION]: hasSelection\n  }, Classes.sizeClass(size, {\n    large,\n    small\n  }));\n  const uploadProps = {\n    [`${NS}-button-text`]: buttonText,\n    className: classNames(Classes.FILE_UPLOAD_INPUT, {\n      [Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT]: !!buttonText\n    })\n  };\n  const handleInputChange = e => {\n    var _a;\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(e);\n    (_a = inputProps === null || inputProps === void 0 ? void 0 : inputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(inputProps, e);\n  };\n  return _jsxs(\"label\", {\n    ...htmlProps,\n    className: rootClasses,\n    children: [_jsx(\"input\", {\n      ...inputProps,\n      onChange: handleInputChange,\n      type: \"file\",\n      disabled: disabled\n    }), _jsx(\"span\", {\n      ...uploadProps,\n      children: text\n    })]\n  });\n};\nFileInput.displayName = `${DISPLAYNAME_PREFIX}.FileInput`;","map":{"version":3,"names":["classNames","Classes","DISPLAYNAME_PREFIX","NS","getClassNamespace","FileInput","props","buttonText","className","disabled","fill","hasSelection","inputProps","large","onInputChange","size","small","text","htmlProps","rootClasses","FILE_INPUT","DISABLED","FILL","FILE_INPUT_HAS_SELECTION","sizeClass","uploadProps","FILE_UPLOAD_INPUT","FILE_UPLOAD_INPUT_CUSTOM_TEXT","handleInputChange","e","_a","onChange","call","_jsxs","children","_jsx","type","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/forms/fileInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\n\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type Props } from \"../../common/props\";\nimport type { Size } from \"../../common/size\";\n\nexport interface FileInputProps extends React.LabelHTMLAttributes<HTMLLabelElement>, Props {\n    /**\n     * Whether the file input is non-interactive.\n     * Setting this to `true` will automatically disable the child input too.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the file input should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the user has made a selection in the input. This will affect the component's\n     * text styling. Make sure to set a non-empty value for the text prop as well.\n     *\n     * @default false\n     */\n    hasSelection?: boolean;\n\n    /**\n     * The props to pass to the child input.\n     * `disabled` will be ignored in favor of the top-level prop.\n     * `type` will be ignored, because the input _must_ be `type=\"file\"`.\n     * Pass `onChange` here to be notified when the user selects a file.\n     */\n    inputProps?: React.HTMLProps<HTMLInputElement>;\n\n    /**\n     * Whether the file input should appear with large styling.\n     *\n     * @deprecated use `size=\"large\"` instead.\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Callback invoked on `<input>` `change` events.\n     *\n     * This callback is offered as a convenience; it is equivalent to `inputProps.onChange`.\n     *\n     * __Note:__ The top-level `onChange` prop is passed to the `<label>` element rather than the `<input>`,\n     * which may not be what you expect.\n     */\n    onInputChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * Whether the file input should appear with small styling.\n     *\n     * @deprecated use `size=\"small\"` instead.\n     * @default false\n     */\n    small?: boolean;\n\n    /**\n     * The size of the file input.\n     */\n    size?: Size;\n\n    /**\n     * The text to display inside the input.\n     *\n     * @default \"Choose file...\"\n     */\n    text?: React.ReactNode;\n\n    /**\n     * The button text to display on the right side of the input.\n     *\n     * @default \"Browse\"\n     */\n    buttonText?: string;\n}\n\nconst NS = Classes.getClassNamespace();\n\n// this is a simple component, unit tests would be mostly tautological\n/* istanbul ignore next */\n/**\n * File input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/file-input\n */\nexport const FileInput = (props: FileInputProps) => {\n    const {\n        buttonText,\n        className,\n        disabled,\n        fill,\n        hasSelection = false,\n        inputProps = {},\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        large = false,\n        onInputChange,\n        size = \"medium\",\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        small = false,\n        text = \"Choose file...\",\n        ...htmlProps\n    } = props;\n\n    const rootClasses = classNames(\n        className,\n        Classes.FILE_INPUT,\n        {\n            [Classes.DISABLED]: disabled,\n            [Classes.FILL]: fill,\n            [Classes.FILE_INPUT_HAS_SELECTION]: hasSelection,\n        },\n        Classes.sizeClass(size, { large, small }),\n    );\n\n    const uploadProps = {\n        [`${NS}-button-text`]: buttonText,\n        className: classNames(Classes.FILE_UPLOAD_INPUT, {\n            [Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT]: !!buttonText,\n        }),\n    } satisfies React.HTMLProps<HTMLElement>;\n\n    const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        onInputChange?.(e);\n        inputProps?.onChange?.(e);\n    };\n\n    return (\n        <label {...htmlProps} className={rootClasses}>\n            <input {...inputProps} onChange={handleInputChange} type=\"file\" disabled={disabled} />\n            <span {...uploadProps}>{text}</span>\n        </label>\n    );\n};\n\nFileInput.displayName = `${DISPLAYNAME_PREFIX}.FileInput`;\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AAEnC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAoB,oBAAoB;AA6EnE,MAAMC,EAAE,GAAGF,OAAO,CAACG,iBAAiB,EAAE;AAEtC;AACA;AACA;;;;;AAKA,OAAO,MAAMC,SAAS,GAAIC,KAAqB,IAAI;EAC/C,MAAM;IACFC,UAAU;IACVC,SAAS;IACTC,QAAQ;IACRC,IAAI;IACJC,YAAY,GAAG,KAAK;IACpBC,UAAU,GAAG,EAAE;IACf;IACAC,KAAK,GAAG,KAAK;IACbC,aAAa;IACbC,IAAI,GAAG,QAAQ;IACf;IACAC,KAAK,GAAG,KAAK;IACbC,IAAI,GAAG,gBAAgB;IACvB,GAAGC;EAAS,CACf,GAAGZ,KAAK;EAET,MAAMa,WAAW,GAAGnB,UAAU,CAC1BQ,SAAS,EACTP,OAAO,CAACmB,UAAU,EAClB;IACI,CAACnB,OAAO,CAACoB,QAAQ,GAAGZ,QAAQ;IAC5B,CAACR,OAAO,CAACqB,IAAI,GAAGZ,IAAI;IACpB,CAACT,OAAO,CAACsB,wBAAwB,GAAGZ;GACvC,EACDV,OAAO,CAACuB,SAAS,CAACT,IAAI,EAAE;IAAEF,KAAK;IAAEG;EAAK,CAAE,CAAC,CAC5C;EAED,MAAMS,WAAW,GAAG;IAChB,CAAC,GAAGtB,EAAE,cAAc,GAAGI,UAAU;IACjCC,SAAS,EAAER,UAAU,CAACC,OAAO,CAACyB,iBAAiB,EAAE;MAC7C,CAACzB,OAAO,CAAC0B,6BAA6B,GAAG,CAAC,CAACpB;KAC9C;GACmC;EAExC,MAAMqB,iBAAiB,GAAIC,CAAoC,IAAI;;IAC/Df,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGe,CAAC,CAAC;IAClB,CAAAC,EAAA,GAAAlB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEmB,QAAQ,cAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAApB,UAAA,EAAGiB,CAAC,CAAC;EAC7B,CAAC;EAED,OACII,KAAA;IAAA,GAAWf,SAAS;IAAEV,SAAS,EAAEW,WAAW;IAAAe,QAAA,GACxCC,IAAA;MAAA,GAAWvB,UAAU;MAAEmB,QAAQ,EAAEH,iBAAiB;MAAEQ,IAAI,EAAC,MAAM;MAAC3B,QAAQ,EAAEA;IAAQ,EAAI,EACtF0B,IAAA;MAAA,GAAUV,WAAW;MAAAS,QAAA,EAAGjB;IAAI,EAAQ;EAAA,EAChC;AAEhB,CAAC;AAEDZ,SAAS,CAACgC,WAAW,GAAG,GAAGnC,kBAAkB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}