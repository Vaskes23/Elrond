{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Button group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button-group\n */\nexport const ButtonGroup = forwardRef((props, ref) => {\n  const {\n    alignText,\n    className,\n    fill,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    minimal,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    outlined,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    large,\n    size = \"medium\",\n    variant = \"solid\",\n    vertical,\n    ...htmlProps\n  } = props;\n  const buttonGroupClasses = classNames(Classes.BUTTON_GROUP, {\n    [Classes.FILL]: fill,\n    [Classes.VERTICAL]: vertical\n  }, Classes.alignmentClass(alignText), Classes.sizeClass(size, {\n    large\n  }), Classes.variantClass(variant, {\n    minimal,\n    outlined\n  }), className);\n  return _jsx(\"div\", {\n    ...htmlProps,\n    ref: ref,\n    className: buttonGroupClasses,\n    children: props.children\n  });\n});\nButtonGroup.displayName = `${DISPLAYNAME_PREFIX}.ButtonGroup`;","map":{"version":3,"names":["classNames","forwardRef","Classes","DISPLAYNAME_PREFIX","ButtonGroup","props","ref","alignText","className","fill","minimal","outlined","large","size","variant","vertical","htmlProps","buttonGroupClasses","BUTTON_GROUP","FILL","VERTICAL","alignmentClass","sizeClass","variantClass","_jsx","children","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/button/buttonGroup.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\n\nimport { type Alignment, type ButtonVariant, Classes, type Size } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type HTMLDivProps, type Props } from \"../../common/props\";\n\nexport interface ButtonGroupProps extends Props, HTMLDivProps, React.RefAttributes<HTMLDivElement> {\n    /**\n     * Text alignment within button. By default, icons and text will be centered\n     * within the button. Passing `\"start\"` or `\"end\"` will align the button\n     * text to that side and push `icon` and `endIcon` to either edge. Passing\n     * `\"center\"` will center the text and icons together.\n     */\n    alignText?: Alignment;\n\n    /** Buttons in this group. */\n    children: React.ReactNode;\n\n    /**\n     * Whether the button group should take up the full width of its container.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the child buttons should appear with minimal styling.\n     *\n     * @deprecated use `variant=\"minimal\"` instead\n     * @default false\n     */\n    minimal?: boolean;\n\n    /**\n     * Whether the child buttons should use outlined styles.\n     *\n     * @deprecated use `variant=\"outlined\"` instead\n     * @default false\n     */\n    outlined?: boolean;\n\n    /**\n     * Visual style variant for the child buttons.\n     *\n     * @default \"solid\"\n     */\n    variant?: ButtonVariant;\n\n    /**\n     * Whether the child buttons should appear with large styling.\n     *\n     * @deprecated use `size=\"large\"` instead.\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The size of the child buttons.\n     *\n     * @default \"medium\"\n     */\n    size?: Size;\n\n    /**\n     * Whether the button group should appear with vertical styling.\n     *\n     * @default false\n     */\n    vertical?: boolean;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Button group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button-group\n */\nexport const ButtonGroup: React.FC<ButtonGroupProps> = forwardRef<HTMLDivElement, ButtonGroupProps>((props, ref) => {\n    const {\n        alignText,\n        className,\n        fill,\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        minimal,\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        outlined,\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        large,\n        size = \"medium\",\n        variant = \"solid\",\n        vertical,\n        ...htmlProps\n    } = props;\n\n    const buttonGroupClasses = classNames(\n        Classes.BUTTON_GROUP,\n        {\n            [Classes.FILL]: fill,\n            [Classes.VERTICAL]: vertical,\n        },\n        Classes.alignmentClass(alignText),\n        Classes.sizeClass(size, { large }),\n        Classes.variantClass(variant, { minimal, outlined }),\n        className,\n    );\n    return (\n        <div {...htmlProps} ref={ref} className={buttonGroupClasses}>\n            {props.children}\n        </div>\n    );\n});\nButtonGroup.displayName = `${DISPLAYNAME_PREFIX}.ButtonGroup`;\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,QAAQ,OAAO;AAElC,SAA6CC,OAAO,QAAmB,cAAc;AACrF,SAASC,kBAAkB,QAAuC,oBAAoB;AAmEtF;AACA;AACA;;;;;AAKA,OAAO,MAAMC,WAAW,GAA+BH,UAAU,CAAmC,CAACI,KAAK,EAAEC,GAAG,KAAI;EAC/G,MAAM;IACFC,SAAS;IACTC,SAAS;IACTC,IAAI;IACJ;IACAC,OAAO;IACP;IACAC,QAAQ;IACR;IACAC,KAAK;IACLC,IAAI,GAAG,QAAQ;IACfC,OAAO,GAAG,OAAO;IACjBC,QAAQ;IACR,GAAGC;EAAS,CACf,GAAGX,KAAK;EAET,MAAMY,kBAAkB,GAAGjB,UAAU,CACjCE,OAAO,CAACgB,YAAY,EACpB;IACI,CAAChB,OAAO,CAACiB,IAAI,GAAGV,IAAI;IACpB,CAACP,OAAO,CAACkB,QAAQ,GAAGL;GACvB,EACDb,OAAO,CAACmB,cAAc,CAACd,SAAS,CAAC,EACjCL,OAAO,CAACoB,SAAS,CAACT,IAAI,EAAE;IAAED;EAAK,CAAE,CAAC,EAClCV,OAAO,CAACqB,YAAY,CAACT,OAAO,EAAE;IAAEJ,OAAO;IAAEC;EAAQ,CAAE,CAAC,EACpDH,SAAS,CACZ;EACD,OACIgB,IAAA;IAAA,GAASR,SAAS;IAAEV,GAAG,EAAEA,GAAG;IAAEE,SAAS,EAAES,kBAAkB;IAAAQ,QAAA,EACtDpB,KAAK,CAACoB;EAAQ,EACb;AAEd,CAAC,CAAC;AACFrB,WAAW,CAACsB,WAAW,GAAG,GAAGvB,kBAAkB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}