{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useMemo } from \"react\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { H1, H2, H3, H4, H5, H6 } from \"../html/html\";\nimport { Icon } from \"../icon/icon\";\nimport { Text } from \"../text/text\";\n/**\n * EntityTitle component.\n *\n * @see https://blueprintjs.com/docs/#core/components/entity-title\n */\nexport const EntityTitle = forwardRef((props, ref) => {\n  const {\n    className,\n    ellipsize = false,\n    fill = false,\n    heading = Text,\n    icon,\n    loading = false,\n    subtitle,\n    tags,\n    title,\n    titleURL\n  } = props;\n  const titleElement = useMemo(() => {\n    const maybeTitleWithURL = titleURL != null ? _jsx(\"a\", {\n      target: \"_blank\",\n      href: titleURL,\n      rel: \"noreferrer\",\n      children: title\n    }) : title;\n    return createElement(heading, {\n      className: classNames(Classes.ENTITY_TITLE_TITLE, {\n        [Classes.SKELETON]: loading,\n        [Classes.TEXT_OVERFLOW_ELLIPSIS]: heading !== Text && ellipsize\n      }),\n      ellipsize: heading === Text ? ellipsize : undefined\n    }, maybeTitleWithURL);\n  }, [titleURL, title, heading, loading, ellipsize]);\n  const maybeSubtitle = useMemo(() => {\n    if (subtitle == null) {\n      return null;\n    }\n    return _jsx(Text, {\n      className: classNames(Classes.TEXT_MUTED, Classes.ENTITY_TITLE_SUBTITLE, {\n        [Classes.SKELETON]: loading\n      }),\n      ellipsize: ellipsize,\n      children: subtitle\n    });\n  }, [ellipsize, loading, subtitle]);\n  return _jsxs(\"div\", {\n    className: classNames(className, Classes.ENTITY_TITLE, getClassNameFromHeading(heading), {\n      [Classes.ENTITY_TITLE_ELLIPSIZE]: ellipsize,\n      [Classes.FILL]: fill\n    }),\n    ref: ref,\n    children: [icon != null && _jsx(\"div\", {\n      className: classNames(Classes.ENTITY_TITLE_ICON_CONTAINER, {\n        [Classes.ENTITY_TITLE_HAS_SUBTITLE]: maybeSubtitle != null\n      }),\n      children: _jsx(Icon, {\n        \"aria-hidden\": true,\n        className: classNames(Classes.TEXT_MUTED, {\n          [Classes.SKELETON]: loading\n        }),\n        icon: loading ? IconNames.SQUARE : icon,\n        tabIndex: -1\n      })\n    }), _jsxs(\"div\", {\n      className: Classes.ENTITY_TITLE_TEXT,\n      children: [_jsxs(\"div\", {\n        className: classNames(Classes.ENTITY_TITLE_TITLE_AND_TAGS, {\n          [Classes.SKELETON]: loading\n        }),\n        children: [titleElement, tags != null && _jsx(\"div\", {\n          className: Classes.ENTITY_TITLE_TAGS_CONTAINER,\n          children: tags\n        })]\n      }), maybeSubtitle]\n    })]\n  });\n});\nEntityTitle.displayName = `${DISPLAYNAME_PREFIX}.EntityTitle`;\n/**\n * Construct header class name from H{*}. Returns `undefined` if `heading` is not a Blueprint heading.\n */\nfunction getClassNameFromHeading(heading) {\n  const headerIndex = [H1, H2, H3, H4, H5, H6].findIndex(header => header === heading);\n  if (headerIndex < 0) {\n    return undefined;\n  }\n  return [Classes.getClassNamespace(), \"entity-title-heading\", `h${headerIndex + 1}`].join(\"-\");\n}","map":{"version":3,"names":["classNames","createElement","forwardRef","useMemo","IconNames","Classes","DISPLAYNAME_PREFIX","H1","H2","H3","H4","H5","H6","Icon","Text","EntityTitle","props","ref","className","ellipsize","fill","heading","icon","loading","subtitle","tags","title","titleURL","titleElement","maybeTitleWithURL","_jsx","target","href","rel","children","ENTITY_TITLE_TITLE","SKELETON","TEXT_OVERFLOW_ELLIPSIS","undefined","maybeSubtitle","TEXT_MUTED","ENTITY_TITLE_SUBTITLE","_jsxs","ENTITY_TITLE","getClassNameFromHeading","ENTITY_TITLE_ELLIPSIZE","FILL","ENTITY_TITLE_ICON_CONTAINER","ENTITY_TITLE_HAS_SUBTITLE","SQUARE","tabIndex","ENTITY_TITLE_TEXT","ENTITY_TITLE_TITLE_AND_TAGS","ENTITY_TITLE_TAGS_CONTAINER","displayName","headerIndex","findIndex","header","getClassNamespace","join"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/entity-title/entityTitle.tsx"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useMemo } from \"react\";\n\nimport { type IconName, IconNames } from \"@blueprintjs/icons\";\n\nimport { Classes, DISPLAYNAME_PREFIX, type MaybeElement, type Props } from \"../../common\";\nimport { H1, H2, H3, H4, H5, H6 } from \"../html/html\";\nimport { Icon } from \"../icon/icon\";\nimport { Text, type TextProps } from \"../text/text\";\n\nexport interface EntityTitleProps extends Props {\n    /**\n     * Whether the overflowing text content should be ellipsized.\n     *\n     * @default false\n     */\n    ellipsize?: boolean;\n\n    /** Whether the component should expand to fill its container. */\n    fill?: boolean;\n\n    /**\n     * React component to render the main title heading. This defaults to\n     * Blueprint's `<Text>` component, * which inherits font size from its\n     * containing element(s).\n     *\n     * To render larger, more prominent titles, Use Blueprint's heading\n     * components instead (e.g. `{ H1 } from \"@blueprintjs/core\"`).\n     *\n     * @default Text\n     */\n    heading?: React.FC<any>;\n\n    /**\n     * Name of a Blueprint UI icon (or an icon element) to render in the section's header.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether to render as loading state.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /** The content to render below the title. Defaults to render muted text. */\n    subtitle?: React.JSX.Element | string;\n\n    /** The primary title to render. */\n    title: React.JSX.Element | string;\n\n    /** If specified, the title will be wrapped in an anchor with this URL. */\n    titleURL?: string;\n\n    /**\n     * <Tag> components work best - if multiple, wrap in <React.Fragment>\n     */\n    tags?: React.ReactNode;\n}\n\n/**\n * EntityTitle component.\n *\n * @see https://blueprintjs.com/docs/#core/components/entity-title\n */\nexport const EntityTitle: React.FC<EntityTitleProps> = forwardRef<HTMLDivElement, EntityTitleProps>((props, ref) => {\n    const {\n        className,\n        ellipsize = false,\n        fill = false,\n        heading = Text,\n        icon,\n        loading = false,\n        subtitle,\n        tags,\n        title,\n        titleURL,\n    } = props;\n\n    const titleElement = useMemo(() => {\n        const maybeTitleWithURL =\n            titleURL != null ? (\n                <a target=\"_blank\" href={titleURL} rel=\"noreferrer\">\n                    {title}\n                </a>\n            ) : (\n                title\n            );\n\n        return createElement(\n            heading,\n            {\n                className: classNames(Classes.ENTITY_TITLE_TITLE, {\n                    [Classes.SKELETON]: loading,\n                    [Classes.TEXT_OVERFLOW_ELLIPSIS]: heading !== Text && ellipsize,\n                }),\n                ellipsize: heading === Text ? ellipsize : undefined,\n            },\n            maybeTitleWithURL,\n        );\n    }, [titleURL, title, heading, loading, ellipsize]);\n\n    const maybeSubtitle = useMemo(() => {\n        if (subtitle == null) {\n            return null;\n        }\n\n        return (\n            <Text\n                className={classNames(Classes.TEXT_MUTED, Classes.ENTITY_TITLE_SUBTITLE, {\n                    [Classes.SKELETON]: loading,\n                })}\n                ellipsize={ellipsize}\n            >\n                {subtitle}\n            </Text>\n        );\n    }, [ellipsize, loading, subtitle]);\n\n    return (\n        <div\n            className={classNames(className, Classes.ENTITY_TITLE, getClassNameFromHeading(heading), {\n                [Classes.ENTITY_TITLE_ELLIPSIZE]: ellipsize,\n                [Classes.FILL]: fill,\n            })}\n            ref={ref}\n        >\n            {icon != null && (\n                <div\n                    className={classNames(Classes.ENTITY_TITLE_ICON_CONTAINER, {\n                        [Classes.ENTITY_TITLE_HAS_SUBTITLE]: maybeSubtitle != null,\n                    })}\n                >\n                    <Icon\n                        aria-hidden={true}\n                        className={classNames(Classes.TEXT_MUTED, { [Classes.SKELETON]: loading })}\n                        icon={loading ? IconNames.SQUARE : icon}\n                        tabIndex={-1}\n                    />\n                </div>\n            )}\n            <div className={Classes.ENTITY_TITLE_TEXT}>\n                <div\n                    className={classNames(Classes.ENTITY_TITLE_TITLE_AND_TAGS, {\n                        [Classes.SKELETON]: loading,\n                    })}\n                >\n                    {titleElement}\n                    {tags != null && <div className={Classes.ENTITY_TITLE_TAGS_CONTAINER}>{tags}</div>}\n                </div>\n                {maybeSubtitle}\n            </div>\n        </div>\n    );\n});\nEntityTitle.displayName = `${DISPLAYNAME_PREFIX}.EntityTitle`;\n\n/**\n * Construct header class name from H{*}. Returns `undefined` if `heading` is not a Blueprint heading.\n */\nfunction getClassNameFromHeading(heading: React.FC<TextProps>) {\n    const headerIndex = [H1, H2, H3, H4, H5, H6].findIndex(header => header === heading);\n    if (headerIndex < 0) {\n        return undefined;\n    }\n    return [Classes.getClassNamespace(), \"entity-title-heading\", `h${headerIndex + 1}`].join(\"-\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}