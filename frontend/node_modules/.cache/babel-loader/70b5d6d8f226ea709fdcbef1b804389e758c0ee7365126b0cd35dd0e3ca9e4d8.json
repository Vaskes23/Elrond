{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { placements as PopperPlacements } from \"@popperjs/core\";\n// Popper placement utils\n// ======================\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\nexport function isVerticalPlacement(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\nexport function getOppositePlacement(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n    case \"left\":\n      return \"right\";\n    case \"bottom\":\n      return \"top\";\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement) {\n  const align = placement.split(\"-\")[1];\n  switch (align) {\n    case \"start\":\n      return \"left\";\n    case \"end\":\n      return \"right\";\n    default:\n      return \"center\";\n  }\n}\n// Popper modifiers\n// ================\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(placement, arrowStyles) {\n  const basePlacement = getBasePlacement(placement);\n  if (arrowStyles === undefined) {\n    return isVerticalPlacement(basePlacement) ? `${getOppositePlacement(basePlacement)} ${getAlignment(basePlacement)}` : `${getAlignment(basePlacement)} ${getOppositePlacement(basePlacement)}`;\n  } else {\n    // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n    const arrowSizeShift = 30 / 2;\n    // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n    return isVerticalPlacement(basePlacement) ? `${getOppositePlacement(basePlacement)} ${parseInt(arrowStyles.top, 10) + arrowSizeShift}px` : `${parseInt(arrowStyles.left, 10) + arrowSizeShift}px ${getOppositePlacement(basePlacement)}`;\n  }\n}","map":{"version":3,"names":["placements","PopperPlacements","getBasePlacement","placement","split","isVerticalPlacement","side","indexOf","getOppositePlacement","getAlignment","align","getTransformOrigin","arrowStyles","basePlacement","undefined","arrowSizeShift","parseInt","top","left"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/popover/popperUtils.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BasePlacement, Placement } from \"@popperjs/core\";\n\nexport { placements as PopperPlacements } from \"@popperjs/core\";\n\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement: Placement) {\n    return placement.split(\"-\")[0] as BasePlacement;\n}\n\n/** Returns true if position is left or right. */\nexport function isVerticalPlacement(side: BasePlacement) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n\n/** Returns the opposite position. */\nexport function getOppositePlacement(side: BasePlacement) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement: Placement) {\n    const align = placement.split(\"-\")[1] as \"start\" | \"end\" | undefined;\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n\n// Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(placement: Placement, arrowStyles: { left: string; top: string } | undefined) {\n    const basePlacement = getBasePlacement(placement);\n    if (arrowStyles === undefined) {\n        return isVerticalPlacement(basePlacement)\n            ? `${getOppositePlacement(basePlacement)} ${getAlignment(basePlacement)}`\n            : `${getAlignment(basePlacement)} ${getOppositePlacement(basePlacement)}`;\n    } else {\n        // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n        const arrowSizeShift = 30 / 2;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPlacement(basePlacement)\n            ? `${getOppositePlacement(basePlacement)} ${parseInt(arrowStyles.top, 10) + arrowSizeShift}px`\n            : `${parseInt(arrowStyles.left, 10) + arrowSizeShift}px ${getOppositePlacement(basePlacement)}`;\n    }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAASA,UAAU,IAAIC,gBAAgB,QAAQ,gBAAgB;AAE/D;AACA;AAEA;AACA,OAAM,SAAUC,gBAAgBA,CAACC,SAAoB;EACjD,OAAOA,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAkB;AACnD;AAEA;AACA,OAAM,SAAUC,mBAAmBA,CAACC,IAAmB;EACnD,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAACC,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;AACjD;AAEA;AACA,OAAM,SAAUE,oBAAoBA,CAACF,IAAmB;EACpD,QAAQA,IAAI;IACR,KAAK,KAAK;MACN,OAAO,QAAQ;IACnB,KAAK,MAAM;MACP,OAAO,OAAO;IAClB,KAAK,QAAQ;MACT,OAAO,KAAK;IAChB;MACI,OAAO,MAAM;EACrB;AACJ;AAEA;AACA,OAAM,SAAUG,YAAYA,CAACN,SAAoB;EAC7C,MAAMO,KAAK,GAAGP,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAgC;EACpE,QAAQM,KAAK;IACT,KAAK,OAAO;MACR,OAAO,MAAM;IACjB,KAAK,KAAK;MACN,OAAO,OAAO;IAClB;MACI,OAAO,QAAQ;EACvB;AACJ;AAEA;AACA;AAEA;AACA,OAAM,SAAUC,kBAAkBA,CAACR,SAAoB,EAAES,WAAsD;EAC3G,MAAMC,aAAa,GAAGX,gBAAgB,CAACC,SAAS,CAAC;EACjD,IAAIS,WAAW,KAAKE,SAAS,EAAE;IAC3B,OAAOT,mBAAmB,CAACQ,aAAa,CAAC,GACnC,GAAGL,oBAAoB,CAACK,aAAa,CAAC,IAAIJ,YAAY,CAACI,aAAa,CAAC,EAAE,GACvE,GAAGJ,YAAY,CAACI,aAAa,CAAC,IAAIL,oBAAoB,CAACK,aAAa,CAAC,EAAE;EACjF,CAAC,MAAM;IACH;IACA,MAAME,cAAc,GAAG,EAAE,GAAG,CAAC;IAC7B;IACA;IACA,OAAOV,mBAAmB,CAACQ,aAAa,CAAC,GACnC,GAAGL,oBAAoB,CAACK,aAAa,CAAC,IAAIG,QAAQ,CAACJ,WAAW,CAACK,GAAG,EAAE,EAAE,CAAC,GAAGF,cAAc,IAAI,GAC5F,GAAGC,QAAQ,CAACJ,WAAW,CAACM,IAAI,EAAE,EAAE,CAAC,GAAGH,cAAc,MAAMP,oBAAoB,CAACK,aAAa,CAAC,EAAE;EACvG;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}