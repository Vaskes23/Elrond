{"ast":null,"code":"/* !\n * (c) Copyright 2023 Palantir Technologies Inc. All rights reserved.\n */\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * The amount of time (in milliseconds) which the input will wait after a compositionEnd event before\n * unlocking its state value for external updates via props. See `handleCompositionEnd` for more details.\n */\nexport const ASYNC_CONTROLLABLE_VALUE_COMPOSITION_END_DELAY = 10;\n/**\n * A hook to workaround the following [React bug](https://github.com/facebook/react/issues/3926).\n * This bug is reproduced when an input receives CompositionEvents\n * (for example, through IME composition) and has its value prop updated asychronously.\n * This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n */\nexport function useAsyncControllableValue(props) {\n  const {\n    onCompositionStart,\n    onCompositionEnd,\n    value: propValue,\n    onChange\n  } = props;\n  // The source of truth for the input value. This is not updated during IME composition.\n  // It may be updated by a parent component.\n  const [value, setValue] = useState(propValue);\n  // The latest input value, which updates during IME composition.\n  const [nextValue, setNextValue] = useState(propValue);\n  // Whether we are in the middle of a composition event.\n  const [isComposing, setIsComposing] = useState(false);\n  // Whether there is a pending update we are expecting from a parent component.\n  const [hasPendingUpdate, setHasPendingUpdate] = useState(false);\n  const cancelPendingCompositionEnd = useRef();\n  const handleCompositionStart = useCallback(event => {\n    var _a;\n    (_a = cancelPendingCompositionEnd.current) === null || _a === void 0 ? void 0 : _a.call(cancelPendingCompositionEnd);\n    setIsComposing(true);\n    onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(event);\n  }, [onCompositionStart]);\n  // creates a timeout which will set `isComposing` to false after a delay\n  // returns a function which will cancel the timeout if called before it fires\n  const createOnCancelPendingCompositionEnd = useCallback(() => {\n    const timeoutId = window.setTimeout(() => setIsComposing(false), ASYNC_CONTROLLABLE_VALUE_COMPOSITION_END_DELAY);\n    return () => window.clearTimeout(timeoutId);\n  }, []);\n  const handleCompositionEnd = useCallback(event => {\n    // In some non-latin languages, a keystroke can end a composition event and immediately afterwards start another.\n    // This can lead to unexpected characters showing up in the text input. In order to circumvent this problem, we\n    // use a timeout which creates a delay which merges the two composition events, creating a more natural and predictable UX.\n    // `this.state.nextValue` will become \"locked\" (it cannot be overwritten by the `value` prop) until a delay (10ms) has\n    // passed without a new composition event starting.\n    cancelPendingCompositionEnd.current = createOnCancelPendingCompositionEnd();\n    onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(event);\n  }, [createOnCancelPendingCompositionEnd, onCompositionEnd]);\n  const handleChange = useCallback(event => {\n    const {\n      value: targetValue\n    } = event.target;\n    setNextValue(targetValue);\n    onChange === null || onChange === void 0 ? void 0 : onChange(event);\n  }, [onChange]);\n  // don't derive anything from props if:\n  // - in uncontrolled mode, OR\n  // - currently composing, since we'll do that after composition ends\n  const shouldDeriveFromProps = !(isComposing || propValue === undefined);\n  if (shouldDeriveFromProps) {\n    const userTriggeredUpdate = nextValue !== value;\n    if (userTriggeredUpdate && propValue === nextValue) {\n      // parent has processed and accepted our update\n      setValue(propValue);\n      setHasPendingUpdate(false);\n    } else if (userTriggeredUpdate && propValue === value) {\n      // we have sent the update to our parent, but it has not been processed yet. just wait.\n      // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n      // causing the cursor to jump once the new value is accepted\n      if (!hasPendingUpdate) {\n        // make sure to setState only when necessary to avoid infinite loops\n        setHasPendingUpdate(true);\n      }\n    } else if (userTriggeredUpdate && propValue !== value) {\n      // accept controlled update overriding user action\n      setValue(propValue);\n      setNextValue(propValue);\n      setHasPendingUpdate(false);\n    } else if (!userTriggeredUpdate) {\n      // accept controlled update, could be confirming or denying user action\n      if (value !== propValue || hasPendingUpdate) {\n        // make sure to setState only when necessary to avoid infinite loops\n        setValue(propValue);\n        setNextValue(propValue);\n        setHasPendingUpdate(false);\n      }\n    }\n  }\n  return {\n    onChange: handleChange,\n    onCompositionEnd: handleCompositionEnd,\n    onCompositionStart: handleCompositionStart,\n    // render the pending value even if it is not confirmed by a parent's async controlled update\n    // so that the cursor does not jump to the end of input as reported in\n    // https://github.com/palantir/blueprint/issues/4298\n    value: isComposing || hasPendingUpdate ? nextValue : value\n  };\n}","map":{"version":3,"names":["useCallback","useRef","useState","ASYNC_CONTROLLABLE_VALUE_COMPOSITION_END_DELAY","useAsyncControllableValue","props","onCompositionStart","onCompositionEnd","value","propValue","onChange","setValue","nextValue","setNextValue","isComposing","setIsComposing","hasPendingUpdate","setHasPendingUpdate","cancelPendingCompositionEnd","handleCompositionStart","event","_a","current","call","createOnCancelPendingCompositionEnd","timeoutId","window","setTimeout","clearTimeout","handleCompositionEnd","handleChange","targetValue","target","shouldDeriveFromProps","undefined","userTriggeredUpdate"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/hooks/useAsyncControllableValue.ts"],"sourcesContent":["/* !\n * (c) Copyright 2023 Palantir Technologies Inc. All rights reserved.\n */\n\nimport { useCallback, useRef, useState } from \"react\";\n\ninterface UseAsyncControllableValueProps<E extends HTMLInputElement | HTMLTextAreaElement> {\n    value?: React.InputHTMLAttributes<E>[\"value\"];\n    onChange?: React.ChangeEventHandler<E>;\n    onCompositionStart?: React.CompositionEventHandler<E>;\n    onCompositionEnd?: React.CompositionEventHandler<E>;\n}\n\n/**\n * The amount of time (in milliseconds) which the input will wait after a compositionEnd event before\n * unlocking its state value for external updates via props. See `handleCompositionEnd` for more details.\n */\nexport const ASYNC_CONTROLLABLE_VALUE_COMPOSITION_END_DELAY = 10;\n\n/**\n * A hook to workaround the following [React bug](https://github.com/facebook/react/issues/3926).\n * This bug is reproduced when an input receives CompositionEvents\n * (for example, through IME composition) and has its value prop updated asychronously.\n * This might happen if a component chooses to do async validation of a value\n * returned by the input's `onChange` callback.\n */\nexport function useAsyncControllableValue<E extends HTMLInputElement | HTMLTextAreaElement>(\n    props: UseAsyncControllableValueProps<E>,\n) {\n    const { onCompositionStart, onCompositionEnd, value: propValue, onChange } = props;\n\n    // The source of truth for the input value. This is not updated during IME composition.\n    // It may be updated by a parent component.\n    const [value, setValue] = useState(propValue);\n\n    // The latest input value, which updates during IME composition.\n    const [nextValue, setNextValue] = useState(propValue);\n\n    // Whether we are in the middle of a composition event.\n    const [isComposing, setIsComposing] = useState(false);\n\n    // Whether there is a pending update we are expecting from a parent component.\n    const [hasPendingUpdate, setHasPendingUpdate] = useState(false);\n\n    const cancelPendingCompositionEnd = useRef<() => void>();\n\n    const handleCompositionStart: React.CompositionEventHandler<E> = useCallback(\n        event => {\n            cancelPendingCompositionEnd.current?.();\n            setIsComposing(true);\n            onCompositionStart?.(event);\n        },\n        [onCompositionStart],\n    );\n\n    // creates a timeout which will set `isComposing` to false after a delay\n    // returns a function which will cancel the timeout if called before it fires\n    const createOnCancelPendingCompositionEnd = useCallback(() => {\n        const timeoutId = window.setTimeout(\n            () => setIsComposing(false),\n            ASYNC_CONTROLLABLE_VALUE_COMPOSITION_END_DELAY,\n        );\n        return () => window.clearTimeout(timeoutId);\n    }, []);\n\n    const handleCompositionEnd: React.CompositionEventHandler<E> = useCallback(\n        event => {\n            // In some non-latin languages, a keystroke can end a composition event and immediately afterwards start another.\n            // This can lead to unexpected characters showing up in the text input. In order to circumvent this problem, we\n            // use a timeout which creates a delay which merges the two composition events, creating a more natural and predictable UX.\n            // `this.state.nextValue` will become \"locked\" (it cannot be overwritten by the `value` prop) until a delay (10ms) has\n            // passed without a new composition event starting.\n            cancelPendingCompositionEnd.current = createOnCancelPendingCompositionEnd();\n            onCompositionEnd?.(event);\n        },\n        [createOnCancelPendingCompositionEnd, onCompositionEnd],\n    );\n\n    const handleChange: React.ChangeEventHandler<E> = useCallback(\n        event => {\n            const { value: targetValue } = event.target;\n            setNextValue(targetValue);\n            onChange?.(event);\n        },\n        [onChange],\n    );\n\n    // don't derive anything from props if:\n    // - in uncontrolled mode, OR\n    // - currently composing, since we'll do that after composition ends\n    const shouldDeriveFromProps = !(isComposing || propValue === undefined);\n\n    if (shouldDeriveFromProps) {\n        const userTriggeredUpdate = nextValue !== value;\n\n        if (userTriggeredUpdate && propValue === nextValue) {\n            // parent has processed and accepted our update\n            setValue(propValue);\n            setHasPendingUpdate(false);\n        } else if (userTriggeredUpdate && propValue === value) {\n            // we have sent the update to our parent, but it has not been processed yet. just wait.\n            // DO NOT set nextValue here, since that will temporarily render a potentially stale controlled value,\n            // causing the cursor to jump once the new value is accepted\n            if (!hasPendingUpdate) {\n                // make sure to setState only when necessary to avoid infinite loops\n                setHasPendingUpdate(true);\n            }\n        } else if (userTriggeredUpdate && propValue !== value) {\n            // accept controlled update overriding user action\n            setValue(propValue);\n            setNextValue(propValue);\n            setHasPendingUpdate(false);\n        } else if (!userTriggeredUpdate) {\n            // accept controlled update, could be confirming or denying user action\n            if (value !== propValue || hasPendingUpdate) {\n                // make sure to setState only when necessary to avoid infinite loops\n                setValue(propValue);\n                setNextValue(propValue);\n                setHasPendingUpdate(false);\n            }\n        }\n    }\n\n    return {\n        onChange: handleChange,\n        onCompositionEnd: handleCompositionEnd,\n        onCompositionStart: handleCompositionStart,\n        // render the pending value even if it is not confirmed by a parent's async controlled update\n        // so that the cursor does not jump to the end of input as reported in\n        // https://github.com/palantir/blueprint/issues/4298\n        value: isComposing || hasPendingUpdate ? nextValue : value,\n    };\n}\n"],"mappings":"AAAA;;;AAIA,SAASA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AASrD;;;;AAIA,OAAO,MAAMC,8CAA8C,GAAG,EAAE;AAEhE;;;;;;;AAOA,OAAM,SAAUC,yBAAyBA,CACrCC,KAAwC;EAExC,MAAM;IAAEC,kBAAkB;IAAEC,gBAAgB;IAAEC,KAAK,EAAEC,SAAS;IAAEC;EAAQ,CAAE,GAAGL,KAAK;EAElF;EACA;EACA,MAAM,CAACG,KAAK,EAAEG,QAAQ,CAAC,GAAGT,QAAQ,CAACO,SAAS,CAAC;EAE7C;EACA,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAACO,SAAS,CAAC;EAErD;EACA,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAErD;EACA,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMgB,2BAA2B,GAAGjB,MAAM,EAAc;EAExD,MAAMkB,sBAAsB,GAAqCnB,WAAW,CACxEoB,KAAK,IAAG;;IACJ,CAAAC,EAAA,GAAAH,2BAA2B,CAACI,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAAL,2BAAA,CAAI;IACvCH,cAAc,CAAC,IAAI,CAAC;IACpBT,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAGc,KAAK,CAAC;EAC/B,CAAC,EACD,CAACd,kBAAkB,CAAC,CACvB;EAED;EACA;EACA,MAAMkB,mCAAmC,GAAGxB,WAAW,CAAC,MAAK;IACzD,MAAMyB,SAAS,GAAGC,MAAM,CAACC,UAAU,CAC/B,MAAMZ,cAAc,CAAC,KAAK,CAAC,EAC3BZ,8CAA8C,CACjD;IACD,OAAO,MAAMuB,MAAM,CAACE,YAAY,CAACH,SAAS,CAAC;EAC/C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,oBAAoB,GAAqC7B,WAAW,CACtEoB,KAAK,IAAG;IACJ;IACA;IACA;IACA;IACA;IACAF,2BAA2B,CAACI,OAAO,GAAGE,mCAAmC,EAAE;IAC3EjB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAGa,KAAK,CAAC;EAC7B,CAAC,EACD,CAACI,mCAAmC,EAAEjB,gBAAgB,CAAC,CAC1D;EAED,MAAMuB,YAAY,GAAgC9B,WAAW,CACzDoB,KAAK,IAAG;IACJ,MAAM;MAAEZ,KAAK,EAAEuB;IAAW,CAAE,GAAGX,KAAK,CAACY,MAAM;IAC3CnB,YAAY,CAACkB,WAAW,CAAC;IACzBrB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGU,KAAK,CAAC;EACrB,CAAC,EACD,CAACV,QAAQ,CAAC,CACb;EAED;EACA;EACA;EACA,MAAMuB,qBAAqB,GAAG,EAAEnB,WAAW,IAAIL,SAAS,KAAKyB,SAAS,CAAC;EAEvE,IAAID,qBAAqB,EAAE;IACvB,MAAME,mBAAmB,GAAGvB,SAAS,KAAKJ,KAAK;IAE/C,IAAI2B,mBAAmB,IAAI1B,SAAS,KAAKG,SAAS,EAAE;MAChD;MACAD,QAAQ,CAACF,SAAS,CAAC;MACnBQ,mBAAmB,CAAC,KAAK,CAAC;IAC9B,CAAC,MAAM,IAAIkB,mBAAmB,IAAI1B,SAAS,KAAKD,KAAK,EAAE;MACnD;MACA;MACA;MACA,IAAI,CAACQ,gBAAgB,EAAE;QACnB;QACAC,mBAAmB,CAAC,IAAI,CAAC;MAC7B;IACJ,CAAC,MAAM,IAAIkB,mBAAmB,IAAI1B,SAAS,KAAKD,KAAK,EAAE;MACnD;MACAG,QAAQ,CAACF,SAAS,CAAC;MACnBI,YAAY,CAACJ,SAAS,CAAC;MACvBQ,mBAAmB,CAAC,KAAK,CAAC;IAC9B,CAAC,MAAM,IAAI,CAACkB,mBAAmB,EAAE;MAC7B;MACA,IAAI3B,KAAK,KAAKC,SAAS,IAAIO,gBAAgB,EAAE;QACzC;QACAL,QAAQ,CAACF,SAAS,CAAC;QACnBI,YAAY,CAACJ,SAAS,CAAC;QACvBQ,mBAAmB,CAAC,KAAK,CAAC;MAC9B;IACJ;EACJ;EAEA,OAAO;IACHP,QAAQ,EAAEoB,YAAY;IACtBvB,gBAAgB,EAAEsB,oBAAoB;IACtCvB,kBAAkB,EAAEa,sBAAsB;IAC1C;IACA;IACA;IACAX,KAAK,EAAEM,WAAW,IAAIE,gBAAgB,GAAGJ,SAAS,GAAGJ;GACxD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}