{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useCallback, useMemo } from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\nexport const PanelView = ({\n  panel,\n  onClose,\n  onOpen,\n  previousPanel,\n  showHeader\n}) => {\n  const hasPreviousPanel = previousPanel !== undefined;\n  const handleClose = useCallback(() => {\n    // only remove this panel if it is not the only one.\n    if (hasPreviousPanel) {\n      onClose(panel);\n    }\n  }, [onClose, panel, hasPreviousPanel]);\n  const maybeBackButton = previousPanel === undefined ? null : _jsx(Button, {\n    \"aria-label\": \"Back\",\n    className: Classes.PANEL_STACK_HEADER_BACK,\n    icon: \"chevron-left\",\n    onClick: handleClose,\n    size: \"small\",\n    text: previousPanel.title,\n    title: previousPanel.htmlTitle,\n    variant: \"minimal\"\n  });\n  // `panel.renderPanel` is simply a function that returns a React.JSX.Element. It may be an FC which\n  // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n  // those hooks with their own lifecycle through a very simple wrapper component.\n  const PanelWrapper = useMemo(() => () =>\n  // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n  // instantiated with a type unrelated to our generic constraint `T` here. We know\n  // we're sending the right values here though, and it makes the consumer API for this\n  // component type safe, so it's ok to do this...\n  panel.renderPanel({\n    closePanel: handleClose,\n    openPanel: onOpen,\n    ...panel.props\n  }), [panel, handleClose, onOpen]);\n  return _jsxs(\"div\", {\n    className: Classes.PANEL_STACK_VIEW,\n    children: [showHeader && _jsxs(\"div\", {\n      className: Classes.PANEL_STACK_HEADER,\n      children: [_jsx(\"span\", {\n        children: maybeBackButton\n      }), _jsx(Text, {\n        className: Classes.HEADING,\n        ellipsize: true,\n        title: panel.htmlTitle,\n        children: panel.title\n      }), _jsx(\"span\", {})]\n    }), _jsx(PanelWrapper, {})]\n  });\n};\nPanelView.displayName = `${DISPLAYNAME_PREFIX}.PanelView`;","map":{"version":3,"names":["useCallback","useMemo","Classes","DISPLAYNAME_PREFIX","Button","Text","PanelView","panel","onClose","onOpen","previousPanel","showHeader","hasPreviousPanel","undefined","handleClose","maybeBackButton","_jsx","className","PANEL_STACK_HEADER_BACK","icon","onClick","size","text","title","htmlTitle","variant","PanelWrapper","renderPanel","closePanel","openPanel","props","_jsxs","PANEL_STACK_VIEW","children","PANEL_STACK_HEADER","HEADING","ellipsize","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/panel-stack/panelView.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useMemo } from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\n\nimport type { Panel, PanelProps } from \"./panelTypes\";\n\nexport interface PanelViewProps<T extends Panel<object>> {\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen: (addedPanel: T) => void;\n\n    /** The panel to be displayed. */\n    panel: T;\n\n    /** The previous panel in the stack, for rendering the \"back\" button. */\n    previousPanel?: T;\n\n    /** Whether to show the header with the \"back\" button. */\n    showHeader: boolean;\n}\n\ninterface PanelViewComponent {\n    <T extends Panel<object>>(props: PanelViewProps<T>): React.JSX.Element | null;\n    displayName: string;\n}\n\nexport const PanelView: PanelViewComponent = <T extends Panel<object>>({\n    panel,\n    onClose,\n    onOpen,\n    previousPanel,\n    showHeader,\n}: PanelViewProps<T>) => {\n    const hasPreviousPanel = previousPanel !== undefined;\n    const handleClose = useCallback(() => {\n        // only remove this panel if it is not the only one.\n        if (hasPreviousPanel) {\n            onClose(panel);\n        }\n    }, [onClose, panel, hasPreviousPanel]);\n\n    const maybeBackButton =\n        previousPanel === undefined ? null : (\n            <Button\n                aria-label=\"Back\"\n                className={Classes.PANEL_STACK_HEADER_BACK}\n                icon=\"chevron-left\"\n                onClick={handleClose}\n                size=\"small\"\n                text={previousPanel.title}\n                title={previousPanel.htmlTitle}\n                variant=\"minimal\"\n            />\n        );\n\n    // `panel.renderPanel` is simply a function that returns a React.JSX.Element. It may be an FC which\n    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n    // those hooks with their own lifecycle through a very simple wrapper component.\n    const PanelWrapper: React.FC = useMemo(\n        () => () =>\n            // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n            // instantiated with a type unrelated to our generic constraint `T` here. We know\n            // we're sending the right values here though, and it makes the consumer API for this\n            // component type safe, so it's ok to do this...\n            panel.renderPanel({\n                closePanel: handleClose,\n                openPanel: onOpen,\n                ...panel.props,\n            } as PanelProps<T>),\n        [panel, handleClose, onOpen],\n    );\n\n    return (\n        <div className={Classes.PANEL_STACK_VIEW}>\n            {showHeader && (\n                <div className={Classes.PANEL_STACK_HEADER}>\n                    {/* two <span> tags here ensure title is centered as long as possible, with `flex: 1` styling */}\n                    <span>{maybeBackButton}</span>\n                    <Text className={Classes.HEADING} ellipsize={true} title={panel.htmlTitle}>\n                        {panel.title}\n                    </Text>\n                    <span />\n                </div>\n            )}\n            <PanelWrapper />\n        </div>\n    );\n};\nPanelView.displayName = `${DISPLAYNAME_PREFIX}.PanelView`;\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAE5C,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,cAAc;AAC1D,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,IAAI,QAAQ,cAAc;AAgCnC,OAAO,MAAMC,SAAS,GAAuBA,CAA0B;EACnEC,KAAK;EACLC,OAAO;EACPC,MAAM;EACNC,aAAa;EACbC;AAAU,CACM,KAAI;EACpB,MAAMC,gBAAgB,GAAGF,aAAa,KAAKG,SAAS;EACpD,MAAMC,WAAW,GAAGd,WAAW,CAAC,MAAK;IACjC;IACA,IAAIY,gBAAgB,EAAE;MAClBJ,OAAO,CAACD,KAAK,CAAC;IAClB;EACJ,CAAC,EAAE,CAACC,OAAO,EAAED,KAAK,EAAEK,gBAAgB,CAAC,CAAC;EAEtC,MAAMG,eAAe,GACjBL,aAAa,KAAKG,SAAS,GAAG,IAAI,GAC9BG,IAAA,CAACZ,MAAM;IAAA,cACQ,MAAM;IACjBa,SAAS,EAAEf,OAAO,CAACgB,uBAAuB;IAC1CC,IAAI,EAAC,cAAc;IACnBC,OAAO,EAAEN,WAAW;IACpBO,IAAI,EAAC,OAAO;IACZC,IAAI,EAAEZ,aAAa,CAACa,KAAK;IACzBA,KAAK,EAAEb,aAAa,CAACc,SAAS;IAC9BC,OAAO,EAAC;EAAS,EAExB;EAEL;EACA;EACA;EACA,MAAMC,YAAY,GAAazB,OAAO,CAClC,MAAM;EACF;EACA;EACA;EACA;EACAM,KAAK,CAACoB,WAAW,CAAC;IACdC,UAAU,EAAEd,WAAW;IACvBe,SAAS,EAAEpB,MAAM;IACjB,GAAGF,KAAK,CAACuB;GACK,CAAC,EACvB,CAACvB,KAAK,EAAEO,WAAW,EAAEL,MAAM,CAAC,CAC/B;EAED,OACIsB,KAAA;IAAKd,SAAS,EAAEf,OAAO,CAAC8B,gBAAgB;IAAAC,QAAA,GACnCtB,UAAU,IACPoB,KAAA;MAAKd,SAAS,EAAEf,OAAO,CAACgC,kBAAkB;MAAAD,QAAA,GAEtCjB,IAAA;QAAAiB,QAAA,EAAOlB;MAAe,EAAQ,EAC9BC,IAAA,CAACX,IAAI;QAACY,SAAS,EAAEf,OAAO,CAACiC,OAAO;QAAEC,SAAS,EAAE,IAAI;QAAEb,KAAK,EAAEhB,KAAK,CAACiB,SAAS;QAAAS,QAAA,EACpE1B,KAAK,CAACgB;MAAK,EACT,EACPP,IAAA,YAAQ;IAAA,EAEf,EACDA,IAAA,CAACU,YAAY,KAAG;EAAA,EACd;AAEd,CAAC;AACDpB,SAAS,CAAC+B,WAAW,GAAG,GAAGlC,kBAAkB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}