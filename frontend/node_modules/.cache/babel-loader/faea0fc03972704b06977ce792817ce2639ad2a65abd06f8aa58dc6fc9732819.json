{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* istanbul ignore next */\n/**\n * A nifty little class that maintains event handlers to add a class to the container element\n * when entering \"mouse mode\" (on a `mousedown` event) and remove it when entering \"keyboard mode\"\n * (on a `tab` key `keydown` event).\n */\nexport class InteractionModeEngine {\n  constructor(container, className) {\n    this.container = container;\n    this.className = className;\n    this.isRunning = false;\n    this.handleKeyDown = e => {\n      if (e.key === \"Tab\") {\n        this.reset();\n        this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n      }\n    };\n    this.handleMouseDown = () => {\n      this.reset();\n      this.container.classList.add(this.className);\n      this.container.addEventListener(\"keydown\", this.handleKeyDown);\n    };\n  }\n  /** Returns whether the engine is currently running. */\n  isActive() {\n    return this.isRunning;\n  }\n  /** Enable behavior which applies the given className when in mouse mode. */\n  start() {\n    this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n    this.isRunning = true;\n  }\n  /** Disable interaction mode behavior and remove className from container. */\n  stop() {\n    this.reset();\n    this.isRunning = false;\n  }\n  reset() {\n    this.container.classList.remove(this.className);\n    this.container.removeEventListener(\"keydown\", this.handleKeyDown);\n    this.container.removeEventListener(\"mousedown\", this.handleMouseDown);\n  }\n}","map":{"version":3,"names":["InteractionModeEngine","constructor","container","className","isRunning","handleKeyDown","e","key","reset","addEventListener","handleMouseDown","classList","add","isActive","start","stop","remove","removeEventListener"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/common/interactionMode.ts"],"sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* istanbul ignore next */\n\n/**\n * A nifty little class that maintains event handlers to add a class to the container element\n * when entering \"mouse mode\" (on a `mousedown` event) and remove it when entering \"keyboard mode\"\n * (on a `tab` key `keydown` event).\n */\nexport class InteractionModeEngine {\n    private isRunning = false;\n\n    constructor(\n        private container: HTMLElement,\n        private className: string,\n    ) {}\n\n    /** Returns whether the engine is currently running. */\n    public isActive() {\n        return this.isRunning;\n    }\n\n    /** Enable behavior which applies the given className when in mouse mode. */\n    public start() {\n        this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n        this.isRunning = true;\n    }\n\n    /** Disable interaction mode behavior and remove className from container. */\n    public stop() {\n        this.reset();\n        this.isRunning = false;\n    }\n\n    private reset() {\n        this.container.classList.remove(this.className);\n        this.container.removeEventListener(\"keydown\", this.handleKeyDown);\n        this.container.removeEventListener(\"mousedown\", this.handleMouseDown);\n    }\n\n    private handleKeyDown = (e: KeyboardEvent) => {\n        if (e.key === \"Tab\") {\n            this.reset();\n            this.container.addEventListener(\"mousedown\", this.handleMouseDown);\n        }\n    };\n\n    private handleMouseDown = () => {\n        this.reset();\n        this.container.classList.add(this.className);\n        this.container.addEventListener(\"keydown\", this.handleKeyDown);\n    };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;AAKA,OAAM,MAAOA,qBAAqB;EAG9BC,YACYC,SAAsB,EACtBC,SAAiB;IADjB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,SAAS,GAATA,SAAS;IAJb,KAAAC,SAAS,GAAG,KAAK;IA8BjB,KAAAC,aAAa,GAAIC,CAAgB,IAAI;MACzC,IAAIA,CAAC,CAACC,GAAG,KAAK,KAAK,EAAE;QACjB,IAAI,CAACC,KAAK,EAAE;QACZ,IAAI,CAACN,SAAS,CAACO,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;MACtE;IACJ,CAAC;IAEO,KAAAA,eAAe,GAAG,MAAK;MAC3B,IAAI,CAACF,KAAK,EAAE;MACZ,IAAI,CAACN,SAAS,CAACS,SAAS,CAACC,GAAG,CAAC,IAAI,CAACT,SAAS,CAAC;MAC5C,IAAI,CAACD,SAAS,CAACO,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACJ,aAAa,CAAC;IAClE,CAAC;EApCE;EAEH;EACOQ,QAAQA,CAAA;IACX,OAAO,IAAI,CAACT,SAAS;EACzB;EAEA;EACOU,KAAKA,CAAA;IACR,IAAI,CAACZ,SAAS,CAACO,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;IAClE,IAAI,CAACN,SAAS,GAAG,IAAI;EACzB;EAEA;EACOW,IAAIA,CAAA;IACP,IAAI,CAACP,KAAK,EAAE;IACZ,IAAI,CAACJ,SAAS,GAAG,KAAK;EAC1B;EAEQI,KAAKA,CAAA;IACT,IAAI,CAACN,SAAS,CAACS,SAAS,CAACK,MAAM,CAAC,IAAI,CAACb,SAAS,CAAC;IAC/C,IAAI,CAACD,SAAS,CAACe,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACZ,aAAa,CAAC;IACjE,IAAI,CAACH,SAAS,CAACe,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACP,eAAe,CAAC;EACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}