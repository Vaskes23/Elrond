{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\nimport { Alignment, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Card } from \"../card/card\";\nimport { Checkbox, Radio, Switch } from \"../forms/controls\";\nimport { useCheckedControl } from \"./useCheckedControl\";\n/**\n * ControlCard component, used to render a {@link Card} with a form control.\n *\n * @internal\n */\nexport const ControlCard = forwardRef((props, ref) => {\n  const {\n    alignIndicator = Alignment.END,\n    checked: _checked,\n    children,\n    className,\n    controlKind,\n    defaultChecked: _defaultChecked,\n    disabled,\n    inputProps,\n    inputRef,\n    label,\n    onChange: _onChange,\n    showAsSelectedWhenChecked = true,\n    value,\n    ...cardProps\n  } = props;\n  const {\n    checked,\n    onChange\n  } = useCheckedControl(props);\n  // use a container element to achieve a good flex layout\n  const labelElement = _jsx(\"div\", {\n    className: Classes.CONTROL_CARD_LABEL,\n    children: children !== null && children !== void 0 ? children : label\n  });\n  const controlProps = {\n    alignIndicator,\n    checked,\n    disabled,\n    inline: true,\n    inputRef,\n    labelElement,\n    onChange,\n    value,\n    ...inputProps\n  };\n  const classes = classNames(Classes.CONTROL_CARD, className, {\n    [Classes.SELECTED]: showAsSelectedWhenChecked && checked\n  });\n  return _jsx(Card, {\n    interactive: !disabled,\n    className: classes,\n    ref: ref,\n    ...cardProps,\n    children: controlKind === \"switch\" ? _jsx(Switch, {\n      ...controlProps\n    }) : controlKind === \"checkbox\" ? _jsx(Checkbox, {\n      ...controlProps\n    }) : controlKind === \"radio\" ? _jsx(Radio, {\n      ...controlProps\n    }) : labelElement\n  });\n});\nControlCard.displayName = `${DISPLAYNAME_PREFIX}.ControlCard`;","map":{"version":3,"names":["classNames","forwardRef","Alignment","Classes","DISPLAYNAME_PREFIX","Card","Checkbox","Radio","Switch","useCheckedControl","ControlCard","props","ref","alignIndicator","END","checked","_checked","children","className","controlKind","defaultChecked","_defaultChecked","disabled","inputProps","inputRef","label","onChange","_onChange","showAsSelectedWhenChecked","value","cardProps","labelElement","_jsx","CONTROL_CARD_LABEL","controlProps","inline","classes","CONTROL_CARD","SELECTED","interactive","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/control-card/controlCard.tsx"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { forwardRef } from \"react\";\n\nimport { Alignment, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type HTMLInputProps } from \"../../common/props\";\nimport { Card, type CardProps } from \"../card/card\";\nimport type { CheckedControlProps, ControlProps } from \"../forms/controlProps\";\nimport { Checkbox, Radio, Switch } from \"../forms/controls\";\n\nimport { useCheckedControl } from \"./useCheckedControl\";\n\nexport type ControlKind = \"switch\" | \"checkbox\" | \"radio\";\n\n/**\n * Subset of {@link CardProps} which can be used to adjust its behavior.\n */\ntype SupportedCardProps = Omit<CardProps, \"interactive\" | \"onChange\">;\n\n/**\n * Subset of {@link ControlProps} which can be used to adjust its behavior.\n */\ntype SupportedControlProps = Pick<\n    ControlProps,\n    keyof CheckedControlProps | \"alignIndicator\" | \"disabled\" | \"inputRef\" | \"label\" | \"value\"\n>;\n\n/**\n * Shared props interface for all control card components, including `CheckboxCard`, `RadioCard`, and `SwitchCard`.\n * The label content may be specified as either `label` or `children`, but not both.\n */\nexport interface ControlCardProps extends SupportedCardProps, SupportedControlProps {\n    /**\n     * Which kind of form control to render inside the card.\n     */\n    controlKind: ControlKind;\n\n    // N.B. this is split out of the root properties in the interface because it would conflict with CardProps' HTMLDivProps\n    /**\n     * HTML input attributes to forward to the control `<input>` element.\n     */\n    inputProps?: Omit<HTMLInputProps, \"size\">;\n\n    /**\n     * Whether the component should use \"selected\" Card styling when checked.\n     *\n     * @default true\n     */\n    showAsSelectedWhenChecked?: boolean;\n}\n\n/**\n * ControlCard component, used to render a {@link Card} with a form control.\n *\n * @internal\n */\nexport const ControlCard: React.FC<ControlCardProps> = forwardRef((props, ref) => {\n    const {\n        alignIndicator = Alignment.END,\n        checked: _checked,\n        children,\n        className,\n        controlKind,\n        defaultChecked: _defaultChecked,\n        disabled,\n        inputProps,\n        inputRef,\n        label,\n        onChange: _onChange,\n        showAsSelectedWhenChecked = true,\n        value,\n        ...cardProps\n    } = props;\n\n    const { checked, onChange } = useCheckedControl(props);\n\n    // use a container element to achieve a good flex layout\n    const labelElement = <div className={Classes.CONTROL_CARD_LABEL}>{children ?? label}</div>;\n    const controlProps: ControlProps = {\n        alignIndicator,\n        checked,\n        disabled,\n        inline: true,\n        inputRef,\n        labelElement,\n        onChange,\n        value,\n        ...inputProps,\n    };\n    const classes = classNames(Classes.CONTROL_CARD, className, {\n        [Classes.SELECTED]: showAsSelectedWhenChecked && checked,\n    });\n\n    return (\n        <Card interactive={!disabled} className={classes} ref={ref} {...cardProps}>\n            {controlKind === \"switch\" ? (\n                <Switch {...controlProps} />\n            ) : controlKind === \"checkbox\" ? (\n                <Checkbox {...controlProps} />\n            ) : controlKind === \"radio\" ? (\n                <Radio {...controlProps} />\n            ) : (\n                labelElement\n            )}\n        </Card>\n    );\n});\nControlCard.displayName = `${DISPLAYNAME_PREFIX}.ControlCard`;\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,QAAQ,OAAO;AAElC,SAASC,SAAS,EAAEC,OAAO,QAAQ,cAAc;AACjD,SAASC,kBAAkB,QAA6B,oBAAoB;AAC5E,SAASC,IAAI,QAAwB,cAAc;AAEnD,SAASC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,QAAQ,mBAAmB;AAE3D,SAASC,iBAAiB,QAAQ,qBAAqB;AAyCvD;;;;;AAKA,OAAO,MAAMC,WAAW,GAA+BT,UAAU,CAAC,CAACU,KAAK,EAAEC,GAAG,KAAI;EAC7E,MAAM;IACFC,cAAc,GAAGX,SAAS,CAACY,GAAG;IAC9BC,OAAO,EAAEC,QAAQ;IACjBC,QAAQ;IACRC,SAAS;IACTC,WAAW;IACXC,cAAc,EAAEC,eAAe;IAC/BC,QAAQ;IACRC,UAAU;IACVC,QAAQ;IACRC,KAAK;IACLC,QAAQ,EAAEC,SAAS;IACnBC,yBAAyB,GAAG,IAAI;IAChCC,KAAK;IACL,GAAGC;EAAS,CACf,GAAGnB,KAAK;EAET,MAAM;IAAEI,OAAO;IAAEW;EAAQ,CAAE,GAAGjB,iBAAiB,CAACE,KAAK,CAAC;EAEtD;EACA,MAAMoB,YAAY,GAAGC,IAAA;IAAKd,SAAS,EAAEf,OAAO,CAAC8B,kBAAkB;IAAAhB,QAAA,EAAGA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIQ;EAAK,EAAO;EAC1F,MAAMS,YAAY,GAAiB;IAC/BrB,cAAc;IACdE,OAAO;IACPO,QAAQ;IACRa,MAAM,EAAE,IAAI;IACZX,QAAQ;IACRO,YAAY;IACZL,QAAQ;IACRG,KAAK;IACL,GAAGN;GACN;EACD,MAAMa,OAAO,GAAGpC,UAAU,CAACG,OAAO,CAACkC,YAAY,EAAEnB,SAAS,EAAE;IACxD,CAACf,OAAO,CAACmC,QAAQ,GAAGV,yBAAyB,IAAIb;GACpD,CAAC;EAEF,OACIiB,IAAA,CAAC3B,IAAI;IAACkC,WAAW,EAAE,CAACjB,QAAQ;IAAEJ,SAAS,EAAEkB,OAAO;IAAExB,GAAG,EAAEA,GAAG;IAAA,GAAMkB,SAAS;IAAAb,QAAA,EACpEE,WAAW,KAAK,QAAQ,GACrBa,IAAA,CAACxB,MAAM;MAAA,GAAK0B;IAAY,EAAI,GAC5Bf,WAAW,KAAK,UAAU,GAC1Ba,IAAA,CAAC1B,QAAQ;MAAA,GAAK4B;IAAY,EAAI,GAC9Bf,WAAW,KAAK,OAAO,GACvBa,IAAA,CAACzB,KAAK;MAAA,GAAK2B;IAAY,EAAI,GAE3BH;EACH,EACE;AAEf,CAAC,CAAC;AACFrB,WAAW,CAAC8B,WAAW,GAAG,GAAGpC,kBAAkB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}