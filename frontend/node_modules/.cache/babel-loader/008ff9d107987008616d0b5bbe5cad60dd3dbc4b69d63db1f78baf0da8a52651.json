{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IconNames, IconNamesSet } from \"./iconNames\";\nimport { IconSize } from \"./iconTypes\";\nimport { wrapWithTimer } from \"./loaderUtils\";\nasync function getLoaderFn(options) {\n  const {\n    loader = singleton.defaultLoader\n  } = options;\n  if (typeof loader === \"function\") {\n    return loader;\n  } else if (loader === \"all\") {\n    return (await import(/* webpackChunkName: \"blueprint-icons-all-paths-loader\" */\n    \"./paths-loaders/allPathsLoader\")).allPathsLoader;\n  } else {\n    return (await import(/* webpackChunkName: \"blueprint-icons-split-paths-by-size-loader\" */\n    \"./paths-loaders/splitPathsBySizeLoader\")).splitPathsBySizeLoader;\n  }\n}\n/**\n * Blueprint icons loader.\n */\nexport class Icons {\n  constructor() {\n    /** @internal */\n    this.defaultLoader = \"split-by-size\";\n    /** @internal */\n    this.loadedIconPaths16 = new Map();\n    /** @internal */\n    this.loadedIconPaths20 = new Map();\n  }\n  /**\n   * Set global icon loading options for all subsequent `Icons.load()` calls.\n   */\n  static setLoaderOptions(options) {\n    if (options.loader !== undefined) {\n      singleton.defaultLoader = options.loader;\n    }\n  }\n  static async load(icons, size, options) {\n    if (!Array.isArray(icons)) {\n      icons = [icons];\n    }\n    await Promise.all(icons.map(icon => this.loadImpl(icon, size, options)));\n    return;\n  }\n  /**\n   * Load all available icons for use in Blueprint components.\n   */\n  static async loadAll(options) {\n    const allIcons = Object.values(IconNames);\n    wrapWithTimer(`[Blueprint] loading all icons`, async () => {\n      await Promise.all([this.load(allIcons, IconSize.STANDARD, options), this.load(allIcons, IconSize.LARGE, options)]);\n    });\n  }\n  /**\n   * Get the icon SVG paths. Returns `undefined` if the icon has not been loaded yet.\n   */\n  static getPaths(icon, size) {\n    if (!this.isValidIconName(icon)) {\n      // don't warn, since this.load() will have warned already\n      return undefined;\n    }\n    const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n    return loadedIcons.get(icon);\n  }\n  static async loadImpl(icon, size, options = {}) {\n    if (!this.isValidIconName(icon)) {\n      console.error(`[Blueprint] Unknown icon '${icon}'`);\n      return;\n    }\n    const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n    if (loadedIcons.has(icon)) {\n      // already loaded, no-op\n      return;\n    }\n    const loaderFn = await getLoaderFn(options);\n    try {\n      const supportedSize = size < IconSize.LARGE ? IconSize.STANDARD : IconSize.LARGE;\n      const paths = await loaderFn(icon, supportedSize);\n      loadedIcons.set(icon, paths);\n    } catch (e) {\n      console.error(`[Blueprint] Unable to load ${size}px icon '${icon}'`, e);\n    }\n  }\n  /**\n   * @returns true if the given string is a valid {@link IconName}\n   */\n  static isValidIconName(iconName) {\n    return IconNamesSet.has(iconName);\n  }\n}\nconst singleton = new Icons();","map":{"version":3,"names":["IconNames","IconNamesSet","IconSize","wrapWithTimer","getLoaderFn","options","loader","singleton","defaultLoader","allPathsLoader","splitPathsBySizeLoader","Icons","constructor","loadedIconPaths16","Map","loadedIconPaths20","setLoaderOptions","undefined","load","icons","size","Array","isArray","Promise","all","map","icon","loadImpl","loadAll","allIcons","Object","values","STANDARD","LARGE","getPaths","isValidIconName","loadedIcons","get","console","error","has","loaderFn","supportedSize","paths","set","e","iconName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/icons/src/iconLoader.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { type IconName, IconNames, IconNamesSet } from \"./iconNames\";\nimport { type IconPaths, IconSize } from \"./iconTypes\";\nimport { wrapWithTimer } from \"./loaderUtils\";\n\n/** Given an icon name and size, loads the icon paths that define it. */\nexport type IconPathsLoader = (iconName: IconName, iconSize: IconSize) => Promise<IconPaths>;\n\nexport interface IconLoaderOptions {\n    /**\n     * The id of a built-in loader, or a custom loader function.\n     *\n     * @see https://blueprintjs.com/docs/versions/5/#icons/loading-icons\n     * @default undefined (equivalent to \"split-by-size\")\n     */\n    loader?: \"split-by-size\" | \"all\" | IconPathsLoader;\n}\n\nasync function getLoaderFn(options: IconLoaderOptions): Promise<IconPathsLoader> {\n    const { loader = singleton.defaultLoader } = options;\n\n    if (typeof loader === \"function\") {\n        return loader;\n    } else if (loader === \"all\") {\n        return (\n            await import(\n                /* webpackChunkName: \"blueprint-icons-all-paths-loader\" */\n                \"./paths-loaders/allPathsLoader\"\n            )\n        ).allPathsLoader;\n    } else {\n        return (\n            await import(\n                /* webpackChunkName: \"blueprint-icons-split-paths-by-size-loader\" */\n                \"./paths-loaders/splitPathsBySizeLoader\"\n            )\n        ).splitPathsBySizeLoader;\n    }\n}\n\n/**\n * Blueprint icons loader.\n */\nexport class Icons {\n    /** @internal */\n    public defaultLoader: IconLoaderOptions[\"loader\"] = \"split-by-size\";\n\n    /** @internal */\n    public loadedIconPaths16: Map<IconName, IconPaths> = new Map();\n\n    /** @internal */\n    public loadedIconPaths20: Map<IconName, IconPaths> = new Map();\n\n    /**\n     * Set global icon loading options for all subsequent `Icons.load()` calls.\n     */\n    public static setLoaderOptions(options: IconLoaderOptions) {\n        if (options.loader !== undefined) {\n            singleton.defaultLoader = options.loader;\n        }\n    }\n\n    /**\n     * Load a single icon for use in Blueprint components.\n     */\n    public static async load(icon: IconName, size: IconSize, options?: IconLoaderOptions): Promise<void>;\n    /**\n     * Load a set of icons for use in Blueprint components.\n     */\n    public static async load(icons: IconName[], size: number, options?: IconLoaderOptions): Promise<void>;\n    public static async load(icons: IconName | IconName[], size: number, options?: IconLoaderOptions) {\n        if (!Array.isArray(icons)) {\n            icons = [icons];\n        }\n\n        await Promise.all(icons.map(icon => this.loadImpl(icon, size, options)));\n        return;\n    }\n\n    /**\n     * Load all available icons for use in Blueprint components.\n     */\n    public static async loadAll(options?: IconLoaderOptions) {\n        const allIcons = Object.values(IconNames);\n        wrapWithTimer(`[Blueprint] loading all icons`, async () => {\n            await Promise.all([\n                this.load(allIcons, IconSize.STANDARD, options),\n                this.load(allIcons, IconSize.LARGE, options),\n            ]);\n        });\n    }\n\n    /**\n     * Get the icon SVG paths. Returns `undefined` if the icon has not been loaded yet.\n     */\n    public static getPaths(icon: IconName, size: IconSize): IconPaths | undefined {\n        if (!this.isValidIconName(icon)) {\n            // don't warn, since this.load() will have warned already\n            return undefined;\n        }\n\n        const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n        return loadedIcons.get(icon);\n    }\n\n    private static async loadImpl(icon: IconName, size: number, options: IconLoaderOptions = {}) {\n        if (!this.isValidIconName(icon)) {\n            console.error(`[Blueprint] Unknown icon '${icon}'`);\n            return;\n        }\n\n        const loadedIcons = size < IconSize.LARGE ? singleton.loadedIconPaths16 : singleton.loadedIconPaths20;\n\n        if (loadedIcons.has(icon)) {\n            // already loaded, no-op\n            return;\n        }\n\n        const loaderFn = await getLoaderFn(options);\n\n        try {\n            const supportedSize = size < IconSize.LARGE ? IconSize.STANDARD : IconSize.LARGE;\n            const paths = await loaderFn(icon, supportedSize);\n            loadedIcons.set(icon, paths);\n        } catch (e) {\n            console.error(`[Blueprint] Unable to load ${size}px icon '${icon}'`, e);\n        }\n    }\n\n    /**\n     * @returns true if the given string is a valid {@link IconName}\n     */\n    public static isValidIconName(iconName: string): iconName is IconName {\n        return IconNamesSet.has(iconName as IconName);\n    }\n}\n\nconst singleton = new Icons();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}