{"ast":null,"code":"/* !\n * (c) Copyright 2024 Palantir Technologies Inc. All rights reserved.\n */\nimport { useCallback, useRef, useState } from \"react\";\nimport { mergeRefs, Utils } from \"../common\";\nconst DEFAULT_OPTIONS = {\n  defaultTabIndex: undefined,\n  disabledTabIndex: -1\n};\nexport function useInteractiveAttributes(interactive, props, ref, options = DEFAULT_OPTIONS) {\n  const {\n    defaultTabIndex,\n    disabledTabIndex\n  } = options;\n  const {\n    active,\n    onClick,\n    onFocus,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    tabIndex = defaultTabIndex\n  } = props;\n  // the current key being pressed\n  const [currentKeyPressed, setCurrentKeyPressed] = useState();\n  // whether the button is in \"active\" state\n  const [isActive, setIsActive] = useState(false);\n  // our local ref for the interactive element, merged with the consumer's own ref in this hook's return value\n  const elementRef = useRef(null);\n  const handleBlur = useCallback(e => {\n    if (isActive) {\n      setIsActive(false);\n    }\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);\n  }, [isActive, onBlur]);\n  const handleKeyDown = useCallback(e => {\n    if (Utils.isKeyboardClick(e)) {\n      e.preventDefault();\n      if (e.key !== currentKeyPressed) {\n        setIsActive(true);\n      }\n    }\n    setCurrentKeyPressed(e.key);\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n  }, [currentKeyPressed, onKeyDown]);\n  const handleKeyUp = useCallback(e => {\n    var _a;\n    if (Utils.isKeyboardClick(e)) {\n      setIsActive(false);\n      (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.click();\n    }\n    setCurrentKeyPressed(undefined);\n    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(e);\n  }, [onKeyUp, elementRef]);\n  const resolvedActive = interactive && (active || isActive);\n  return [resolvedActive, {\n    onBlur: handleBlur,\n    onClick: interactive ? onClick : undefined,\n    onFocus: interactive ? onFocus : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    ref: mergeRefs(elementRef, ref),\n    tabIndex: interactive ? tabIndex : disabledTabIndex\n  }];\n}","map":{"version":3,"names":["useCallback","useRef","useState","mergeRefs","Utils","DEFAULT_OPTIONS","defaultTabIndex","undefined","disabledTabIndex","useInteractiveAttributes","interactive","props","ref","options","active","onClick","onFocus","onKeyDown","onKeyUp","onBlur","tabIndex","currentKeyPressed","setCurrentKeyPressed","isActive","setIsActive","elementRef","handleBlur","e","handleKeyDown","isKeyboardClick","preventDefault","key","handleKeyUp","_a","current","click","resolvedActive"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/accessibility/useInteractiveAttributes.ts"],"sourcesContent":["/* !\n * (c) Copyright 2024 Palantir Technologies Inc. All rights reserved.\n */\n\nimport { useCallback, useRef, useState } from \"react\";\n\nimport { mergeRefs, Utils } from \"../common\";\n\ntype InteractiveHTMLAttributes<E extends HTMLElement> = Pick<\n    React.HTMLAttributes<E>,\n    \"onBlur\" | \"onClick\" | \"onFocus\" | \"onKeyDown\" | \"onKeyUp\" | \"tabIndex\"\n>;\n\ninterface InteractiveComponentProps extends InteractiveHTMLAttributes<HTMLElement> {\n    active?: boolean | undefined;\n}\n\ninterface InteractiveAttributes<E extends HTMLElement> extends InteractiveHTMLAttributes<E> {\n    ref: React.Ref<E>;\n}\n\nexport interface UseInteractiveAttributesOptions {\n    defaultTabIndex: number | undefined;\n    disabledTabIndex: number | undefined;\n}\n\nconst DEFAULT_OPTIONS: UseInteractiveAttributesOptions = { defaultTabIndex: undefined, disabledTabIndex: -1 };\n\nexport function useInteractiveAttributes<E extends HTMLElement>(\n    interactive: boolean,\n    props: InteractiveComponentProps,\n    ref: React.Ref<E>,\n    options: UseInteractiveAttributesOptions = DEFAULT_OPTIONS,\n): [active: boolean, interactiveProps: InteractiveAttributes<E>] {\n    const { defaultTabIndex, disabledTabIndex } = options;\n    const { active, onClick, onFocus, onKeyDown, onKeyUp, onBlur, tabIndex = defaultTabIndex } = props;\n    // the current key being pressed\n    const [currentKeyPressed, setCurrentKeyPressed] = useState<string | undefined>();\n    // whether the button is in \"active\" state\n    const [isActive, setIsActive] = useState(false);\n    // our local ref for the interactive element, merged with the consumer's own ref in this hook's return value\n    const elementRef = useRef<E | null>(null);\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<E>) => {\n            if (isActive) {\n                setIsActive(false);\n            }\n\n            onBlur?.(e);\n        },\n        [isActive, onBlur],\n    );\n\n    const handleKeyDown = useCallback(\n        (e: React.KeyboardEvent<E>) => {\n            if (Utils.isKeyboardClick(e)) {\n                e.preventDefault();\n                if (e.key !== currentKeyPressed) {\n                    setIsActive(true);\n                }\n            }\n\n            setCurrentKeyPressed(e.key);\n            onKeyDown?.(e);\n        },\n        [currentKeyPressed, onKeyDown],\n    );\n\n    const handleKeyUp = useCallback(\n        (e: React.KeyboardEvent<E>) => {\n            if (Utils.isKeyboardClick(e)) {\n                setIsActive(false);\n                elementRef.current?.click();\n            }\n            setCurrentKeyPressed(undefined);\n            onKeyUp?.(e);\n        },\n        [onKeyUp, elementRef],\n    );\n\n    const resolvedActive = interactive && (active || isActive);\n\n    return [\n        resolvedActive,\n        {\n            onBlur: handleBlur,\n            onClick: interactive ? onClick : undefined,\n            onFocus: interactive ? onFocus : undefined,\n            onKeyDown: handleKeyDown,\n            onKeyUp: handleKeyUp,\n            ref: mergeRefs(elementRef, ref),\n            tabIndex: interactive ? tabIndex : disabledTabIndex,\n        },\n    ];\n}\n"],"mappings":"AAAA;;;AAIA,SAASA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAErD,SAASC,SAAS,EAAEC,KAAK,QAAQ,WAAW;AAoB5C,MAAMC,eAAe,GAAoC;EAAEC,eAAe,EAAEC,SAAS;EAAEC,gBAAgB,EAAE,CAAC;AAAC,CAAE;AAE7G,OAAM,SAAUC,wBAAwBA,CACpCC,WAAoB,EACpBC,KAAgC,EAChCC,GAAiB,EACjBC,OAAA,GAA2CR,eAAe;EAE1D,MAAM;IAAEC,eAAe;IAAEE;EAAgB,CAAE,GAAGK,OAAO;EACrD,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,OAAO;IAAEC,MAAM;IAAEC,QAAQ,GAAGd;EAAe,CAAE,GAAGK,KAAK;EAClG;EACA,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,EAAsB;EAChF;EACA,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,MAAMuB,UAAU,GAAGxB,MAAM,CAAW,IAAI,CAAC;EAEzC,MAAMyB,UAAU,GAAG1B,WAAW,CACzB2B,CAAsB,IAAI;IACvB,IAAIJ,QAAQ,EAAE;MACVC,WAAW,CAAC,KAAK,CAAC;IACtB;IAEAL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAGQ,CAAC,CAAC;EACf,CAAC,EACD,CAACJ,QAAQ,EAAEJ,MAAM,CAAC,CACrB;EAED,MAAMS,aAAa,GAAG5B,WAAW,CAC5B2B,CAAyB,IAAI;IAC1B,IAAIvB,KAAK,CAACyB,eAAe,CAACF,CAAC,CAAC,EAAE;MAC1BA,CAAC,CAACG,cAAc,EAAE;MAClB,IAAIH,CAAC,CAACI,GAAG,KAAKV,iBAAiB,EAAE;QAC7BG,WAAW,CAAC,IAAI,CAAC;MACrB;IACJ;IAEAF,oBAAoB,CAACK,CAAC,CAACI,GAAG,CAAC;IAC3Bd,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGU,CAAC,CAAC;EAClB,CAAC,EACD,CAACN,iBAAiB,EAAEJ,SAAS,CAAC,CACjC;EAED,MAAMe,WAAW,GAAGhC,WAAW,CAC1B2B,CAAyB,IAAI;;IAC1B,IAAIvB,KAAK,CAACyB,eAAe,CAACF,CAAC,CAAC,EAAE;MAC1BH,WAAW,CAAC,KAAK,CAAC;MAClB,CAAAS,EAAA,GAAAR,UAAU,CAACS,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,KAAK,EAAE;IAC/B;IACAb,oBAAoB,CAACf,SAAS,CAAC;IAC/BW,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGS,CAAC,CAAC;EAChB,CAAC,EACD,CAACT,OAAO,EAAEO,UAAU,CAAC,CACxB;EAED,MAAMW,cAAc,GAAG1B,WAAW,KAAKI,MAAM,IAAIS,QAAQ,CAAC;EAE1D,OAAO,CACHa,cAAc,EACd;IACIjB,MAAM,EAAEO,UAAU;IAClBX,OAAO,EAAEL,WAAW,GAAGK,OAAO,GAAGR,SAAS;IAC1CS,OAAO,EAAEN,WAAW,GAAGM,OAAO,GAAGT,SAAS;IAC1CU,SAAS,EAAEW,aAAa;IACxBV,OAAO,EAAEc,WAAW;IACpBpB,GAAG,EAAET,SAAS,CAACsB,UAAU,EAAEb,GAAG,CAAC;IAC/BQ,QAAQ,EAAEV,WAAW,GAAGU,QAAQ,GAAGZ;GACtC,CACJ;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}