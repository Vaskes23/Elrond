{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useCallback, useState } from \"react\";\nimport { ChevronDown, ChevronUp } from \"@blueprintjs/icons\";\nimport { Classes, Elevation, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clickElementOnKeyPress, uniqueId } from \"../../common/utils\";\nimport { Card } from \"../card/card\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { H6 } from \"../html/html\";\nimport { Icon } from \"../icon/icon\";\n/**\n * Section component.\n *\n * @see https://blueprintjs.com/docs/#core/components/section\n */\nexport const Section = forwardRef((props, ref) => {\n  var _a;\n  const {\n    children,\n    className,\n    collapseProps,\n    collapsible,\n    compact = false,\n    elevation = Elevation.ZERO,\n    icon,\n    rightElement,\n    subtitle,\n    title,\n    titleRenderer = H6,\n    ...htmlProps\n  } = props;\n  // Determine whether to use controlled or uncontrolled state.\n  const isControlled = (collapseProps === null || collapseProps === void 0 ? void 0 : collapseProps.isOpen) != null;\n  // The initial useState value is negated in order to conform to the `isCollapsed` expectation.\n  const [isCollapsedUncontrolled, setIsCollapsed] = useState(!((_a = collapseProps === null || collapseProps === void 0 ? void 0 : collapseProps.defaultIsOpen) !== null && _a !== void 0 ? _a : true));\n  const isCollapsed = isControlled ? !(collapseProps === null || collapseProps === void 0 ? void 0 : collapseProps.isOpen) : isCollapsedUncontrolled;\n  const toggleIsCollapsed = useCallback(() => {\n    var _a;\n    if (isControlled) {\n      (_a = collapseProps === null || collapseProps === void 0 ? void 0 : collapseProps.onToggle) === null || _a === void 0 ? void 0 : _a.call(collapseProps);\n    } else {\n      setIsCollapsed(!isCollapsed);\n    }\n  }, [collapseProps, isCollapsed, isControlled]);\n  const isHeaderRightContainerVisible = rightElement != null || collapsible;\n  const sectionId = uniqueId(\"section\");\n  const sectionTitleId = title ? uniqueId(\"section-title\") : undefined;\n  return _jsxs(Card, {\n    className: classNames(className, Classes.SECTION, {\n      [Classes.COMPACT]: compact,\n      [Classes.SECTION_COLLAPSED]: collapsible && isCollapsed || Utils.isReactNodeEmpty(children)\n    }),\n    elevation: elevation,\n    ref: ref,\n    \"aria-labelledby\": sectionTitleId,\n    ...htmlProps,\n    id: sectionId,\n    children: [title && _jsxs(\"div\", {\n      className: classNames(Classes.SECTION_HEADER, {\n        [Classes.INTERACTIVE]: collapsible\n      }),\n      onClick: collapsible ? toggleIsCollapsed : undefined,\n      children: [_jsxs(\"div\", {\n        className: Classes.SECTION_HEADER_LEFT,\n        children: [icon && _jsx(Icon, {\n          icon: icon,\n          \"aria-hidden\": true,\n          tabIndex: -1,\n          className: Classes.TEXT_MUTED\n        }), _jsxs(\"div\", {\n          children: [createElement(titleRenderer, {\n            className: Classes.SECTION_HEADER_TITLE,\n            id: sectionTitleId\n          }, title), subtitle && _jsx(\"div\", {\n            className: classNames(Classes.TEXT_MUTED, Classes.SECTION_HEADER_SUB_TITLE),\n            children: subtitle\n          })]\n        })]\n      }), isHeaderRightContainerVisible && _jsxs(\"div\", {\n        className: Classes.SECTION_HEADER_RIGHT,\n        children: [rightElement, collapsible && _jsx(\"span\", {\n          role: \"button\",\n          tabIndex: 0,\n          \"aria-pressed\": isCollapsed,\n          \"aria-expanded\": isCollapsed,\n          \"aria-controls\": sectionId,\n          \"aria-label\": isCollapsed ? \"expand section\" : \"collapse section\",\n          // no OnClick, click event triggers header below\n          onKeyDown: clickElementOnKeyPress([\"Enter\", \" \"]),\n          className: classNames(Classes.TEXT_MUTED, Classes.SECTION_HEADER_COLLAPSE_CARET),\n          children: isCollapsed ? _jsx(ChevronDown, {}) : _jsx(ChevronUp, {})\n        })]\n      })]\n    }), collapsible ? _jsx(Collapse, {\n      ...collapseProps,\n      isOpen: !isCollapsed,\n      children: children\n    }) : children]\n  });\n});\nSection.displayName = `${DISPLAYNAME_PREFIX}.Section`;","map":{"version":3,"names":["classNames","createElement","forwardRef","useCallback","useState","ChevronDown","ChevronUp","Classes","Elevation","Utils","DISPLAYNAME_PREFIX","clickElementOnKeyPress","uniqueId","Card","Collapse","H6","Icon","Section","props","ref","children","className","collapseProps","collapsible","compact","elevation","ZERO","icon","rightElement","subtitle","title","titleRenderer","htmlProps","isControlled","isOpen","isCollapsedUncontrolled","setIsCollapsed","_a","defaultIsOpen","isCollapsed","toggleIsCollapsed","onToggle","call","isHeaderRightContainerVisible","sectionId","sectionTitleId","undefined","_jsxs","SECTION","COMPACT","SECTION_COLLAPSED","isReactNodeEmpty","id","SECTION_HEADER","INTERACTIVE","onClick","SECTION_HEADER_LEFT","_jsx","tabIndex","TEXT_MUTED","SECTION_HEADER_TITLE","SECTION_HEADER_SUB_TITLE","SECTION_HEADER_RIGHT","role","onKeyDown","SECTION_HEADER_COLLAPSE_CARET","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/section/section.tsx"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useCallback, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, type IconName } from \"@blueprintjs/icons\";\n\nimport { Classes, Elevation, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type HTMLDivProps, type MaybeElement, type Props } from \"../../common/props\";\nimport { clickElementOnKeyPress, uniqueId } from \"../../common/utils\";\nimport { Card } from \"../card/card\";\nimport { Collapse, type CollapseProps } from \"../collapse/collapse\";\nimport { H6 } from \"../html/html\";\nimport { Icon } from \"../icon/icon\";\n\n/**\n * Subset of {@link Elevation} options which are visually supported by the {@link Section} component.\n *\n * Note that an elevation greater than 1 creates too much visual clutter/noise in the UI, especially when\n * multiple Sections are shown on a single page.\n */\nexport type SectionElevation = typeof Elevation.ZERO | typeof Elevation.ONE;\n\nexport interface SectionCollapseProps\n    extends Pick<CollapseProps, \"className\" | \"isOpen\" | \"keepChildrenMounted\" | \"transitionDuration\"> {\n    /**\n     * Whether the component is initially open or closed.\n     *\n     * This prop has no effect if `collapsible={false}` or the component is in controlled mode,\n     * i.e. when `isOpen` is **not** `undefined`.\n     *\n     * @default true\n     */\n    defaultIsOpen?: boolean;\n\n    /**\n     * Whether the component is open or closed.\n     *\n     * Passing a boolean value to `isOpen` will enabled controlled mode for the component.\n     */\n    isOpen?: boolean;\n\n    /**\n     * Callback invoked in controlled mode when the collapse toggle element is clicked.\n     */\n    onToggle?: () => void;\n}\n\nexport interface SectionProps extends Props, Omit<HTMLDivProps, \"title\">, React.RefAttributes<HTMLDivElement> {\n    /**\n     * Whether this section's contents should be collapsible.\n     *\n     * @default false\n     */\n    collapsible?: boolean;\n\n    /**\n     * Subset of props to forward to the underlying {@link Collapse} component, with the addition of a\n     * `defaultIsOpen` option which sets the default open state of the component when in uncontrolled mode.\n     */\n    collapseProps?: SectionCollapseProps;\n\n    /**\n     * Whether this section should use compact styles.\n     *\n     * @default false\n     */\n    compact?: boolean;\n\n    /**\n     * Visual elevation of this container element.\n     *\n     * @default Elevation.ZERO\n     */\n    elevation?: SectionElevation;\n\n    /**\n     * Name of a Blueprint UI icon (or an icon element) to render in the section's header.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Element to render on the right side of the section header.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    rightElement?: React.JSX.Element;\n\n    /**\n     * Sub-title of the section.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    subtitle?: React.JSX.Element | string;\n\n    /**\n     * Title of the section.\n     * Note that the header will only be rendered if `title` is provided.\n     */\n    title?: React.JSX.Element | string;\n\n    /**\n     * Optional title renderer function. If provided, it is recommended to include a Blueprint `<H6>` element\n     * as part of the title. The render function is supplied with `className` and `id` attributes which you must\n     * forward to the DOM. The `title` prop is also passed along to this renderer via `props.children`.\n     *\n     * @default H6\n     */\n    titleRenderer?: React.FC<React.HTMLAttributes<HTMLElement>>;\n}\n\n/**\n * Section component.\n *\n * @see https://blueprintjs.com/docs/#core/components/section\n */\nexport const Section: React.FC<SectionProps> = forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        collapseProps,\n        collapsible,\n        compact = false,\n        elevation = Elevation.ZERO,\n        icon,\n        rightElement,\n        subtitle,\n        title,\n        titleRenderer = H6,\n        ...htmlProps\n    } = props;\n    // Determine whether to use controlled or uncontrolled state.\n    const isControlled = collapseProps?.isOpen != null;\n\n    // The initial useState value is negated in order to conform to the `isCollapsed` expectation.\n    const [isCollapsedUncontrolled, setIsCollapsed] = useState<boolean>(!(collapseProps?.defaultIsOpen ?? true));\n\n    const isCollapsed = isControlled ? !collapseProps?.isOpen : isCollapsedUncontrolled;\n\n    const toggleIsCollapsed = useCallback(() => {\n        if (isControlled) {\n            collapseProps?.onToggle?.();\n        } else {\n            setIsCollapsed(!isCollapsed);\n        }\n    }, [collapseProps, isCollapsed, isControlled]);\n\n    const isHeaderRightContainerVisible = rightElement != null || collapsible;\n\n    const sectionId = uniqueId(\"section\");\n    const sectionTitleId = title ? uniqueId(\"section-title\") : undefined;\n\n    return (\n        <Card\n            className={classNames(className, Classes.SECTION, {\n                [Classes.COMPACT]: compact,\n                [Classes.SECTION_COLLAPSED]: (collapsible && isCollapsed) || Utils.isReactNodeEmpty(children),\n            })}\n            elevation={elevation}\n            ref={ref}\n            aria-labelledby={sectionTitleId}\n            {...htmlProps}\n            id={sectionId}\n        >\n            {title && (\n                <div\n                    className={classNames(Classes.SECTION_HEADER, {\n                        [Classes.INTERACTIVE]: collapsible,\n                    })}\n                    onClick={collapsible ? toggleIsCollapsed : undefined}\n                >\n                    <div className={Classes.SECTION_HEADER_LEFT}>\n                        {icon && <Icon icon={icon} aria-hidden={true} tabIndex={-1} className={Classes.TEXT_MUTED} />}\n                        <div>\n                            {createElement(\n                                titleRenderer,\n                                { className: Classes.SECTION_HEADER_TITLE, id: sectionTitleId },\n                                title,\n                            )}\n                            {subtitle && (\n                                <div className={classNames(Classes.TEXT_MUTED, Classes.SECTION_HEADER_SUB_TITLE)}>\n                                    {subtitle}\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    {isHeaderRightContainerVisible && (\n                        <div className={Classes.SECTION_HEADER_RIGHT}>\n                            {rightElement}\n                            {collapsible && (\n                                <span\n                                    role=\"button\"\n                                    tabIndex={0}\n                                    aria-pressed={isCollapsed}\n                                    aria-expanded={isCollapsed}\n                                    aria-controls={sectionId}\n                                    aria-label={isCollapsed ? \"expand section\" : \"collapse section\"}\n                                    // no OnClick, click event triggers header below\n                                    onKeyDown={clickElementOnKeyPress([\"Enter\", \" \"])}\n                                    className={classNames(Classes.TEXT_MUTED, Classes.SECTION_HEADER_COLLAPSE_CARET)}\n                                >\n                                    {isCollapsed ? <ChevronDown /> : <ChevronUp />}\n                                </span>\n                            )}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {collapsible ? (\n                <Collapse {...collapseProps} isOpen={!isCollapsed}>\n                    {children}\n                </Collapse>\n            ) : (\n                children\n            )}\n        </Card>\n    );\n});\nSection.displayName = `${DISPLAYNAME_PREFIX}.Section`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}