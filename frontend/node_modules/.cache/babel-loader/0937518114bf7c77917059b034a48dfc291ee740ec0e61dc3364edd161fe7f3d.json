{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useMemo, useRef, useState } from \"react\";\nimport { Classes, mergeRefs } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { useIsomorphicLayoutEffect } from \"../../hooks/useIsomorphicLayoutEffect\";\n/**\n * Text component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text\n */\nexport const Text = forwardRef(({\n  children,\n  tagName = \"div\",\n  title,\n  className,\n  ellipsize = false,\n  ...htmlProps\n}, forwardedRef) => {\n  const contentMeasuringRef = useRef();\n  const textRef = useMemo(() => mergeRefs(contentMeasuringRef, forwardedRef), [forwardedRef]);\n  const [textContent, setTextContent] = useState(\"\");\n  const [isContentOverflowing, setIsContentOverflowing] = useState();\n  // try to be conservative about running this effect, since querying scrollWidth causes the browser to reflow / recalculate styles,\n  // which can be very expensive for long lists (for example, in long Menus)\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n    if (((_a = contentMeasuringRef.current) === null || _a === void 0 ? void 0 : _a.textContent) != null) {\n      setIsContentOverflowing(ellipsize && contentMeasuringRef.current.scrollWidth > contentMeasuringRef.current.clientWidth);\n      setTextContent(contentMeasuringRef.current.textContent);\n    }\n  }, [contentMeasuringRef, children, ellipsize]);\n  return createElement(tagName, {\n    ...htmlProps,\n    className: classNames({\n      [Classes.TEXT_OVERFLOW_ELLIPSIS]: ellipsize\n    }, className),\n    ref: textRef,\n    title: title !== null && title !== void 0 ? title : isContentOverflowing ? textContent : undefined\n  }, children);\n});\nText.displayName = `${DISPLAYNAME_PREFIX}.Text`;","map":{"version":3,"names":["classNames","createElement","forwardRef","useMemo","useRef","useState","Classes","mergeRefs","DISPLAYNAME_PREFIX","useIsomorphicLayoutEffect","Text","children","tagName","title","className","ellipsize","htmlProps","forwardedRef","contentMeasuringRef","textRef","textContent","setTextContent","isContentOverflowing","setIsContentOverflowing","_a","current","scrollWidth","clientWidth","TEXT_OVERFLOW_ELLIPSIS","ref","undefined","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/text/text.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useMemo, useRef, useState } from \"react\";\n\nimport { Classes, mergeRefs } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, type Props } from \"../../common/props\";\nimport { useIsomorphicLayoutEffect } from \"../../hooks/useIsomorphicLayoutEffect\";\n\nexport interface TextProps\n    extends Props,\n        React.RefAttributes<HTMLElement>,\n        Omit<React.HTMLAttributes<HTMLElement>, \"title\"> {\n    children?: React.ReactNode;\n\n    /**\n     * Indicates that this component should be truncated with an ellipsis if it overflows its container.\n     * The `title` attribute will also be added when content overflows to show the full text of the children on hover.\n     *\n     * @default false\n     */\n    ellipsize?: boolean;\n\n    /**\n     * HTML tag name to use for rendered element.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof React.JSX.IntrinsicElements;\n\n    /**\n     * HTML title of the element\n     */\n    title?: string;\n}\n\n/**\n * Text component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text\n */\nexport const Text: React.FC<TextProps> = forwardRef<HTMLElement, TextProps>(\n    ({ children, tagName = \"div\", title, className, ellipsize = false, ...htmlProps }, forwardedRef) => {\n        const contentMeasuringRef = useRef<HTMLElement>();\n        const textRef = useMemo(() => mergeRefs(contentMeasuringRef, forwardedRef), [forwardedRef]);\n        const [textContent, setTextContent] = useState<string>(\"\");\n        const [isContentOverflowing, setIsContentOverflowing] = useState<boolean>();\n\n        // try to be conservative about running this effect, since querying scrollWidth causes the browser to reflow / recalculate styles,\n        // which can be very expensive for long lists (for example, in long Menus)\n        useIsomorphicLayoutEffect(() => {\n            if (contentMeasuringRef.current?.textContent != null) {\n                setIsContentOverflowing(\n                    ellipsize! && contentMeasuringRef.current.scrollWidth > contentMeasuringRef.current.clientWidth,\n                );\n                setTextContent(contentMeasuringRef.current.textContent);\n            }\n        }, [contentMeasuringRef, children, ellipsize]);\n\n        return createElement(\n            tagName,\n            {\n                ...htmlProps,\n                className: classNames(\n                    {\n                        [Classes.TEXT_OVERFLOW_ELLIPSIS]: ellipsize,\n                    },\n                    className,\n                ),\n                ref: textRef,\n                title: title ?? (isContentOverflowing ? textContent : undefined),\n            },\n            children,\n        );\n    },\n);\nText.displayName = `${DISPLAYNAME_PREFIX}.Text`;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE5E,SAASC,OAAO,EAAEC,SAAS,QAAQ,cAAc;AACjD,SAASC,kBAAkB,QAAoB,oBAAoB;AACnE,SAASC,yBAAyB,QAAQ,uCAAuC;AA6BjF;;;;;AAKA,OAAO,MAAMC,IAAI,GAAwBR,UAAU,CAC/C,CAAC;EAAES,QAAQ;EAAEC,OAAO,GAAG,KAAK;EAAEC,KAAK;EAAEC,SAAS;EAAEC,SAAS,GAAG,KAAK;EAAE,GAAGC;AAAS,CAAE,EAAEC,YAAY,KAAI;EAC/F,MAAMC,mBAAmB,GAAGd,MAAM,EAAe;EACjD,MAAMe,OAAO,GAAGhB,OAAO,CAAC,MAAMI,SAAS,CAACW,mBAAmB,EAAED,YAAY,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAC3F,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACiB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGlB,QAAQ,EAAW;EAE3E;EACA;EACAI,yBAAyB,CAAC,MAAK;;IAC3B,IAAI,EAAAe,EAAA,GAAAN,mBAAmB,CAACO,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEJ,WAAW,KAAI,IAAI,EAAE;MAClDG,uBAAuB,CACnBR,SAAU,IAAIG,mBAAmB,CAACO,OAAO,CAACC,WAAW,GAAGR,mBAAmB,CAACO,OAAO,CAACE,WAAW,CAClG;MACDN,cAAc,CAACH,mBAAmB,CAACO,OAAO,CAACL,WAAW,CAAC;IAC3D;EACJ,CAAC,EAAE,CAACF,mBAAmB,EAAEP,QAAQ,EAAEI,SAAS,CAAC,CAAC;EAE9C,OAAOd,aAAa,CAChBW,OAAO,EACP;IACI,GAAGI,SAAS;IACZF,SAAS,EAAEd,UAAU,CACjB;MACI,CAACM,OAAO,CAACsB,sBAAsB,GAAGb;KACrC,EACDD,SAAS,CACZ;IACDe,GAAG,EAAEV,OAAO;IACZN,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAKS,oBAAoB,GAAGF,WAAW,GAAGU;GACzD,EACDnB,QAAQ,CACX;AACL,CAAC,CACJ;AACDD,IAAI,CAACqB,WAAW,GAAG,GAAGvB,kBAAkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}