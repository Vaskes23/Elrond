{"ast":null,"code":"/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { pascalCase } from \"change-case\";\nimport { IconSize } from \"../iconTypes\";\n/**\n * A dynamic loader for icon paths that generates separate chunks for the two size variants.\n */\nexport const splitPathsBySizeLoader = async (name, size) => {\n  const key = pascalCase(name);\n  let pathsRecord;\n  if (size === IconSize.STANDARD) {\n    pathsRecord = await import(/* webpackChunkName: \"blueprint-icons-16px-paths\" */\n    \"../generated/16px/paths\");\n  } else {\n    pathsRecord = await import(/* webpackChunkName: \"blueprint-icons-20px-paths\" */\n    \"../generated/20px/paths\");\n  }\n  return pathsRecord[key];\n};","map":{"version":3,"names":["pascalCase","IconSize","splitPathsBySizeLoader","name","size","key","pathsRecord","STANDARD"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/icons/src/paths-loaders/splitPathsBySizeLoader.ts"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { pascalCase } from \"change-case\";\n\nimport type { IconPathsLoader } from \"../iconLoader\";\nimport type { IconName } from \"../iconNames\";\nimport { type IconPaths, IconSize } from \"../iconTypes\";\nimport type { PascalCase } from \"../type-utils\";\n\n/**\n * A dynamic loader for icon paths that generates separate chunks for the two size variants.\n */\nexport const splitPathsBySizeLoader: IconPathsLoader = async (name, size) => {\n    const key = pascalCase(name) as PascalCase<IconName>;\n    let pathsRecord: Record<PascalCase<IconName>, IconPaths>;\n\n    if (size === IconSize.STANDARD) {\n        pathsRecord = await import(\n            /* webpackChunkName: \"blueprint-icons-16px-paths\" */\n            \"../generated/16px/paths\"\n        );\n    } else {\n        pathsRecord = await import(\n            /* webpackChunkName: \"blueprint-icons-20px-paths\" */\n            \"../generated/20px/paths\"\n        );\n    }\n\n    return pathsRecord[key];\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,UAAU,QAAQ,aAAa;AAIxC,SAAyBC,QAAQ,QAAQ,cAAc;AAGvD;;;AAGA,OAAO,MAAMC,sBAAsB,GAAoB,MAAAA,CAAOC,IAAI,EAAEC,IAAI,KAAI;EACxE,MAAMC,GAAG,GAAGL,UAAU,CAACG,IAAI,CAAyB;EACpD,IAAIG,WAAoD;EAExD,IAAIF,IAAI,KAAKH,QAAQ,CAACM,QAAQ,EAAE;IAC5BD,WAAW,GAAG,MAAM,MAAM,CACtB;IACA,yBAAyB,CAC5B;EACL,CAAC,MAAM;IACHA,WAAW,GAAG,MAAM,MAAM,CACtB;IACA,yBAAyB,CAC5B;EACL;EAEA,OAAOA,WAAW,CAACD,GAAG,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}