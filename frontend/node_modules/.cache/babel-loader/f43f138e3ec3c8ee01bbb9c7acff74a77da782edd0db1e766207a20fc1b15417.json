{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { Children } from \"react\";\nimport { AbstractPureComponent, Classes, DISPLAYNAME_PREFIX, Utils } from \"../../common\";\nimport { Tab } from \"./tab\";\nimport { TabPanel } from \"./tabPanel\";\nimport { TabTitle } from \"./tabTitle\";\n/**\n * Component that may be inserted between any two children of `<Tabs>` to right-align all subsequent children.\n */\nexport const TabsExpander = () => _jsx(\"div\", {\n  className: Classes.FLEX_EXPANDER\n});\nconst TAB_SELECTOR = `.${Classes.TAB}`;\n/**\n * Tabs component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tabs\n */\nexport class Tabs extends AbstractPureComponent {\n  static getDerivedStateFromProps({\n    selectedTabId\n  }) {\n    if (selectedTabId !== undefined) {\n      // keep state in sync with controlled prop, so state is canonical source of truth\n      return {\n        selectedTabId\n      };\n    }\n    return null;\n  }\n  constructor(props) {\n    super(props);\n    this.tablistElement = null;\n    this.refHandlers = {\n      tablist: tabElement => this.tablistElement = tabElement\n    };\n    this.handleKeyDown = e => {\n      var _a;\n      const direction = Utils.getArrowKeyDirection(e, [\"ArrowLeft\", \"ArrowUp\"], [\"ArrowRight\", \"ArrowDown\"]);\n      if (direction === undefined) return;\n      const focusedElement = (_a = Utils.getActiveElement(this.tablistElement)) === null || _a === void 0 ? void 0 : _a.closest(TAB_SELECTOR);\n      // rest of this is potentially expensive and futile, so bail if no tab is focused\n      if (!focusedElement) return;\n      // must rely on DOM state because we have no way of mapping `focusedElement` to a React.JSX.Element\n      const enabledTabElements = this.getTabElements('[aria-disabled=\"false\"]');\n      const focusedIndex = enabledTabElements.indexOf(focusedElement);\n      if (focusedIndex < 0) return;\n      e.preventDefault();\n      const {\n        length\n      } = enabledTabElements;\n      // auto-wrapping at 0 and `length`\n      const nextFocusedIndex = (focusedIndex + direction + length) % length;\n      enabledTabElements[nextFocusedIndex].focus();\n    };\n    this.handleKeyPress = e => {\n      const targetTabElement = e.target.closest(TAB_SELECTOR);\n      if (targetTabElement != null && Utils.isKeyboardClick(e)) {\n        e.preventDefault();\n        targetTabElement.click();\n      }\n    };\n    this.handleTabClick = (newTabId, event) => {\n      var _a, _b;\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, newTabId, this.state.selectedTabId, event);\n      if (this.props.selectedTabId === undefined) {\n        this.setState({\n          selectedTabId: newTabId\n        });\n      }\n    };\n    this.renderTabPanel = tab => {\n      const {\n        className,\n        panel,\n        id,\n        panelClassName\n      } = tab.props;\n      if (panel === undefined) {\n        return undefined;\n      }\n      return _createElement(TabPanel, {\n        ...tab.props,\n        key: id,\n        className: classNames(className, panelClassName),\n        parentId: this.props.id,\n        selectedTabId: this.state.selectedTabId\n      });\n    };\n    this.renderTabTitle = child => {\n      if (isTabElement(child)) {\n        const {\n          id\n        } = child.props;\n        return _jsx(TabTitle, {\n          ...child.props,\n          parentId: this.props.id,\n          onClick: this.handleTabClick,\n          selected: id === this.state.selectedTabId\n        });\n      }\n      return child;\n    };\n    const selectedTabId = this.getInitialSelectedTabId();\n    this.state = {\n      selectedTabId\n    };\n  }\n  render() {\n    const {\n      animate,\n      children,\n      className,\n      fill,\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      large,\n      renderActiveTabPanelOnly,\n      size = \"medium\",\n      vertical\n    } = this.props;\n    const {\n      indicatorWrapperStyle,\n      selectedTabId\n    } = this.state;\n    const tabTitles = Children.map(children, this.renderTabTitle);\n    const tabPanels = this.getTabChildren().filter(renderActiveTabPanelOnly ? tab => tab.props.id === selectedTabId : () => true).map(this.renderTabPanel);\n    const tabIndicator = animate ? _jsx(\"div\", {\n      className: Classes.TAB_INDICATOR_WRAPPER,\n      style: indicatorWrapperStyle,\n      children: _jsx(\"div\", {\n        className: Classes.TAB_INDICATOR\n      })\n    }) : null;\n    const classes = classNames(Classes.TABS, className, {\n      [Classes.VERTICAL]: vertical,\n      [Classes.FILL]: fill\n    });\n    const tabListClasses = classNames(Classes.TAB_LIST, Classes.sizeClass(size, {\n      large\n    }));\n    return _jsxs(\"div\", {\n      className: classes,\n      children: [_jsxs(\"div\", {\n        className: tabListClasses,\n        onKeyDown: this.handleKeyDown,\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        onKeyPress: this.handleKeyPress,\n        ref: this.refHandlers.tablist,\n        role: \"tablist\",\n        children: [tabIndicator, tabTitles]\n      }), tabPanels]\n    });\n  }\n  componentDidMount() {\n    this.moveSelectionIndicator(false);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedTabId !== prevState.selectedTabId) {\n      this.moveSelectionIndicator();\n    } else if (prevState.selectedTabId != null) {\n      // comparing React nodes is difficult to do with simple logic, so\n      // shallowly compare just their props as a workaround.\n      const didChildrenChange = !Utils.arraysEqual(this.getTabChildrenProps(prevProps), this.getTabChildrenProps(), Utils.shallowCompareKeys);\n      if (didChildrenChange) {\n        this.moveSelectionIndicator();\n      }\n    }\n  }\n  getInitialSelectedTabId() {\n    // NOTE: providing an unknown ID will hide the selection\n    const {\n      defaultSelectedTabId,\n      selectedTabId\n    } = this.props;\n    if (selectedTabId !== undefined) {\n      return selectedTabId;\n    } else if (defaultSelectedTabId !== undefined) {\n      return defaultSelectedTabId;\n    } else {\n      // select first tab in absence of user input\n      const tabs = this.getTabChildren();\n      return tabs.length === 0 ? undefined : tabs[0].props.id;\n    }\n  }\n  getTabChildrenProps(props = this.props) {\n    return this.getTabChildren(props).map(child => child.props);\n  }\n  /** Filters children to only `<Tab>`s */\n  getTabChildren(props = this.props) {\n    return Children.toArray(props.children).filter(isTabElement);\n  }\n  /** Queries root HTML element for all tabs with optional filter selector */\n  getTabElements(subselector = \"\") {\n    if (this.tablistElement == null) {\n      return [];\n    }\n    return Array.from(this.tablistElement.querySelectorAll(TAB_SELECTOR + subselector));\n  }\n  /**\n   * Calculate the new height, width, and position of the tab indicator.\n   * Store the CSS values so the transition animation can start.\n   */\n  moveSelectionIndicator(animate = true) {\n    if (this.tablistElement == null || !this.props.animate) {\n      return;\n    }\n    const tabIdSelector = `${TAB_SELECTOR}[data-tab-id=\"${this.state.selectedTabId}\"]`;\n    const selectedTabElement = this.tablistElement.querySelector(tabIdSelector);\n    let indicatorWrapperStyle = {\n      display: \"none\"\n    };\n    if (selectedTabElement != null) {\n      const {\n        clientHeight,\n        clientWidth,\n        offsetLeft,\n        offsetTop\n      } = selectedTabElement;\n      indicatorWrapperStyle = {\n        height: clientHeight,\n        transform: `translateX(${Math.floor(offsetLeft)}px) translateY(${Math.floor(offsetTop)}px)`,\n        width: clientWidth\n      };\n      if (!animate) {\n        indicatorWrapperStyle.transition = \"none\";\n      }\n    }\n    this.setState({\n      indicatorWrapperStyle\n    });\n  }\n}\n/**\n * @deprecated Use the `Tab` component directly instead\n *\n * @see https://blueprintjs.com/docs/#core/components/tabs.tab\n */\nTabs.Tab = Tab;\nTabs.defaultProps = {\n  animate: true,\n  fill: false,\n  large: false,\n  renderActiveTabPanelOnly: false,\n  size: \"medium\",\n  vertical: false\n};\nTabs.displayName = `${DISPLAYNAME_PREFIX}.Tabs`;\nfunction isTabElement(child) {\n  return Utils.isElementOfType(child, Tab);\n}","map":{"version":3,"names":["classNames","Children","AbstractPureComponent","Classes","DISPLAYNAME_PREFIX","Utils","Tab","TabPanel","TabTitle","TabsExpander","_jsx","className","FLEX_EXPANDER","TAB_SELECTOR","TAB","Tabs","getDerivedStateFromProps","selectedTabId","undefined","constructor","props","tablistElement","refHandlers","tablist","tabElement","handleKeyDown","e","direction","getArrowKeyDirection","focusedElement","_a","getActiveElement","closest","enabledTabElements","getTabElements","focusedIndex","indexOf","preventDefault","length","nextFocusedIndex","focus","handleKeyPress","targetTabElement","target","isKeyboardClick","click","handleTabClick","newTabId","event","_b","onChange","call","state","setState","renderTabPanel","tab","panel","id","panelClassName","_createElement","key","parentId","renderTabTitle","child","isTabElement","onClick","selected","getInitialSelectedTabId","render","animate","children","fill","large","renderActiveTabPanelOnly","size","vertical","indicatorWrapperStyle","tabTitles","map","tabPanels","getTabChildren","filter","tabIndicator","TAB_INDICATOR_WRAPPER","style","TAB_INDICATOR","classes","TABS","VERTICAL","FILL","tabListClasses","TAB_LIST","sizeClass","_jsxs","onKeyDown","onKeyPress","ref","role","componentDidMount","moveSelectionIndicator","componentDidUpdate","prevProps","prevState","didChildrenChange","arraysEqual","getTabChildrenProps","shallowCompareKeys","defaultSelectedTabId","tabs","toArray","subselector","Array","from","querySelectorAll","tabIdSelector","selectedTabElement","querySelector","display","clientHeight","clientWidth","offsetLeft","offsetTop","height","transform","Math","floor","width","transition","defaultProps","displayName","isElementOfType"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/tabs/tabs.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { Children } from \"react\";\n\nimport { AbstractPureComponent, Classes, DISPLAYNAME_PREFIX, type NonSmallSize, type Props, Utils } from \"../../common\";\n\nimport { Tab, type TabId, type TabProps } from \"./tab\";\nimport { TabPanel } from \"./tabPanel\";\nimport { TabTitle } from \"./tabTitle\";\n\n/**\n * Component that may be inserted between any two children of `<Tabs>` to right-align all subsequent children.\n */\nexport const TabsExpander: React.FC = () => <div className={Classes.FLEX_EXPANDER} />;\n\ntype TabElement = React.ReactElement<TabProps & { children: React.ReactNode }>;\n\nconst TAB_SELECTOR = `.${Classes.TAB}`;\n\nexport interface TabsProps extends Props {\n    /**\n     * Whether the selected tab indicator should animate its movement.\n     *\n     * @default true\n     */\n    animate?: boolean;\n\n    /** Tab elements. */\n    children?: React.ReactNode;\n\n    /**\n     * Initial selected tab `id`, for uncontrolled usage.\n     * Note that this prop refers only to `<Tab>` children; other types of elements are ignored.\n     *\n     * @default first tab\n     */\n    defaultSelectedTabId?: TabId;\n\n    /**\n     * Unique identifier for this `Tabs` container. This will be combined with the `id` of each\n     * `Tab` child to generate ARIA accessibility attributes. IDs are required and should be\n     * unique on the page to support server-side rendering.\n     */\n    id: TabId;\n\n    /**\n     * If set to `true`, the tab titles will display with larger styling.\n     * This will apply large styles only to the tabs at this level, not to nested tabs.\n     *\n     * @deprecated use `size=\"large\"` instead\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The size of the tab titles.\n     *\n     * @default \"medium\"\n     */\n    size?: NonSmallSize;\n\n    /**\n     * Whether inactive tab panels should be removed from the DOM and unmounted in React.\n     * This can be a performance enhancement when rendering many complex panels, but requires\n     * careful support for unmounting and remounting.\n     *\n     * @default false\n     */\n    renderActiveTabPanelOnly?: boolean;\n\n    /**\n     * Selected tab `id`, for controlled usage.\n     * Providing this prop will put the component in controlled mode.\n     * Unknown ids will result in empty selection (no errors).\n     */\n    selectedTabId?: TabId;\n\n    /**\n     * Whether to show tabs stacked vertically on the left side.\n     *\n     * @default false\n     */\n    vertical?: boolean;\n\n    /**\n     * Whether to make the tabs list fill the height of its parent.\n     *\n     * This has no effect when `vertical={true}`.\n     * This is not recommended when tab panels are defined within this component subtree, as the height computation will\n     * include the panel height, which is usually not intended. Instead, it works well if the panels are rendered\n     * elsewhere in the React tree.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /**\n     * A callback function that is invoked when a tab in the tab list is clicked.\n     */\n    onChange?(newTabId: TabId, prevTabId: TabId | undefined, event: React.MouseEvent<HTMLElement>): void;\n}\n\nexport interface TabsState {\n    indicatorWrapperStyle?: React.CSSProperties;\n    selectedTabId?: TabId;\n}\n\n/**\n * Tabs component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tabs\n */\nexport class Tabs extends AbstractPureComponent<TabsProps, TabsState> {\n    /**\n     * @deprecated Use the `Tab` component directly instead\n     *\n     * @see https://blueprintjs.com/docs/#core/components/tabs.tab\n     */\n    public static Tab = Tab;\n\n    public static defaultProps: Partial<TabsProps> = {\n        animate: true,\n        fill: false,\n        large: false,\n        renderActiveTabPanelOnly: false,\n        size: \"medium\",\n        vertical: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tabs`;\n\n    public static getDerivedStateFromProps({ selectedTabId }: TabsProps) {\n        if (selectedTabId !== undefined) {\n            // keep state in sync with controlled prop, so state is canonical source of truth\n            return { selectedTabId };\n        }\n        return null;\n    }\n\n    private tablistElement: HTMLDivElement | null = null;\n\n    private refHandlers = {\n        tablist: (tabElement: HTMLDivElement) => (this.tablistElement = tabElement),\n    };\n\n    constructor(props: TabsProps) {\n        super(props);\n        const selectedTabId = this.getInitialSelectedTabId();\n        this.state = { selectedTabId };\n    }\n\n    public render() {\n        const {\n            animate,\n            children,\n            className,\n            fill,\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            large,\n            renderActiveTabPanelOnly,\n            size = \"medium\",\n            vertical,\n        } = this.props;\n        const { indicatorWrapperStyle, selectedTabId } = this.state;\n\n        const tabTitles = Children.map(children, this.renderTabTitle);\n\n        const tabPanels = this.getTabChildren()\n            .filter(renderActiveTabPanelOnly ? tab => tab.props.id === selectedTabId : () => true)\n            .map(this.renderTabPanel);\n\n        const tabIndicator = animate ? (\n            <div className={Classes.TAB_INDICATOR_WRAPPER} style={indicatorWrapperStyle}>\n                <div className={Classes.TAB_INDICATOR} />\n            </div>\n        ) : null;\n\n        const classes = classNames(Classes.TABS, className, {\n            [Classes.VERTICAL]: vertical,\n            [Classes.FILL]: fill,\n        });\n        const tabListClasses = classNames(Classes.TAB_LIST, Classes.sizeClass(size, { large }));\n\n        return (\n            <div className={classes}>\n                <div\n                    className={tabListClasses}\n                    onKeyDown={this.handleKeyDown}\n                    // eslint-disable-next-line @typescript-eslint/no-deprecated\n                    onKeyPress={this.handleKeyPress}\n                    ref={this.refHandlers.tablist}\n                    role=\"tablist\"\n                >\n                    {tabIndicator}\n                    {tabTitles}\n                </div>\n                {tabPanels}\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.moveSelectionIndicator(false);\n    }\n\n    public componentDidUpdate(prevProps: TabsProps, prevState: TabsState) {\n        if (this.state.selectedTabId !== prevState.selectedTabId) {\n            this.moveSelectionIndicator();\n        } else if (prevState.selectedTabId != null) {\n            // comparing React nodes is difficult to do with simple logic, so\n            // shallowly compare just their props as a workaround.\n            const didChildrenChange = !Utils.arraysEqual(\n                this.getTabChildrenProps(prevProps),\n                this.getTabChildrenProps(),\n                Utils.shallowCompareKeys,\n            );\n            if (didChildrenChange) {\n                this.moveSelectionIndicator();\n            }\n        }\n    }\n\n    private getInitialSelectedTabId() {\n        // NOTE: providing an unknown ID will hide the selection\n        const { defaultSelectedTabId, selectedTabId } = this.props;\n        if (selectedTabId !== undefined) {\n            return selectedTabId;\n        } else if (defaultSelectedTabId !== undefined) {\n            return defaultSelectedTabId;\n        } else {\n            // select first tab in absence of user input\n            const tabs = this.getTabChildren();\n            return tabs.length === 0 ? undefined : tabs[0].props.id;\n        }\n    }\n\n    private getTabChildrenProps(props: TabsProps & { children?: React.ReactNode } = this.props) {\n        return this.getTabChildren(props).map(child => child.props);\n    }\n\n    /** Filters children to only `<Tab>`s */\n    private getTabChildren(props: TabsProps & { children?: React.ReactNode } = this.props) {\n        return Children.toArray(props.children).filter(isTabElement);\n    }\n\n    /** Queries root HTML element for all tabs with optional filter selector */\n    private getTabElements(subselector = \"\") {\n        if (this.tablistElement == null) {\n            return [];\n        }\n        return Array.from(this.tablistElement.querySelectorAll<HTMLElement>(TAB_SELECTOR + subselector));\n    }\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const direction = Utils.getArrowKeyDirection(e, [\"ArrowLeft\", \"ArrowUp\"], [\"ArrowRight\", \"ArrowDown\"]);\n        if (direction === undefined) return;\n\n        const focusedElement = Utils.getActiveElement(this.tablistElement)?.closest<HTMLElement>(TAB_SELECTOR);\n        // rest of this is potentially expensive and futile, so bail if no tab is focused\n        if (!focusedElement) return;\n\n        // must rely on DOM state because we have no way of mapping `focusedElement` to a React.JSX.Element\n        const enabledTabElements = this.getTabElements('[aria-disabled=\"false\"]');\n        const focusedIndex = enabledTabElements.indexOf(focusedElement);\n        if (focusedIndex < 0) return;\n\n        e.preventDefault();\n        const { length } = enabledTabElements;\n        // auto-wrapping at 0 and `length`\n        const nextFocusedIndex = (focusedIndex + direction + length) % length;\n        enabledTabElements[nextFocusedIndex].focus();\n    };\n\n    private handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const targetTabElement = (e.target as HTMLElement).closest<HTMLElement>(TAB_SELECTOR);\n        if (targetTabElement != null && Utils.isKeyboardClick(e)) {\n            e.preventDefault();\n            targetTabElement.click();\n        }\n    };\n\n    private handleTabClick = (newTabId: TabId, event: React.MouseEvent<HTMLElement>) => {\n        this.props.onChange?.(newTabId, this.state.selectedTabId, event);\n        if (this.props.selectedTabId === undefined) {\n            this.setState({ selectedTabId: newTabId });\n        }\n    };\n\n    /**\n     * Calculate the new height, width, and position of the tab indicator.\n     * Store the CSS values so the transition animation can start.\n     */\n    private moveSelectionIndicator(animate = true) {\n        if (this.tablistElement == null || !this.props.animate) {\n            return;\n        }\n\n        const tabIdSelector = `${TAB_SELECTOR}[data-tab-id=\"${this.state.selectedTabId}\"]`;\n        const selectedTabElement = this.tablistElement.querySelector<HTMLElement>(tabIdSelector);\n\n        let indicatorWrapperStyle: React.CSSProperties = { display: \"none\" };\n        if (selectedTabElement != null) {\n            const { clientHeight, clientWidth, offsetLeft, offsetTop } = selectedTabElement;\n            indicatorWrapperStyle = {\n                height: clientHeight,\n                transform: `translateX(${Math.floor(offsetLeft)}px) translateY(${Math.floor(offsetTop)}px)`,\n                width: clientWidth,\n            };\n\n            if (!animate) {\n                indicatorWrapperStyle.transition = \"none\";\n            }\n        }\n        this.setState({ indicatorWrapperStyle });\n    }\n\n    private renderTabPanel = (tab: TabElement) => {\n        const { className, panel, id, panelClassName } = tab.props;\n        if (panel === undefined) {\n            return undefined;\n        }\n\n        return (\n            <TabPanel\n                {...tab.props}\n                key={id}\n                className={classNames(className, panelClassName)}\n                parentId={this.props.id}\n                selectedTabId={this.state.selectedTabId}\n            />\n        );\n    };\n\n    private renderTabTitle = (child: React.ReactNode) => {\n        if (isTabElement(child)) {\n            const { id } = child.props;\n            return (\n                <TabTitle\n                    {...child.props}\n                    parentId={this.props.id}\n                    onClick={this.handleTabClick}\n                    selected={id === this.state.selectedTabId}\n                />\n            );\n        }\n        return child;\n    };\n}\n\nfunction isTabElement(child: any): child is TabElement {\n    return Utils.isElementOfType(child, Tab);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}