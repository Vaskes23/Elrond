{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useEffect, useState } from \"react\";\nimport { Icons, IconSize, SVGIconContainer } from \"@blueprintjs/icons\";\nimport { Classes, DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common\";\n// re-export for convenience, since some users won't be importing from or have a direct dependency on the icons package\nexport { IconSize };\n/**\n * Icon component.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon\n */\nexport const Icon = forwardRef((props, ref) => {\n  var _a;\n  const {\n    autoLoad = true,\n    className,\n    color,\n    icon,\n    intent,\n    tagName = \"span\",\n    svgProps,\n    title,\n    htmlTitle,\n    ...htmlProps\n  } = props;\n  const size = (_a = props.size) !== null && _a !== void 0 ? _a : IconSize.STANDARD;\n  const [iconPaths, setIconPaths] = useState(() => typeof icon === \"string\" ? Icons.getPaths(icon, size) : undefined);\n  useEffect(() => {\n    let shouldCancelIconLoading = false;\n    if (typeof icon === \"string\") {\n      // The icon may have been loaded already, in which case we can simply grab it.\n      // N.B. when `autoLoad={true}`, we can't rely on simply calling Icons.load() here to re-load an icon module\n      // which has already been loaded & cached, since it may have been loaded with special loading options which\n      // this component knows nothing about.\n      const loadedIconPaths = Icons.getPaths(icon, size);\n      if (loadedIconPaths !== undefined) {\n        setIconPaths(loadedIconPaths);\n      } else if (autoLoad) {\n        Icons.load(icon, size).then(() => {\n          // if this effect expired by the time icon loaded, then don't set state\n          if (!shouldCancelIconLoading) {\n            setIconPaths(Icons.getPaths(icon, size));\n          }\n        }).catch(reason => {\n          console.error(`[Blueprint] Icon '${icon}' (${size}px) could not be loaded.`, reason);\n        });\n      } else {\n        console.error(`[Blueprint] Icon '${icon}' (${size}px) is not loaded yet and autoLoad={false}, did you call Icons.load('${icon}', ${size})?`);\n      }\n    }\n    return () => {\n      shouldCancelIconLoading = true;\n    };\n  }, [autoLoad, icon, size]);\n  if (icon == null || typeof icon === \"boolean\") {\n    return null;\n  } else if (typeof icon !== \"string\") {\n    return icon;\n  }\n  if (iconPaths == null) {\n    // fall back to icon font if unloaded or unable to load SVG implementation\n    const sizeClass = size === IconSize.STANDARD ? Classes.ICON_STANDARD : size === IconSize.LARGE ? Classes.ICON_LARGE : undefined;\n    return createElement(tagName || \"span\", {\n      \"aria-hidden\": title ? undefined : true,\n      ...removeNonHTMLProps(htmlProps),\n      className: classNames(Classes.ICON, sizeClass, Classes.iconClass(icon), Classes.intentClass(intent), className),\n      \"data-icon\": icon,\n      ref,\n      title: htmlTitle\n    });\n  } else {\n    const pathElements = iconPaths.map((d, i) => _jsx(\"path\", {\n      d: d,\n      fillRule: \"evenodd\"\n    }, i));\n    // HACKHACK: there is no good way to narrow the type of SVGIconContainerProps here because of the use\n    // of a conditional type within the type union that defines that interface. So we cast to <any>.\n    // see https://github.com/microsoft/TypeScript/issues/24929, https://github.com/microsoft/TypeScript/issues/33014\n    return _jsx(SVGIconContainer, {\n      children: pathElements,\n      // don't forward `Classes.ICON` or `Classes.iconClass(icon)` here, since the container will render those classes\n      className: classNames(Classes.intentClass(intent), className),\n      color: color,\n      htmlTitle: htmlTitle,\n      iconName: icon,\n      ref: ref,\n      size: size,\n      svgProps: svgProps,\n      tagName: tagName,\n      title: title,\n      ...removeNonHTMLProps(htmlProps)\n    });\n  }\n});\nIcon.displayName = `${DISPLAYNAME_PREFIX}.Icon`;","map":{"version":3,"names":["classNames","createElement","forwardRef","useEffect","useState","Icons","IconSize","SVGIconContainer","Classes","DISPLAYNAME_PREFIX","removeNonHTMLProps","Icon","props","ref","autoLoad","className","color","icon","intent","tagName","svgProps","title","htmlTitle","htmlProps","size","_a","STANDARD","iconPaths","setIconPaths","getPaths","undefined","shouldCancelIconLoading","loadedIconPaths","load","then","catch","reason","console","error","sizeClass","ICON_STANDARD","LARGE","ICON_LARGE","ICON","iconClass","intentClass","pathElements","map","d","i","_jsx","fillRule","children","iconName","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/icon/icon.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { createElement, forwardRef, useEffect, useState } from \"react\";\n\nimport {\n    type DefaultSVGIconProps,\n    type IconName,\n    type IconPaths,\n    Icons,\n    IconSize,\n    SVGIconContainer,\n    type SVGIconProps,\n} from \"@blueprintjs/icons\";\n\nimport {\n    Classes,\n    DISPLAYNAME_PREFIX,\n    type IntentProps,\n    type MaybeElement,\n    type Props,\n    removeNonHTMLProps,\n} from \"../../common\";\n\n// re-export for convenience, since some users won't be importing from or have a direct dependency on the icons package\nexport { type IconName, IconSize };\n\nexport interface IconOwnProps {\n    /**\n     * Whether the component should automatically load icon contents using an async import.\n     *\n     * @default true\n     */\n    autoLoad?: boolean;\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render. This prop is\n     * required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names), that\n     *   icon will be rendered as an `<svg>` with `<path>` tags. Unknown strings\n     *   will render a blank icon to occupy space.\n     * - If given a `React.JSX.Element`, that element will be rendered and _all other\n     *   props on this component are ignored._ This type is supported to\n     *   simplify icon support in other Blueprint components. As a consumer, you\n     *   should avoid using `<Icon icon={<Element />}` directly; simply render\n     *   `<Element />` instead.\n     */\n    icon: IconName | MaybeElement;\n\n    /** Props to apply to the `SVG` element */\n    svgProps?: React.HTMLAttributes<SVGElement>;\n}\n\n// N.B. the following inteface is defined as a type alias instead of an interface due to a TypeScript limitation\n// where interfaces cannot extend conditionally-defined union types.\n/**\n * Generic interface for the `<Icon>` component which may be parameterized by its root element type.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon.dom-attributes\n */\nexport type IconProps<T extends Element = Element> = IntentProps & Props & SVGIconProps<T> & IconOwnProps;\n\n/**\n * The default `<Icon>` props interface, equivalent to `IconProps` with its default type parameter.\n * This is primarly exported for documentation purposes; users should reference `IconProps<T>` instead.\n */\nexport interface DefaultIconProps extends IntentProps, Props, DefaultSVGIconProps, IconOwnProps {\n    // empty interface for documentation purposes (documentalist handles this better than the IconProps<T> type alias)\n}\n\n/**\n * Generic icon component type. This is essentially a type hack required to make forwardRef work with generic\n * components. Note that this slows down TypeScript compilation, but it's better than the alternative of globally\n * augmenting \"@types/react\".\n *\n * @see https://stackoverflow.com/a/73795494/7406866\n */\nexport interface IconComponent extends React.FC<IconProps<Element>> {\n    <T extends Element = Element>(props: IconProps<T>): React.ReactNode;\n}\n\n/**\n * Icon component.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon\n */\nexport const Icon: IconComponent = forwardRef(<T extends Element>(props: IconProps<T>, ref: React.Ref<T>) => {\n    const {\n        autoLoad = true,\n        className,\n        color,\n        icon,\n        intent,\n        tagName = \"span\",\n        svgProps,\n        title,\n        htmlTitle,\n        ...htmlProps\n    } = props;\n\n    const size = props.size ?? IconSize.STANDARD;\n\n    const [iconPaths, setIconPaths] = useState<IconPaths | undefined>(() =>\n        typeof icon === \"string\" ? Icons.getPaths(icon, size) : undefined,\n    );\n\n    useEffect(() => {\n        let shouldCancelIconLoading = false;\n        if (typeof icon === \"string\") {\n            // The icon may have been loaded already, in which case we can simply grab it.\n            // N.B. when `autoLoad={true}`, we can't rely on simply calling Icons.load() here to re-load an icon module\n            // which has already been loaded & cached, since it may have been loaded with special loading options which\n            // this component knows nothing about.\n            const loadedIconPaths = Icons.getPaths(icon, size);\n\n            if (loadedIconPaths !== undefined) {\n                setIconPaths(loadedIconPaths);\n            } else if (autoLoad) {\n                Icons.load(icon, size)\n                    .then(() => {\n                        // if this effect expired by the time icon loaded, then don't set state\n                        if (!shouldCancelIconLoading) {\n                            setIconPaths(Icons.getPaths(icon, size));\n                        }\n                    })\n                    .catch(reason => {\n                        console.error(`[Blueprint] Icon '${icon}' (${size}px) could not be loaded.`, reason);\n                    });\n            } else {\n                console.error(\n                    `[Blueprint] Icon '${icon}' (${size}px) is not loaded yet and autoLoad={false}, did you call Icons.load('${icon}', ${size})?`,\n                );\n            }\n        }\n        return () => {\n            shouldCancelIconLoading = true;\n        };\n    }, [autoLoad, icon, size]);\n\n    if (icon == null || typeof icon === \"boolean\") {\n        return null;\n    } else if (typeof icon !== \"string\") {\n        return icon;\n    }\n\n    if (iconPaths == null) {\n        // fall back to icon font if unloaded or unable to load SVG implementation\n        const sizeClass =\n            size === IconSize.STANDARD\n                ? Classes.ICON_STANDARD\n                : size === IconSize.LARGE\n                  ? Classes.ICON_LARGE\n                  : undefined;\n        return createElement(tagName || \"span\", {\n            \"aria-hidden\": title ? undefined : true,\n            ...removeNonHTMLProps(htmlProps),\n            className: classNames(\n                Classes.ICON,\n                sizeClass,\n                Classes.iconClass(icon),\n                Classes.intentClass(intent),\n                className,\n            ),\n            \"data-icon\": icon,\n            ref,\n            title: htmlTitle,\n        });\n    } else {\n        const pathElements = iconPaths.map((d, i) => <path d={d} key={i} fillRule=\"evenodd\" />);\n        // HACKHACK: there is no good way to narrow the type of SVGIconContainerProps here because of the use\n        // of a conditional type within the type union that defines that interface. So we cast to <any>.\n        // see https://github.com/microsoft/TypeScript/issues/24929, https://github.com/microsoft/TypeScript/issues/33014\n        return (\n            <SVGIconContainer<any>\n                children={pathElements}\n                // don't forward `Classes.ICON` or `Classes.iconClass(icon)` here, since the container will render those classes\n                className={classNames(Classes.intentClass(intent), className)}\n                color={color}\n                htmlTitle={htmlTitle}\n                iconName={icon}\n                ref={ref}\n                size={size}\n                svgProps={svgProps}\n                tagName={tagName}\n                title={title}\n                {...removeNonHTMLProps(htmlProps)}\n            />\n        );\n    }\n});\nIcon.displayName = `${DISPLAYNAME_PREFIX}.Icon`;\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEtE,SAIIC,KAAK,EACLC,QAAQ,EACRC,gBAAgB,QAEb,oBAAoB;AAE3B,SACIC,OAAO,EACPC,kBAAkB,EAIlBC,kBAAkB,QACf,cAAc;AAErB;AACA,SAAwBJ,QAAQ;AA2DhC;;;;;AAKA,OAAO,MAAMK,IAAI,GAAkBT,UAAU,CAAC,CAAoBU,KAAmB,EAAEC,GAAiB,KAAI;;EACxG,MAAM;IACFC,QAAQ,GAAG,IAAI;IACfC,SAAS;IACTC,KAAK;IACLC,IAAI;IACJC,MAAM;IACNC,OAAO,GAAG,MAAM;IAChBC,QAAQ;IACRC,KAAK;IACLC,SAAS;IACT,GAAGC;EAAS,CACf,GAAGX,KAAK;EAET,MAAMY,IAAI,GAAG,CAAAC,EAAA,GAAAb,KAAK,CAACY,IAAI,cAAAC,EAAA,cAAAA,EAAA,GAAInB,QAAQ,CAACoB,QAAQ;EAE5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAwB,MAC9D,OAAOa,IAAI,KAAK,QAAQ,GAAGZ,KAAK,CAACwB,QAAQ,CAACZ,IAAI,EAAEO,IAAI,CAAC,GAAGM,SAAS,CACpE;EAED3B,SAAS,CAAC,MAAK;IACX,IAAI4B,uBAAuB,GAAG,KAAK;IACnC,IAAI,OAAOd,IAAI,KAAK,QAAQ,EAAE;MAC1B;MACA;MACA;MACA;MACA,MAAMe,eAAe,GAAG3B,KAAK,CAACwB,QAAQ,CAACZ,IAAI,EAAEO,IAAI,CAAC;MAElD,IAAIQ,eAAe,KAAKF,SAAS,EAAE;QAC/BF,YAAY,CAACI,eAAe,CAAC;MACjC,CAAC,MAAM,IAAIlB,QAAQ,EAAE;QACjBT,KAAK,CAAC4B,IAAI,CAAChB,IAAI,EAAEO,IAAI,CAAC,CACjBU,IAAI,CAAC,MAAK;UACP;UACA,IAAI,CAACH,uBAAuB,EAAE;YAC1BH,YAAY,CAACvB,KAAK,CAACwB,QAAQ,CAACZ,IAAI,EAAEO,IAAI,CAAC,CAAC;UAC5C;QACJ,CAAC,CAAC,CACDW,KAAK,CAACC,MAAM,IAAG;UACZC,OAAO,CAACC,KAAK,CAAC,qBAAqBrB,IAAI,MAAMO,IAAI,0BAA0B,EAAEY,MAAM,CAAC;QACxF,CAAC,CAAC;MACV,CAAC,MAAM;QACHC,OAAO,CAACC,KAAK,CACT,qBAAqBrB,IAAI,MAAMO,IAAI,wEAAwEP,IAAI,MAAMO,IAAI,IAAI,CAChI;MACL;IACJ;IACA,OAAO,MAAK;MACRO,uBAAuB,GAAG,IAAI;IAClC,CAAC;EACL,CAAC,EAAE,CAACjB,QAAQ,EAAEG,IAAI,EAAEO,IAAI,CAAC,CAAC;EAE1B,IAAIP,IAAI,IAAI,IAAI,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;IAC3C,OAAO,IAAI;EACf,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACjC,OAAOA,IAAI;EACf;EAEA,IAAIU,SAAS,IAAI,IAAI,EAAE;IACnB;IACA,MAAMY,SAAS,GACXf,IAAI,KAAKlB,QAAQ,CAACoB,QAAQ,GACpBlB,OAAO,CAACgC,aAAa,GACrBhB,IAAI,KAAKlB,QAAQ,CAACmC,KAAK,GACrBjC,OAAO,CAACkC,UAAU,GAClBZ,SAAS;IACrB,OAAO7B,aAAa,CAACkB,OAAO,IAAI,MAAM,EAAE;MACpC,aAAa,EAAEE,KAAK,GAAGS,SAAS,GAAG,IAAI;MACvC,GAAGpB,kBAAkB,CAACa,SAAS,CAAC;MAChCR,SAAS,EAAEf,UAAU,CACjBQ,OAAO,CAACmC,IAAI,EACZJ,SAAS,EACT/B,OAAO,CAACoC,SAAS,CAAC3B,IAAI,CAAC,EACvBT,OAAO,CAACqC,WAAW,CAAC3B,MAAM,CAAC,EAC3BH,SAAS,CACZ;MACD,WAAW,EAAEE,IAAI;MACjBJ,GAAG;MACHQ,KAAK,EAAEC;KACV,CAAC;EACN,CAAC,MAAM;IACH,MAAMwB,YAAY,GAAGnB,SAAS,CAACoB,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKC,IAAA;MAAMF,CAAC,EAAEA,CAAC;MAAUG,QAAQ,EAAC;IAAS,GAArBF,CAAC,CAAuB,CAAC;IACvF;IACA;IACA;IACA,OACIC,IAAA,CAAC3C,gBAAgB;MACb6C,QAAQ,EAAEN,YAAY;MACtB;MACA/B,SAAS,EAAEf,UAAU,CAACQ,OAAO,CAACqC,WAAW,CAAC3B,MAAM,CAAC,EAAEH,SAAS,CAAC;MAC7DC,KAAK,EAAEA,KAAK;MACZM,SAAS,EAAEA,SAAS;MACpB+B,QAAQ,EAAEpC,IAAI;MACdJ,GAAG,EAAEA,GAAG;MACRW,IAAI,EAAEA,IAAI;MACVJ,QAAQ,EAAEA,QAAQ;MAClBD,OAAO,EAAEA,OAAO;MAChBE,KAAK,EAAEA,KAAK;MAAA,GACRX,kBAAkB,CAACa,SAAS;IAAC,EACnC;EAEV;AACJ,CAAC,CAAC;AACFZ,IAAI,CAAC2C,WAAW,GAAG,GAAG7C,kBAAkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}