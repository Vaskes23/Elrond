{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useCallback, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Classes } from \"../../common\";\nimport { OverlaysProvider } from \"../../context/overlays/overlaysProvider\";\nimport { ContextMenuPopover } from \"./contextMenuPopover\";\n/** State which contains the context menu singleton instance for the imperative ContextMenu APIs. */\nlet contextMenuState;\n/**\n * Show a context menu at a particular offset from the top-left corner of the document.\n * The menu will appear below-right of this point and will flip to below-left if there is not enough\n * room onscreen. Additional props like `onClose`, `isDarkTheme`, etc. can be forwarded to the `<ContextMenuPopover>`.\n *\n * Context menus created with this API will automatically close when a user clicks outside the popover.\n * You may force them to close by using `hideContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution,\n * especially if your build system allows multiple copies of Blueprint libraries to be bundled into an application at\n * once.\n *\n * Alternative APIs to consider which do not have the limitations of global state:\n *  - `<ContextMenu>`\n *  - `<ContextMenuPopover>`\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function showContextMenu(props, options = {}) {\n  const {\n    container = document.body,\n    render = defaultDomRenderer\n  } = options;\n  if (contextMenuState == null) {\n    const element = document.createElement(\"div\");\n    element.classList.add(Classes.CONTEXT_MENU);\n    container.appendChild(element);\n    contextMenuState = {\n      element,\n      unmount: undefined\n    };\n  } else {\n    // N.B. It's important to unmount previous instances of the ContextMenuPopover rendered by this function.\n    // Otherwise, React will detect no change in props sent to the already-mounted component, and therefore\n    // do nothing after the first call to this function, leading to bugs like https://github.com/palantir/blueprint/issues/5949\n    contextMenuState.unmount();\n  }\n  contextMenuState.unmount = render(_jsx(OverlaysProvider, {\n    children: _jsx(UncontrolledContextMenuPopover, {\n      ...props\n    })\n  }), contextMenuState.element);\n}\nconst defaultDomRenderer = (element, container) => {\n  const root = createRoot(container);\n  root.render(element);\n  return () => root.unmount();\n};\n/**\n * Hide a context menu that was created using `showContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution.\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function hideContextMenu() {\n  contextMenuState === null || contextMenuState === void 0 ? void 0 : contextMenuState.unmount();\n  contextMenuState = undefined;\n}\n/**\n * A simple wrapper around `ContextMenuPopover` which is open by default and uncontrolled.\n * It closes when a user clicks outside the popover.\n */\nfunction UncontrolledContextMenuPopover({\n  onClose,\n  ...props\n}) {\n  const [isOpen, setIsOpen] = useState(true);\n  const handleClose = useCallback(() => {\n    setIsOpen(false);\n    onClose === null || onClose === void 0 ? void 0 : onClose();\n  }, [onClose]);\n  return _jsx(ContextMenuPopover, {\n    isOpen: isOpen,\n    ...props,\n    onClose: handleClose\n  });\n}","map":{"version":3,"names":["useCallback","useState","createRoot","Classes","OverlaysProvider","ContextMenuPopover","contextMenuState","showContextMenu","props","options","container","document","body","render","defaultDomRenderer","element","createElement","classList","add","CONTEXT_MENU","appendChild","unmount","undefined","_jsx","children","UncontrolledContextMenuPopover","root","hideContextMenu","onClose","isOpen","setIsOpen","handleClose"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/context-menu/contextMenuSingleton.tsx"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { Classes } from \"../../common\";\nimport { OverlaysProvider } from \"../../context/overlays/overlaysProvider\";\n\nimport { ContextMenuPopover, type ContextMenuPopoverProps } from \"./contextMenuPopover\";\n\n/**\n * Options for specifying how an imperatively created context menu should be rendered to the DOM.\n */\nexport interface ShowContextMenuOptions {\n    /**\n     * A new DOM element will be created and appended to this container.\n     *\n     * @default document.body\n     */\n    container?: HTMLElement;\n    /**\n     * A function render the React component onto a newly created DOM element. This should return a function which\n     * unmounts the rendered element from the DOM.\n     *\n     * By default this creates a react DOM client root, renders the element into that node and returns a function\n     * which unmounts the root.\n     */\n    render?: ShowContextMenuDOMRenderer;\n}\n\ntype ShowContextMenuDOMRenderer = (\n    element: React.ReactElement<ContextMenuPopoverProps>,\n    container: Element | DocumentFragment,\n) => ShowContextMenuDOMUnmounter;\n\ntype ShowContextMenuDOMUnmounter = () => void;\n\ninterface ContextMenuState {\n    element: HTMLElement;\n    unmount: () => void;\n}\n\n/** State which contains the context menu singleton instance for the imperative ContextMenu APIs. */\nlet contextMenuState: ContextMenuState | undefined;\n\n/**\n * Show a context menu at a particular offset from the top-left corner of the document.\n * The menu will appear below-right of this point and will flip to below-left if there is not enough\n * room onscreen. Additional props like `onClose`, `isDarkTheme`, etc. can be forwarded to the `<ContextMenuPopover>`.\n *\n * Context menus created with this API will automatically close when a user clicks outside the popover.\n * You may force them to close by using `hideContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution,\n * especially if your build system allows multiple copies of Blueprint libraries to be bundled into an application at\n * once.\n *\n * Alternative APIs to consider which do not have the limitations of global state:\n *  - `<ContextMenu>`\n *  - `<ContextMenuPopover>`\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\nexport function showContextMenu(props: Omit<ContextMenuPopoverProps, \"isOpen\">, options: ShowContextMenuOptions = {}) {\n    const { container = document.body, render = defaultDomRenderer } = options;\n\n    if (contextMenuState == null) {\n        const element = document.createElement(\"div\");\n        element.classList.add(Classes.CONTEXT_MENU);\n        container.appendChild(element);\n        contextMenuState = { element, unmount: undefined! };\n    } else {\n        // N.B. It's important to unmount previous instances of the ContextMenuPopover rendered by this function.\n        // Otherwise, React will detect no change in props sent to the already-mounted component, and therefore\n        // do nothing after the first call to this function, leading to bugs like https://github.com/palantir/blueprint/issues/5949\n        contextMenuState.unmount();\n    }\n\n    contextMenuState.unmount = render(\n        <OverlaysProvider>\n            <UncontrolledContextMenuPopover {...props} />\n        </OverlaysProvider>,\n        contextMenuState.element,\n    );\n}\n\nconst defaultDomRenderer: ShowContextMenuDOMRenderer = (element, container) => {\n    const root = createRoot(container);\n    root.render(element);\n    return () => root.unmount();\n};\n\n/**\n * Hide a context menu that was created using `showContextMenu()`.\n *\n * Note that this API relies on global state in the @blueprintjs/core package, and should be used with caution.\n *\n * @see https://blueprintjs.com/docs/#core/components/context-menu-popover.imperative-api\n */\n\nexport function hideContextMenu() {\n    contextMenuState?.unmount();\n    contextMenuState = undefined;\n}\n\n/**\n * A simple wrapper around `ContextMenuPopover` which is open by default and uncontrolled.\n * It closes when a user clicks outside the popover.\n */\nfunction UncontrolledContextMenuPopover({ onClose, ...props }: Omit<ContextMenuPopoverProps, \"isOpen\">) {\n    const [isOpen, setIsOpen] = useState(true);\n    const handleClose = useCallback(() => {\n        setIsOpen(false);\n        onClose?.();\n    }, [onClose]);\n\n    return <ContextMenuPopover isOpen={isOpen} {...props} onClose={handleClose} />;\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,gBAAgB,QAAQ,yCAAyC;AAE1E,SAASC,kBAAkB,QAAsC,sBAAsB;AAkCvF;AACA,IAAIC,gBAA8C;AAElD;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,eAAeA,CAACC,KAA8C,EAAEC,OAAA,GAAkC,EAAE;EAChH,MAAM;IAAEC,SAAS,GAAGC,QAAQ,CAACC,IAAI;IAAEC,MAAM,GAAGC;EAAkB,CAAE,GAAGL,OAAO;EAE1E,IAAIH,gBAAgB,IAAI,IAAI,EAAE;IAC1B,MAAMS,OAAO,GAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC;IAC7CD,OAAO,CAACE,SAAS,CAACC,GAAG,CAACf,OAAO,CAACgB,YAAY,CAAC;IAC3CT,SAAS,CAACU,WAAW,CAACL,OAAO,CAAC;IAC9BT,gBAAgB,GAAG;MAAES,OAAO;MAAEM,OAAO,EAAEC;IAAU,CAAE;EACvD,CAAC,MAAM;IACH;IACA;IACA;IACAhB,gBAAgB,CAACe,OAAO,EAAE;EAC9B;EAEAf,gBAAgB,CAACe,OAAO,GAAGR,MAAM,CAC7BU,IAAA,CAACnB,gBAAgB;IAAAoB,QAAA,EACbD,IAAA,CAACE,8BAA8B;MAAA,GAAKjB;IAAK;EAAI,EAC9B,EACnBF,gBAAgB,CAACS,OAAO,CAC3B;AACL;AAEA,MAAMD,kBAAkB,GAA+BA,CAACC,OAAO,EAAEL,SAAS,KAAI;EAC1E,MAAMgB,IAAI,GAAGxB,UAAU,CAACQ,SAAS,CAAC;EAClCgB,IAAI,CAACb,MAAM,CAACE,OAAO,CAAC;EACpB,OAAO,MAAMW,IAAI,CAACL,OAAO,EAAE;AAC/B,CAAC;AAED;;;;;;;AAQA,OAAM,SAAUM,eAAeA,CAAA;EAC3BrB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEe,OAAO,EAAE;EAC3Bf,gBAAgB,GAAGgB,SAAS;AAChC;AAEA;;;;AAIA,SAASG,8BAA8BA,CAAC;EAAEG,OAAO;EAAE,GAAGpB;AAAK,CAA2C;EAClG,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM8B,WAAW,GAAG/B,WAAW,CAAC,MAAK;IACjC8B,SAAS,CAAC,KAAK,CAAC;IAChBF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,EAAI;EACf,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,OAAOL,IAAA,CAAClB,kBAAkB;IAACwB,MAAM,EAAEA,MAAM;IAAA,GAAMrB,KAAK;IAAEoB,OAAO,EAAEG;EAAW,EAAI;AAClF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}