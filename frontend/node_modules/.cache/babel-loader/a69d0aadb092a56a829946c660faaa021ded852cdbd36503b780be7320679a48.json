{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { Children, Component } from \"react\";\nimport { ChevronRight } from \"@blueprintjs/icons\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon } from \"../icon/icon\";\n/**\n * Tree node component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree.tree-node\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport class TreeNode extends Component {\n  constructor() {\n    super(...arguments);\n    this.handleCaretClick = e => {\n      var _a;\n      e.stopPropagation();\n      const {\n        isExpanded,\n        onCollapse,\n        onExpand\n      } = this.props;\n      (_a = isExpanded ? onCollapse : onExpand) === null || _a === void 0 ? void 0 : _a(this.props, this.props.path, e);\n    };\n    this.handleClick = e => {\n      var _a, _b;\n      (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, this.props.path, e);\n    };\n    this.handleContentRef = element => {\n      var _a, _b;\n      (_b = (_a = this.props).contentRef) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, element);\n    };\n    this.handleContextMenu = e => {\n      var _a, _b;\n      (_b = (_a = this.props).onContextMenu) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, this.props.path, e);\n    };\n    this.handleDoubleClick = e => {\n      var _a, _b;\n      (_b = (_a = this.props).onDoubleClick) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, this.props.path, e);\n    };\n    this.handleMouseEnter = e => {\n      var _a, _b;\n      (_b = (_a = this.props).onMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, this.props.path, e);\n    };\n    this.handleMouseLeave = e => {\n      var _a, _b;\n      (_b = (_a = this.props).onMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a, this.props, this.props.path, e);\n    };\n  }\n  /** @deprecated no longer necessary now that the TypeScript parser supports type arguments on JSX element tags */\n  static ofType() {\n    return TreeNode;\n  }\n  render() {\n    const {\n      children,\n      className,\n      disabled,\n      icon,\n      isExpanded,\n      isSelected,\n      label\n    } = this.props;\n    const classes = classNames(Classes.TREE_NODE, {\n      [Classes.DISABLED]: disabled,\n      [Classes.TREE_NODE_SELECTED]: isSelected,\n      [Classes.TREE_NODE_EXPANDED]: isExpanded\n    }, className);\n    const contentClasses = classNames(Classes.TREE_NODE_CONTENT, `${Classes.TREE_NODE_CONTENT}-${this.props.depth}`);\n    const eventHandlers = disabled === true ? {} : {\n      onClick: this.handleClick,\n      onContextMenu: this.handleContextMenu,\n      onDoubleClick: this.handleDoubleClick,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    };\n    return _jsxs(\"li\", {\n      className: classes,\n      children: [_jsxs(\"div\", {\n        className: contentClasses,\n        ref: this.handleContentRef,\n        ...eventHandlers,\n        children: [this.maybeRenderCaret(), _jsx(Icon, {\n          className: Classes.TREE_NODE_ICON,\n          icon: icon,\n          \"aria-hidden\": true,\n          tabIndex: -1\n        }), _jsx(\"span\", {\n          className: Classes.TREE_NODE_LABEL,\n          children: label\n        }), this.maybeRenderSecondaryLabel()]\n      }), _jsx(Collapse, {\n        isOpen: isExpanded,\n        children: children\n      })]\n    });\n  }\n  maybeRenderCaret() {\n    const {\n      children,\n      isExpanded,\n      disabled,\n      hasCaret = Children.count(children) > 0\n    } = this.props;\n    if (hasCaret) {\n      const caretClasses = classNames(Classes.TREE_NODE_CARET, isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED);\n      return _jsx(ChevronRight, {\n        title: isExpanded ? \"Collapse group\" : \"Expand group\",\n        className: caretClasses,\n        onClick: disabled === true ? undefined : this.handleCaretClick\n      });\n    }\n    return _jsx(\"span\", {\n      className: Classes.TREE_NODE_CARET_NONE\n    });\n  }\n  maybeRenderSecondaryLabel() {\n    if (this.props.secondaryLabel != null) {\n      return _jsx(\"span\", {\n        className: Classes.TREE_NODE_SECONDARY_LABEL,\n        children: this.props.secondaryLabel\n      });\n    } else {\n      return undefined;\n    }\n  }\n}\nTreeNode.displayName = `${DISPLAYNAME_PREFIX}.TreeNode`;","map":{"version":3,"names":["classNames","Children","Component","ChevronRight","Classes","DISPLAYNAME_PREFIX","Collapse","Icon","TreeNode","constructor","handleCaretClick","e","stopPropagation","isExpanded","onCollapse","onExpand","props","_a","path","handleClick","_b","onClick","call","handleContentRef","element","contentRef","handleContextMenu","onContextMenu","handleDoubleClick","onDoubleClick","handleMouseEnter","onMouseEnter","handleMouseLeave","onMouseLeave","ofType","render","children","className","disabled","icon","isSelected","label","classes","TREE_NODE","DISABLED","TREE_NODE_SELECTED","TREE_NODE_EXPANDED","contentClasses","TREE_NODE_CONTENT","depth","eventHandlers","_jsxs","ref","maybeRenderCaret","_jsx","TREE_NODE_ICON","tabIndex","TREE_NODE_LABEL","maybeRenderSecondaryLabel","isOpen","hasCaret","count","caretClasses","TREE_NODE_CARET","TREE_NODE_CARET_OPEN","TREE_NODE_CARET_CLOSED","title","undefined","TREE_NODE_CARET_NONE","secondaryLabel","TREE_NODE_SECONDARY_LABEL","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/tree/treeNode.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { Children, Component } from \"react\";\n\nimport { ChevronRight } from \"@blueprintjs/icons\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon } from \"../icon/icon\";\n\nimport type { TreeEventHandler, TreeNodeInfo } from \"./treeTypes\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface TreeNodeProps<T = {}> extends TreeNodeInfo<T> {\n    children?: React.ReactNode;\n    contentRef?: (node: TreeNodeInfo<T>, element: HTMLDivElement | null) => void;\n    depth: number;\n    key?: string | number;\n    onClick?: TreeEventHandler<T>;\n    onCollapse?: TreeEventHandler<T>;\n    onContextMenu?: TreeEventHandler<T>;\n    onDoubleClick?: TreeEventHandler<T>;\n    onExpand?: TreeEventHandler<T>;\n    onMouseEnter?: TreeEventHandler<T>;\n    onMouseLeave?: TreeEventHandler<T>;\n    path: number[];\n}\n\n/**\n * Tree node component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree.tree-node\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport class TreeNode<T = {}> extends Component<TreeNodeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TreeNode`;\n\n    /** @deprecated no longer necessary now that the TypeScript parser supports type arguments on JSX element tags */\n    public static ofType<U>() {\n        return TreeNode as new (props: TreeNodeProps<U>) => TreeNode<U>;\n    }\n\n    public render() {\n        const { children, className, disabled, icon, isExpanded, isSelected, label } = this.props;\n        const classes = classNames(\n            Classes.TREE_NODE,\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.TREE_NODE_SELECTED]: isSelected,\n                [Classes.TREE_NODE_EXPANDED]: isExpanded,\n            },\n            className,\n        );\n\n        const contentClasses = classNames(\n            Classes.TREE_NODE_CONTENT,\n            `${Classes.TREE_NODE_CONTENT}-${this.props.depth}`,\n        );\n\n        const eventHandlers =\n            disabled === true\n                ? {}\n                : {\n                      onClick: this.handleClick,\n                      onContextMenu: this.handleContextMenu,\n                      onDoubleClick: this.handleDoubleClick,\n                      onMouseEnter: this.handleMouseEnter,\n                      onMouseLeave: this.handleMouseLeave,\n                  };\n\n        return (\n            <li className={classes}>\n                <div className={contentClasses} ref={this.handleContentRef} {...eventHandlers}>\n                    {this.maybeRenderCaret()}\n                    <Icon className={Classes.TREE_NODE_ICON} icon={icon} aria-hidden={true} tabIndex={-1} />\n                    <span className={Classes.TREE_NODE_LABEL}>{label}</span>\n                    {this.maybeRenderSecondaryLabel()}\n                </div>\n                <Collapse isOpen={isExpanded}>{children}</Collapse>\n            </li>\n        );\n    }\n\n    private maybeRenderCaret() {\n        const { children, isExpanded, disabled, hasCaret = Children.count(children) > 0 } = this.props;\n        if (hasCaret) {\n            const caretClasses = classNames(\n                Classes.TREE_NODE_CARET,\n                isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED,\n            );\n            return (\n                <ChevronRight\n                    title={isExpanded ? \"Collapse group\" : \"Expand group\"}\n                    className={caretClasses}\n                    onClick={disabled === true ? undefined : this.handleCaretClick}\n                />\n            );\n        }\n        return <span className={Classes.TREE_NODE_CARET_NONE} />;\n    }\n\n    private maybeRenderSecondaryLabel() {\n        if (this.props.secondaryLabel != null) {\n            return <span className={Classes.TREE_NODE_SECONDARY_LABEL}>{this.props.secondaryLabel}</span>;\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleCaretClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.stopPropagation();\n        const { isExpanded, onCollapse, onExpand } = this.props;\n        (isExpanded ? onCollapse : onExpand)?.(this.props, this.props.path, e);\n    };\n\n    private handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onClick?.(this.props, this.props.path, e);\n    };\n\n    private handleContentRef = (element: HTMLDivElement | null) => {\n        this.props.contentRef?.(this.props, element);\n    };\n\n    private handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onContextMenu?.(this.props, this.props.path, e);\n    };\n\n    private handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onDoubleClick?.(this.props, this.props.path, e);\n    };\n\n    private handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseEnter?.(this.props, this.props.path, e);\n    };\n\n    private handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseLeave?.(this.props, this.props.path, e);\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}