{"ast":null,"code":"/*\n * Copyright 2019 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component } from \"react\";\nimport { isNodeEnv } from \"./utils\";\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport class AbstractComponent extends Component {\n  constructor(props) {\n    super(props);\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    this.timeoutIds = [];\n    this.requestIds = [];\n    /**\n     * Clear all known timeouts.\n     */\n    this.clearTimeouts = () => {\n      if (this.timeoutIds.length > 0) {\n        for (const timeoutId of this.timeoutIds) {\n          window.clearTimeout(timeoutId);\n        }\n        this.timeoutIds = [];\n      }\n    };\n    /**\n     * Clear all known animation frame requests.\n     */\n    this.cancelAnimationFrames = () => {\n      if (this.requestIds.length > 0) {\n        for (const requestId of this.requestIds) {\n          window.cancelAnimationFrame(requestId);\n        }\n        this.requestIds = [];\n      }\n    };\n    if (!isNodeEnv(\"production\")) {\n      this.validateProps(this.props);\n    }\n  }\n  componentDidUpdate(_prevProps, _prevState, _snapshot) {\n    if (!isNodeEnv(\"production\")) {\n      this.validateProps(this.props);\n    }\n  }\n  componentWillUnmount() {\n    this.clearTimeouts();\n    this.cancelAnimationFrames();\n  }\n  /**\n   * Request an animation frame and remember its ID.\n   * All pending requests will be canceled when component unmounts.\n   *\n   * @returns a \"cancel\" function that will cancel the request when invoked.\n   */\n  requestAnimationFrame(callback) {\n    const handle = window.requestAnimationFrame(callback);\n    this.requestIds.push(handle);\n    return () => window.cancelAnimationFrame(handle);\n  }\n  /**\n   * Set a timeout and remember its ID.\n   * All stored timeouts will be cleared when component unmounts.\n   *\n   * @returns a \"cancel\" function that will clear timeout when invoked.\n   */\n  setTimeout(callback, timeout) {\n    const handle = window.setTimeout(callback, timeout);\n    this.timeoutIds.push(handle);\n    return () => window.clearTimeout(handle);\n  }\n  /**\n   * Ensures that the props specified for a component are valid.\n   * Implementations should check that props are valid and usually throw an Error if they are not.\n   * Implementations should not duplicate checks that the type system already guarantees.\n   *\n   * This method should be used instead of React's\n   * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n   * Like propTypes, these runtime checks run only in development mode.\n   */\n  validateProps(_props) {\n    // implement in subclass\n  }\n}","map":{"version":3,"names":["Component","isNodeEnv","AbstractComponent","constructor","props","timeoutIds","requestIds","clearTimeouts","length","timeoutId","window","clearTimeout","cancelAnimationFrames","requestId","cancelAnimationFrame","validateProps","componentDidUpdate","_prevProps","_prevState","_snapshot","componentWillUnmount","requestAnimationFrame","callback","handle","push","setTimeout","timeout","_props"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/common/abstractComponent.ts"],"sourcesContent":["/*\n * Copyright 2019 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component } from \"react\";\n\nimport { isNodeEnv } from \"./utils\";\n\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport abstract class AbstractComponent<P, S = {}, SS = {}> extends Component<P, S, SS> {\n    // unsafe lifecycle methods\n    public componentWillUpdate!: never;\n\n    public componentWillReceiveProps!: never;\n\n    public componentWillMount!: never;\n\n    // this should be static, not an instance method\n    public getDerivedStateFromProps!: never;\n\n    /** Component displayName should be `public static`. This property exists to prevent incorrect usage. */\n    protected displayName!: never;\n\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    private timeoutIds: number[] = [];\n\n    private requestIds: number[] = [];\n\n    constructor(props: P) {\n        super(props);\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(this.props);\n        }\n    }\n\n    public componentDidUpdate(_prevProps: P, _prevState: S, _snapshot?: SS) {\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(this.props);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.clearTimeouts();\n        this.cancelAnimationFrames();\n    }\n\n    /**\n     * Request an animation frame and remember its ID.\n     * All pending requests will be canceled when component unmounts.\n     *\n     * @returns a \"cancel\" function that will cancel the request when invoked.\n     */\n    public requestAnimationFrame(callback: () => void) {\n        const handle = window.requestAnimationFrame(callback);\n        this.requestIds.push(handle);\n        return () => window.cancelAnimationFrame(handle);\n    }\n\n    /**\n     * Set a timeout and remember its ID.\n     * All stored timeouts will be cleared when component unmounts.\n     *\n     * @returns a \"cancel\" function that will clear timeout when invoked.\n     */\n    public setTimeout(callback: () => void, timeout?: number) {\n        const handle = window.setTimeout(callback, timeout);\n        this.timeoutIds.push(handle);\n        return () => window.clearTimeout(handle);\n    }\n\n    /**\n     * Clear all known timeouts.\n     */\n    public clearTimeouts = () => {\n        if (this.timeoutIds.length > 0) {\n            for (const timeoutId of this.timeoutIds) {\n                window.clearTimeout(timeoutId);\n            }\n            this.timeoutIds = [];\n        }\n    };\n\n    /**\n     * Clear all known animation frame requests.\n     */\n    public cancelAnimationFrames = () => {\n        if (this.requestIds.length > 0) {\n            for (const requestId of this.requestIds) {\n                window.cancelAnimationFrame(requestId);\n            }\n            this.requestIds = [];\n        }\n    };\n\n    /**\n     * Ensures that the props specified for a component are valid.\n     * Implementations should check that props are valid and usually throw an Error if they are not.\n     * Implementations should not duplicate checks that the type system already guarantees.\n     *\n     * This method should be used instead of React's\n     * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n     * Like propTypes, these runtime checks run only in development mode.\n     */\n    protected validateProps(_props: P) {\n        // implement in subclass\n    }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,SAAS,QAAQ,SAAS;AAEnC;;;;AAIA;AACA,OAAM,MAAgBC,iBAAsC,SAAQF,SAAmB;EAmBnFG,YAAYC,KAAQ;IAChB,KAAK,CAACA,KAAK,CAAC;IANhB;IACQ,KAAAC,UAAU,GAAa,EAAE;IAEzB,KAAAC,UAAU,GAAa,EAAE;IA4CjC;;;IAGO,KAAAC,aAAa,GAAG,MAAK;MACxB,IAAI,IAAI,CAACF,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;QAC5B,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACJ,UAAU,EAAE;UACrCK,MAAM,CAACC,YAAY,CAACF,SAAS,CAAC;QAClC;QACA,IAAI,CAACJ,UAAU,GAAG,EAAE;MACxB;IACJ,CAAC;IAED;;;IAGO,KAAAO,qBAAqB,GAAG,MAAK;MAChC,IAAI,IAAI,CAACN,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;QAC5B,KAAK,MAAMK,SAAS,IAAI,IAAI,CAACP,UAAU,EAAE;UACrCI,MAAM,CAACI,oBAAoB,CAACD,SAAS,CAAC;QAC1C;QACA,IAAI,CAACP,UAAU,GAAG,EAAE;MACxB;IACJ,CAAC;IA9DG,IAAI,CAACL,SAAS,CAAC,YAAY,CAAC,EAAE;MAC1B,IAAI,CAACc,aAAa,CAAC,IAAI,CAACX,KAAK,CAAC;IAClC;EACJ;EAEOY,kBAAkBA,CAACC,UAAa,EAAEC,UAAa,EAAEC,SAAc;IAClE,IAAI,CAAClB,SAAS,CAAC,YAAY,CAAC,EAAE;MAC1B,IAAI,CAACc,aAAa,CAAC,IAAI,CAACX,KAAK,CAAC;IAClC;EACJ;EAEOgB,oBAAoBA,CAAA;IACvB,IAAI,CAACb,aAAa,EAAE;IACpB,IAAI,CAACK,qBAAqB,EAAE;EAChC;EAEA;;;;;;EAMOS,qBAAqBA,CAACC,QAAoB;IAC7C,MAAMC,MAAM,GAAGb,MAAM,CAACW,qBAAqB,CAACC,QAAQ,CAAC;IACrD,IAAI,CAAChB,UAAU,CAACkB,IAAI,CAACD,MAAM,CAAC;IAC5B,OAAO,MAAMb,MAAM,CAACI,oBAAoB,CAACS,MAAM,CAAC;EACpD;EAEA;;;;;;EAMOE,UAAUA,CAACH,QAAoB,EAAEI,OAAgB;IACpD,MAAMH,MAAM,GAAGb,MAAM,CAACe,UAAU,CAACH,QAAQ,EAAEI,OAAO,CAAC;IACnD,IAAI,CAACrB,UAAU,CAACmB,IAAI,CAACD,MAAM,CAAC;IAC5B,OAAO,MAAMb,MAAM,CAACC,YAAY,CAACY,MAAM,CAAC;EAC5C;EA0BA;;;;;;;;;EASUR,aAAaA,CAACY,MAAS;IAC7B;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}