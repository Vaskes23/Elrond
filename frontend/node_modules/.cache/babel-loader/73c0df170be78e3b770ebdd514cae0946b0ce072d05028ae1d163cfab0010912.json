{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\n/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { Children, cloneElement, useCallback, useMemo } from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { isElementOfType, uniqueId } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { RadioCard } from \"../control-card/radioCard\";\nimport { Radio } from \"./controls\";\n/**\n * Radio group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio.radiogroup\n */\nexport const RadioGroup = props => {\n  const {\n    children,\n    className,\n    disabled,\n    inline,\n    label,\n    name,\n    onChange,\n    options,\n    selectedValue,\n    ...htmlProps\n  } = props;\n  // a unique name for this group, which can be overridden by `name` prop.\n  const autoGroupName = useMemo(() => nextName(), []);\n  const labelId = useMemo(() => uniqueId(\"label\"), []);\n  useValidateProps(() => {\n    if (children != null && options != null) {\n      console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n    }\n  }, [children, options]);\n  const getRadioProps = useCallback(optionProps => {\n    const {\n      className: optionClassName,\n      disabled: optionDisabled,\n      value\n    } = optionProps;\n    return {\n      checked: value === selectedValue,\n      className: optionClassName,\n      disabled: optionDisabled || disabled,\n      inline,\n      name: name == null ? autoGroupName : name,\n      onChange,\n      value\n    };\n  }, [autoGroupName, disabled, inline, name, onChange, selectedValue]);\n  const renderChildren = () => {\n    return Children.map(children, child => {\n      if (isElementOfType(child, Radio) || isElementOfType(child, RadioCard)) {\n        return cloneElement(\n        // Need this cast here to suppress a TS error caused by differing `ref` types for the Radio and\n        // RadioCard components. We aren't injecting a ref, so we don't need to be strict about that\n        // incompatibility.\n        child, getRadioProps(child.props));\n      }\n      return child;\n    });\n  };\n  const renderOptions = () => {\n    return options === null || options === void 0 ? void 0 : options.map(option => _createElement(Radio, {\n      ...getRadioProps(option),\n      key: option.value,\n      labelElement: option.label || option.value\n    }));\n  };\n  return _jsxs(\"div\", {\n    role: \"radiogroup\",\n    \"aria-labelledby\": label ? labelId : undefined,\n    ...removeNonHTMLProps(htmlProps),\n    className: classNames(Classes.RADIO_GROUP, className),\n    children: [label && _jsx(\"label\", {\n      className: Classes.LABEL,\n      id: labelId,\n      children: label\n    }), Array.isArray(options) ? renderOptions() : renderChildren()]\n  });\n};\nRadioGroup.displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\nlet counter = 0;\nfunction nextName() {\n  return `${RadioGroup.displayName}-${counter++}`;\n}","map":{"version":3,"names":["classNames","Children","cloneElement","useCallback","useMemo","Classes","DISPLAYNAME_PREFIX","removeNonHTMLProps","Errors","isElementOfType","uniqueId","useValidateProps","RadioCard","Radio","RadioGroup","props","children","className","disabled","inline","label","name","onChange","options","selectedValue","htmlProps","autoGroupName","nextName","labelId","console","warn","RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX","getRadioProps","optionProps","optionClassName","optionDisabled","value","checked","renderChildren","map","child","renderOptions","option","_createElement","key","labelElement","_jsxs","role","undefined","RADIO_GROUP","_jsx","LABEL","id","Array","isArray","displayName","counter"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/forms/radioGroup.tsx"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { Children, cloneElement, useCallback, useMemo } from \"react\";\n\nimport {\n    Classes,\n    DISPLAYNAME_PREFIX,\n    type HTMLDivProps,\n    type OptionProps,\n    type Props,\n    removeNonHTMLProps,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { isElementOfType, uniqueId } from \"../../common/utils\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { RadioCard } from \"../control-card/radioCard\";\n\nimport type { ControlProps } from \"./controlProps\";\nimport { Radio, type RadioProps } from \"./controls\";\n\nexport interface RadioGroupProps extends Props, HTMLDivProps {\n    /**\n     * Radio elements. This prop is mutually exclusive with `options`.\n     * If passing custom children, ensure options have `role=\"radio\"` or\n     * `input` with `type=\"radio\"`.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the radio buttons are to be displayed inline horizontally.\n     */\n    inline?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: React.ReactNode;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group. This prop is mutually exclusive\n     * with `children`: either provide an array of `OptionProps` objects or\n     * provide `<Radio>` children elements.\n     */\n    options?: readonly OptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string | number;\n}\n\n/**\n * Radio group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio.radiogroup\n */\nexport const RadioGroup: React.FC<RadioGroupProps> = props => {\n    const { children, className, disabled, inline, label, name, onChange, options, selectedValue, ...htmlProps } =\n        props;\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    const autoGroupName = useMemo(() => nextName(), []);\n\n    const labelId = useMemo(() => uniqueId(\"label\"), []);\n\n    useValidateProps(() => {\n        if (children != null && options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }, [children, options]);\n\n    const getRadioProps = useCallback(\n        (optionProps: OptionProps): Omit<RadioProps, \"ref\"> => {\n            const { className: optionClassName, disabled: optionDisabled, value } = optionProps;\n            return {\n                checked: value === selectedValue,\n                className: optionClassName,\n                disabled: optionDisabled || disabled,\n                inline,\n                name: name == null ? autoGroupName : name,\n                onChange,\n                value,\n            };\n        },\n        [autoGroupName, disabled, inline, name, onChange, selectedValue],\n    );\n\n    const renderChildren = () => {\n        return Children.map(children, child => {\n            if (isElementOfType(child, Radio) || isElementOfType(child, RadioCard)) {\n                return cloneElement(\n                    // Need this cast here to suppress a TS error caused by differing `ref` types for the Radio and\n                    // RadioCard components. We aren't injecting a ref, so we don't need to be strict about that\n                    // incompatibility.\n                    child as React.ReactElement<ControlProps>,\n                    getRadioProps(child.props as OptionProps),\n                );\n            }\n            return child;\n        });\n    };\n\n    const renderOptions = () => {\n        return options?.map(option => (\n            <Radio {...getRadioProps(option)} key={option.value} labelElement={option.label || option.value} />\n        ));\n    };\n\n    return (\n        <div\n            role=\"radiogroup\"\n            aria-labelledby={label ? labelId : undefined}\n            {...removeNonHTMLProps(htmlProps)}\n            className={classNames(Classes.RADIO_GROUP, className)}\n        >\n            {label && (\n                <label className={Classes.LABEL} id={labelId}>\n                    {label}\n                </label>\n            )}\n            {Array.isArray(options) ? renderOptions() : renderChildren()}\n        </div>\n    );\n};\n\nRadioGroup.displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\n\nlet counter = 0;\nfunction nextName() {\n    return `${RadioGroup.displayName}-${counter++}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}