{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { useCallback } from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { ALERT_WARN_CANCEL_ESCAPE_KEY, ALERT_WARN_CANCEL_OUTSIDE_CLICK, ALERT_WARN_CANCEL_PROPS } from \"../../common/errors\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon } from \"../icon/icon\";\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport const Alert = props => {\n  const {\n    cancelButtonText,\n    canEscapeKeyCancel = false,\n    canOutsideClickCancel = false,\n    children,\n    className,\n    confirmButtonText = \"OK\",\n    icon,\n    intent,\n    isOpen = false,\n    loading = false,\n    onCancel,\n    onClose,\n    onConfirm,\n    ...overlayProps\n  } = props;\n  useValidateProps(() => {\n    if (onClose == null && cancelButtonText == null !== (onCancel == null)) {\n      console.warn(ALERT_WARN_CANCEL_PROPS);\n    }\n    const hasCancelHandler = onCancel != null || onClose != null;\n    if (canEscapeKeyCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n    }\n    if (canOutsideClickCancel && !hasCancelHandler) {\n      console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n    }\n  }, [canEscapeKeyCancel, canOutsideClickCancel, cancelButtonText, onCancel, onClose]);\n  const internalHandleCallbacks = useCallback((confirmed, event) => {\n    var _a;\n    (_a = confirmed ? onConfirm : onCancel) === null || _a === void 0 ? void 0 : _a(event);\n    onClose === null || onClose === void 0 ? void 0 : onClose(confirmed, event);\n  }, [onCancel, onClose, onConfirm]);\n  const handleCancel = useCallback(event => internalHandleCallbacks(false, event), [internalHandleCallbacks]);\n  const handleConfirm = useCallback(event => internalHandleCallbacks(true, event), [internalHandleCallbacks]);\n  return _jsxs(Dialog, {\n    ...overlayProps,\n    role: \"alertdialog\",\n    className: classNames(Classes.ALERT, className),\n    canEscapeKeyClose: canEscapeKeyCancel,\n    canOutsideClickClose: canOutsideClickCancel,\n    isOpen: isOpen,\n    onClose: handleCancel,\n    children: [_jsxs(\"div\", {\n      className: Classes.ALERT_BODY,\n      children: [_jsx(Icon, {\n        icon: icon,\n        size: 40,\n        intent: intent\n      }), _jsx(\"div\", {\n        className: Classes.ALERT_CONTENTS,\n        children: children\n      })]\n    }), _jsxs(\"div\", {\n      className: Classes.ALERT_FOOTER,\n      children: [_jsx(Button, {\n        loading: loading,\n        intent: intent,\n        text: confirmButtonText,\n        onClick: handleConfirm\n      }), cancelButtonText && _jsx(Button, {\n        text: cancelButtonText,\n        disabled: loading,\n        onClick: handleCancel\n      })]\n    })]\n  });\n};\nAlert.displayName = `${DISPLAYNAME_PREFIX}.Alert`;","map":{"version":3,"names":["classNames","useCallback","Classes","DISPLAYNAME_PREFIX","ALERT_WARN_CANCEL_ESCAPE_KEY","ALERT_WARN_CANCEL_OUTSIDE_CLICK","ALERT_WARN_CANCEL_PROPS","useValidateProps","Button","Dialog","Icon","Alert","props","cancelButtonText","canEscapeKeyCancel","canOutsideClickCancel","children","className","confirmButtonText","icon","intent","isOpen","loading","onCancel","onClose","onConfirm","overlayProps","console","warn","hasCancelHandler","internalHandleCallbacks","confirmed","event","_a","handleCancel","handleConfirm","_jsxs","role","ALERT","canEscapeKeyClose","canOutsideClickClose","ALERT_BODY","_jsx","size","ALERT_CONTENTS","ALERT_FOOTER","text","onClick","disabled","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/alert/alert.tsx"],"sourcesContent":["/*\n * Copyright 2025 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { useCallback } from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX, type Intent, type MaybeElement, type Props } from \"../../common\";\nimport {\n    ALERT_WARN_CANCEL_ESCAPE_KEY,\n    ALERT_WARN_CANCEL_OUTSIDE_CLICK,\n    ALERT_WARN_CANCEL_PROPS,\n} from \"../../common/errors\";\nimport { useValidateProps } from \"../../hooks/useValidateProps\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon, type IconName } from \"../icon/icon\";\nimport type { OverlayLifecycleProps } from \"../overlay/overlayProps\";\n\nexport interface AlertProps extends OverlayLifecycleProps, Props {\n    /**\n     * Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canEscapeKeyCancel?: boolean;\n\n    /**\n     * Whether clicking outside the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canOutsideClickCancel?: boolean;\n\n    /**\n     * The text for the cancel button.\n     * If this prop is defined, then either `onCancel` or `onClose` must also be defined.\n     */\n    cancelButtonText?: string;\n\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * The text for the confirm (right-most) button.\n     * This button will always appear, and uses the value of the `intent` prop below.\n     *\n     * @default \"OK\"\n     */\n    confirmButtonText?: string;\n\n    /** Name of a Blueprint UI icon (or an icon element) to display on the left side. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * The intent to be applied to the confirm (right-most) button and the icon (if provided).\n     */\n    intent?: Intent;\n\n    /**\n     * Toggles the visibility of the alert.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * If set to `true`, the confirm button will be set to its loading state. The cancel button, if\n     * visible, will be disabled.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * CSS styles to apply to the alert.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n     * - clicking the cancel button (if `cancelButtonText` is defined)\n     * - pressing the escape key (if `canEscapeKeyCancel` is enabled)\n     * - clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n     *\n     * If any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.\n     */\n    onCancel?: (event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n     * - clicking the confirm button\n     * - focusing on the confirm button and pressing `enter` or `space`\n     */\n    onConfirm?: (event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\n     * First argument is `true` if confirmed, `false` otherwise.\n     * This is an alternative to defining separate `onConfirm` and `onCancel` handlers.\n     */\n    onClose?: (confirmed: boolean, event?: React.SyntheticEvent<HTMLElement>) => void;\n}\n\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport const Alert: React.FC<AlertProps> = props => {\n    const {\n        cancelButtonText,\n        canEscapeKeyCancel = false,\n        canOutsideClickCancel = false,\n        children,\n        className,\n        confirmButtonText = \"OK\",\n        icon,\n        intent,\n        isOpen = false,\n        loading = false,\n        onCancel,\n        onClose,\n        onConfirm,\n        ...overlayProps\n    } = props;\n\n    useValidateProps(() => {\n        if (onClose == null && (cancelButtonText == null) !== (onCancel == null)) {\n            console.warn(ALERT_WARN_CANCEL_PROPS);\n        }\n\n        const hasCancelHandler = onCancel != null || onClose != null;\n        if (canEscapeKeyCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n        }\n        if (canOutsideClickCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n        }\n    }, [canEscapeKeyCancel, canOutsideClickCancel, cancelButtonText, onCancel, onClose]);\n\n    const internalHandleCallbacks = useCallback(\n        (confirmed: boolean, event?: React.SyntheticEvent<HTMLElement>) => {\n            (confirmed ? onConfirm : onCancel)?.(event);\n            onClose?.(confirmed, event);\n        },\n        [onCancel, onClose, onConfirm],\n    );\n\n    const handleCancel = useCallback(\n        (event?: React.SyntheticEvent<HTMLElement>) => internalHandleCallbacks(false, event),\n        [internalHandleCallbacks],\n    );\n\n    const handleConfirm = useCallback(\n        (event: React.SyntheticEvent<HTMLElement>) => internalHandleCallbacks(true, event),\n        [internalHandleCallbacks],\n    );\n\n    return (\n        <Dialog\n            {...overlayProps}\n            role=\"alertdialog\"\n            className={classNames(Classes.ALERT, className)}\n            canEscapeKeyClose={canEscapeKeyCancel}\n            canOutsideClickClose={canOutsideClickCancel}\n            isOpen={isOpen}\n            onClose={handleCancel}\n        >\n            <div className={Classes.ALERT_BODY}>\n                <Icon icon={icon} size={40} intent={intent} />\n                <div className={Classes.ALERT_CONTENTS}>{children}</div>\n            </div>\n            <div className={Classes.ALERT_FOOTER}>\n                <Button loading={loading} intent={intent} text={confirmButtonText} onClick={handleConfirm} />\n                {cancelButtonText && <Button text={cancelButtonText} disabled={loading} onClick={handleCancel} />}\n            </div>\n        </Dialog>\n    );\n};\n\nAlert.displayName = `${DISPLAYNAME_PREFIX}.Alert`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}