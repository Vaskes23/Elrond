{"ast":null,"code":"/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useEffect, useRef } from \"react\";\n/** React hook which tracks the previous state of a given value. */\nexport function usePrevious(value) {\n  // create a new reference\n  const ref = useRef();\n  // store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  // return previous value (happens before update in useEffect above)\n  return ref.current;\n}","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/hooks/usePrevious.ts"],"sourcesContent":["/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect, useRef } from \"react\";\n\n/** React hook which tracks the previous state of a given value. */\nexport function usePrevious<T>(value: T) {\n    // create a new reference\n    const ref = useRef<T>();\n\n    // store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]);\n\n    // return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC;AACA,OAAM,SAAUC,WAAWA,CAAIC,KAAQ;EACnC;EACA,MAAMC,GAAG,GAAGH,MAAM,EAAK;EAEvB;EACAD,SAAS,CAAC,MAAK;IACXI,GAAG,CAACC,OAAO,GAAGF,KAAK;EACvB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX;EACA,OAAOC,GAAG,CAACC,OAAO;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}