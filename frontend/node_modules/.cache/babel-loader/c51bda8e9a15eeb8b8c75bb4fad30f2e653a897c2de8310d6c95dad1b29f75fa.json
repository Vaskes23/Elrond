{"ast":null,"code":"/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useCallback, useContext } from \"react\";\nimport { Classes } from \"../../common\";\nimport { OVERLAY2_REQUIRES_OVERLAY_PROVDER } from \"../../common/errors\";\nimport { isNodeEnv } from \"../../common/utils\";\nimport { OverlaysContext } from \"../../context/overlays/overlaysProvider\";\nimport { useLegacyOverlayStack } from \"./useLegacyOverlayStack\";\n/**\n * React hook to interact with the global overlay stack.\n *\n * @see https://blueprintjs.com/docs/#core/hooks/use-overlay-stack\n */\nexport function useOverlayStack() {\n  // get the overlay stack from application-wide React context\n  const {\n    stack,\n    hasProvider\n  } = useContext(OverlaysContext);\n  const legacyOverlayStack = useLegacyOverlayStack();\n  const getLastOpened = useCallback(() => {\n    return stack.current[stack.current.length - 1];\n  }, [stack]);\n  const getThisOverlayAndDescendants = useCallback(id => {\n    const index = stack.current.findIndex(o => o.id === id);\n    if (index === -1) {\n      return [];\n    }\n    return stack.current.slice(index);\n  }, [stack]);\n  const resetStack = useCallback(() => {\n    stack.current = [];\n  }, [stack]);\n  const openOverlay = useCallback(overlay => {\n    stack.current.push(overlay);\n    if (overlay.props.usePortal && overlay.props.hasBackdrop) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n  }, [stack]);\n  const closeOverlay = useCallback(id => {\n    const otherOverlaysWithBackdrop = stack.current.filter(o => o.props.usePortal && o.props.hasBackdrop && o.id !== id);\n    const index = stack.current.findIndex(o => o.id === id);\n    if (index > -1) {\n      stack.current.splice(index, 1);\n    }\n    if (otherOverlaysWithBackdrop.length === 0) {\n      // remove body class which prevents scrolling of content below overlay\n      document.body.classList.remove(Classes.OVERLAY_OPEN);\n    }\n  }, [stack]);\n  if (!hasProvider) {\n    if (isNodeEnv(\"development\")) {\n      console.error(OVERLAY2_REQUIRES_OVERLAY_PROVDER);\n    }\n    return legacyOverlayStack;\n  }\n  return {\n    closeOverlay,\n    getLastOpened,\n    getThisOverlayAndDescendants,\n    openOverlay,\n    resetStack\n  };\n}","map":{"version":3,"names":["useCallback","useContext","Classes","OVERLAY2_REQUIRES_OVERLAY_PROVDER","isNodeEnv","OverlaysContext","useLegacyOverlayStack","useOverlayStack","stack","hasProvider","legacyOverlayStack","getLastOpened","current","length","getThisOverlayAndDescendants","id","index","findIndex","o","slice","resetStack","openOverlay","overlay","push","props","usePortal","hasBackdrop","document","body","classList","add","OVERLAY_OPEN","closeOverlay","otherOverlaysWithBackdrop","filter","splice","remove","console","error"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/hooks/overlays/useOverlayStack.ts"],"sourcesContent":["/*\n * Copyright 2024 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useContext } from \"react\";\n\nimport { Classes } from \"../../common\";\nimport { OVERLAY2_REQUIRES_OVERLAY_PROVDER } from \"../../common/errors\";\nimport { isNodeEnv } from \"../../common/utils\";\nimport type { OverlayInstance } from \"../../components\";\nimport { OverlaysContext } from \"../../context/overlays/overlaysProvider\";\n\nimport { useLegacyOverlayStack } from \"./useLegacyOverlayStack\";\n\nexport interface UseOverlayStackReturnValue {\n    /**\n     * Removes an existing overlay off the stack.\n     *\n     * N.B. This method accepts an id instead of an overlay instance because the latter may be\n     * null when an overlay is unmounting, and we may stil have some cleanup to do at that time.\n     * Also, this method is not idempotent: if the overlay is not found on the stack, nothing happens.\n     *\n     * @param id identifier of the overlay to be closed\n     */\n    closeOverlay: (id: string) => void;\n\n    /**\n     * @returns the last opened overlay on the stack\n     */\n    getLastOpened: () => OverlayInstance | undefined;\n\n    /**\n     * @param id current overlay identifier\n     * @returns a list of the current overlay and all overlays which are descendants of it.\n     */\n    getThisOverlayAndDescendants: (id: string) => OverlayInstance[];\n\n    /**\n     * Pushes a new overlay onto the stack.\n     */\n    openOverlay: (overlay: OverlayInstance) => void;\n\n    /**\n     * Resets the overlay stack, to be called after all overlays are closed.\n     * Warning: this should only be used in unit tests.\n     */\n    resetStack: () => void;\n}\n\n/**\n * React hook to interact with the global overlay stack.\n *\n * @see https://blueprintjs.com/docs/#core/hooks/use-overlay-stack\n */\nexport function useOverlayStack(): UseOverlayStackReturnValue {\n    // get the overlay stack from application-wide React context\n    const { stack, hasProvider } = useContext(OverlaysContext);\n    const legacyOverlayStack = useLegacyOverlayStack();\n\n    const getLastOpened = useCallback(() => {\n        return stack.current[stack.current.length - 1];\n    }, [stack]);\n\n    const getThisOverlayAndDescendants = useCallback(\n        (id: string) => {\n            const index = stack.current.findIndex(o => o.id === id);\n            if (index === -1) {\n                return [];\n            }\n            return stack.current.slice(index);\n        },\n        [stack],\n    );\n\n    const resetStack = useCallback(() => {\n        stack.current = [];\n    }, [stack]);\n\n    const openOverlay = useCallback(\n        (overlay: OverlayInstance) => {\n            stack.current.push(overlay);\n            if (overlay.props.usePortal && overlay.props.hasBackdrop) {\n                // add a class to the body to prevent scrolling of content below the overlay\n                document.body.classList.add(Classes.OVERLAY_OPEN);\n            }\n        },\n        [stack],\n    );\n\n    const closeOverlay = useCallback(\n        (id: string) => {\n            const otherOverlaysWithBackdrop = stack.current.filter(\n                o => o.props.usePortal && o.props.hasBackdrop && o.id !== id,\n            );\n\n            const index = stack.current.findIndex(o => o.id === id);\n            if (index > -1) {\n                stack.current.splice(index, 1);\n            }\n\n            if (otherOverlaysWithBackdrop.length === 0) {\n                // remove body class which prevents scrolling of content below overlay\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        },\n        [stack],\n    );\n\n    if (!hasProvider) {\n        if (isNodeEnv(\"development\")) {\n            console.error(OVERLAY2_REQUIRES_OVERLAY_PROVDER);\n        }\n        return legacyOverlayStack;\n    }\n\n    return {\n        closeOverlay,\n        getLastOpened,\n        getThisOverlayAndDescendants,\n        openOverlay,\n        resetStack,\n    };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAE/C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,iCAAiC,QAAQ,qBAAqB;AACvE,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,SAASC,eAAe,QAAQ,yCAAyC;AAEzE,SAASC,qBAAqB,QAAQ,yBAAyB;AAqC/D;;;;;AAKA,OAAM,SAAUC,eAAeA,CAAA;EAC3B;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAW,CAAE,GAAGR,UAAU,CAACI,eAAe,CAAC;EAC1D,MAAMK,kBAAkB,GAAGJ,qBAAqB,EAAE;EAElD,MAAMK,aAAa,GAAGX,WAAW,CAAC,MAAK;IACnC,OAAOQ,KAAK,CAACI,OAAO,CAACJ,KAAK,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;EAClD,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMM,4BAA4B,GAAGd,WAAW,CAC3Ce,EAAU,IAAI;IACX,MAAMC,KAAK,GAAGR,KAAK,CAACI,OAAO,CAACK,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MACd,OAAO,EAAE;IACb;IACA,OAAOR,KAAK,CAACI,OAAO,CAACO,KAAK,CAACH,KAAK,CAAC;EACrC,CAAC,EACD,CAACR,KAAK,CAAC,CACV;EAED,MAAMY,UAAU,GAAGpB,WAAW,CAAC,MAAK;IAChCQ,KAAK,CAACI,OAAO,GAAG,EAAE;EACtB,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,MAAMa,WAAW,GAAGrB,WAAW,CAC1BsB,OAAwB,IAAI;IACzBd,KAAK,CAACI,OAAO,CAACW,IAAI,CAACD,OAAO,CAAC;IAC3B,IAAIA,OAAO,CAACE,KAAK,CAACC,SAAS,IAAIH,OAAO,CAACE,KAAK,CAACE,WAAW,EAAE;MACtD;MACAC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC5B,OAAO,CAAC6B,YAAY,CAAC;IACrD;EACJ,CAAC,EACD,CAACvB,KAAK,CAAC,CACV;EAED,MAAMwB,YAAY,GAAGhC,WAAW,CAC3Be,EAAU,IAAI;IACX,MAAMkB,yBAAyB,GAAGzB,KAAK,CAACI,OAAO,CAACsB,MAAM,CAClDhB,CAAC,IAAIA,CAAC,CAACM,KAAK,CAACC,SAAS,IAAIP,CAAC,CAACM,KAAK,CAACE,WAAW,IAAIR,CAAC,CAACH,EAAE,KAAKA,EAAE,CAC/D;IAED,MAAMC,KAAK,GAAGR,KAAK,CAACI,OAAO,CAACK,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE;MACZR,KAAK,CAACI,OAAO,CAACuB,MAAM,CAACnB,KAAK,EAAE,CAAC,CAAC;IAClC;IAEA,IAAIiB,yBAAyB,CAACpB,MAAM,KAAK,CAAC,EAAE;MACxC;MACAc,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACO,MAAM,CAAClC,OAAO,CAAC6B,YAAY,CAAC;IACxD;EACJ,CAAC,EACD,CAACvB,KAAK,CAAC,CACV;EAED,IAAI,CAACC,WAAW,EAAE;IACd,IAAIL,SAAS,CAAC,aAAa,CAAC,EAAE;MAC1BiC,OAAO,CAACC,KAAK,CAACnC,iCAAiC,CAAC;IACpD;IACA,OAAOO,kBAAkB;EAC7B;EAEA,OAAO;IACHsB,YAAY;IACZrB,aAAa;IACbG,4BAA4B;IAC5BO,WAAW;IACXD;GACH;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}