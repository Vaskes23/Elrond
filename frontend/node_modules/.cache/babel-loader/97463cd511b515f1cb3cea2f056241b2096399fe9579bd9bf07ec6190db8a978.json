{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport classNames from \"classnames\";\nimport { Component } from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { TreeNode } from \"./treeNode\";\n/**\n * Tree component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport class Tree extends Component {\n  constructor() {\n    super(...arguments);\n    this.nodeRefs = {};\n    this.handleContentRef = (node, element) => {\n      if (element != null) {\n        this.nodeRefs[node.id] = element;\n      } else {\n        // don't want our object to get bloated with old keys\n        delete this.nodeRefs[node.id];\n      }\n    };\n    this.handleNodeCollapse = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeCollapse) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeClick = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeClick) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeContextMenu = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeContextMenu) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeDoubleClick = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeDoubleClick) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeExpand = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeExpand) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeMouseEnter = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n    this.handleNodeMouseLeave = (node, path, e) => {\n      var _a, _b;\n      (_b = (_a = this.props).onNodeMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a, node, path, e);\n    };\n  }\n  static ofType() {\n    return Tree;\n  }\n  static nodeFromPath(path, treeNodes) {\n    if (path.length === 1) {\n      return treeNodes[path[0]];\n    } else {\n      return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);\n    }\n  }\n  render() {\n    return _jsx(\"div\", {\n      className: classNames(Classes.TREE, this.props.className, {\n        [Classes.COMPACT]: this.props.compact\n      }),\n      children: this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)\n    });\n  }\n  /**\n   * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n   * This element does not contain the children of the node, only its label and controls.\n   * If the node is not currently mounted, `undefined` is returned.\n   */\n  getNodeContentElement(nodeId) {\n    return this.nodeRefs[nodeId];\n  }\n  renderNodes(treeNodes, currentPath, className) {\n    if (treeNodes == null) {\n      return null;\n    }\n    const nodeItems = treeNodes.map((node, i) => {\n      const elementPath = currentPath.concat(i);\n      return _createElement(TreeNode, {\n        ...node,\n        key: node.id,\n        contentRef: this.handleContentRef,\n        depth: elementPath.length - 1,\n        onClick: this.handleNodeClick,\n        onContextMenu: this.handleNodeContextMenu,\n        onCollapse: this.handleNodeCollapse,\n        onDoubleClick: this.handleNodeDoubleClick,\n        onExpand: this.handleNodeExpand,\n        onMouseEnter: this.handleNodeMouseEnter,\n        onMouseLeave: this.handleNodeMouseLeave,\n        path: elementPath\n      }, this.renderNodes(node.childNodes, elementPath));\n    });\n    return _jsx(\"ul\", {\n      className: classNames(Classes.TREE_NODE_LIST, className),\n      children: nodeItems\n    });\n  }\n}\nTree.displayName = `${DISPLAYNAME_PREFIX}.Tree`;","map":{"version":3,"names":["classNames","Component","Classes","DISPLAYNAME_PREFIX","TreeNode","Tree","constructor","nodeRefs","handleContentRef","node","element","id","handleNodeCollapse","path","e","_b","_a","props","onNodeCollapse","call","handleNodeClick","onNodeClick","handleNodeContextMenu","onNodeContextMenu","handleNodeDoubleClick","onNodeDoubleClick","handleNodeExpand","onNodeExpand","handleNodeMouseEnter","onNodeMouseEnter","handleNodeMouseLeave","onNodeMouseLeave","ofType","nodeFromPath","treeNodes","length","slice","childNodes","render","_jsx","className","TREE","COMPACT","compact","children","renderNodes","contents","TREE_ROOT","getNodeContentElement","nodeId","currentPath","nodeItems","map","i","elementPath","concat","_createElement","key","contentRef","depth","onClick","onContextMenu","onCollapse","onDoubleClick","onExpand","onMouseEnter","onMouseLeave","TREE_NODE_LIST","displayName"],"sources":["/Users/husseingalal/Desktop/Hackathon/Elrond/frontend/node_modules/@blueprintjs/core/src/components/tree/tree.tsx"],"sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport { Component } from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX, type Props } from \"../../common\";\n\nimport { TreeNode } from \"./treeNode\";\nimport type { TreeEventHandler, TreeNodeInfo } from \"./treeTypes\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface TreeProps<T = {}> extends Props {\n    /**\n     * Whether to use a compact appearance which reduces the visual padding around node content.\n     */\n    compact?: boolean;\n\n    /**\n     * The data specifying the contents and appearance of the tree.\n     */\n    contents: ReadonlyArray<TreeNodeInfo<T>>;\n\n    /**\n     * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\n     */\n    onNodeClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when caret of an expanded node is clicked.\n     */\n    onNodeCollapse?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is right-clicked or the context menu button is pressed on a focused node.\n     */\n    onNodeContextMenu?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is double-clicked. Be careful when using this in combination with\n     * an `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\n     * See http://stackoverflow.com/q/5497073/3124288\n     */\n    onNodeDoubleClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the caret of a collapsed node is clicked.\n     */\n    onNodeExpand?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved over a node.\n     */\n    onNodeMouseEnter?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved out of a node.\n     */\n    onNodeMouseLeave?: TreeEventHandler<T>;\n}\n\n/**\n * Tree component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport class Tree<T = {}> extends Component<TreeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tree`;\n\n    public static ofType<U>() {\n        return Tree as new (props: TreeProps<U>) => Tree<U>;\n    }\n\n    public static nodeFromPath<U>(\n        path: readonly number[],\n        treeNodes?: ReadonlyArray<TreeNodeInfo<U>>,\n    ): TreeNodeInfo<U> {\n        if (path.length === 1) {\n            return treeNodes![path[0]];\n        } else {\n            return Tree.nodeFromPath(path.slice(1), treeNodes![path[0]].childNodes);\n        }\n    }\n\n    private nodeRefs: { [nodeId: string]: HTMLElement } = {};\n\n    public render() {\n        return (\n            <div\n                className={classNames(Classes.TREE, this.props.className, {\n                    [Classes.COMPACT]: this.props.compact,\n                })}\n            >\n                {this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)}\n            </div>\n        );\n    }\n\n    /**\n     * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n     * This element does not contain the children of the node, only its label and controls.\n     * If the node is not currently mounted, `undefined` is returned.\n     */\n    public getNodeContentElement(nodeId: string | number): HTMLElement | undefined {\n        return this.nodeRefs[nodeId];\n    }\n\n    private renderNodes(\n        treeNodes: ReadonlyArray<TreeNodeInfo<T>> | undefined,\n        currentPath?: number[],\n        className?: string,\n    ) {\n        if (treeNodes == null) {\n            return null;\n        }\n\n        const nodeItems = treeNodes.map((node, i) => {\n            const elementPath = currentPath!.concat(i);\n            return (\n                <TreeNode<T>\n                    {...node}\n                    key={node.id}\n                    contentRef={this.handleContentRef}\n                    depth={elementPath.length - 1}\n                    onClick={this.handleNodeClick}\n                    onContextMenu={this.handleNodeContextMenu}\n                    onCollapse={this.handleNodeCollapse}\n                    onDoubleClick={this.handleNodeDoubleClick}\n                    onExpand={this.handleNodeExpand}\n                    onMouseEnter={this.handleNodeMouseEnter}\n                    onMouseLeave={this.handleNodeMouseLeave}\n                    path={elementPath}\n                >\n                    {this.renderNodes(node.childNodes, elementPath)}\n                </TreeNode>\n            );\n        });\n\n        return <ul className={classNames(Classes.TREE_NODE_LIST, className)}>{nodeItems}</ul>;\n    }\n\n    private handleContentRef = (node: TreeNodeInfo<T>, element: HTMLElement | null) => {\n        if (element != null) {\n            this.nodeRefs[node.id] = element;\n        } else {\n            // don't want our object to get bloated with old keys\n            delete this.nodeRefs[node.id];\n        }\n    };\n\n    private handleNodeCollapse = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeCollapse?.(node, path, e);\n    };\n\n    private handleNodeClick = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeClick?.(node, path, e);\n    };\n\n    private handleNodeContextMenu = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeContextMenu?.(node, path, e);\n    };\n\n    private handleNodeDoubleClick = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeDoubleClick?.(node, path, e);\n    };\n\n    private handleNodeExpand = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeExpand?.(node, path, e);\n    };\n\n    private handleNodeMouseEnter = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeMouseEnter?.(node, path, e);\n    };\n\n    private handleNodeMouseLeave = (node: TreeNodeInfo<T>, path: number[], e: React.MouseEvent<HTMLElement>) => {\n        this.props.onNodeMouseLeave?.(node, path, e);\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}